@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText("Invalid startIndex: "); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.replaceFirst("Invalid startIndex: ", "t~;\"vYIT!5d}%CW)%"); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       int int0 = 537; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.replace(537, 166, ""); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(102); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(102, 102, '?'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendAll(iterator0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = treeSet0.retainAll(arrayList0); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       charArray0[0] = '?'; [EOL]       charArray0[1] = '?'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder1.indexOf((StrMatcher) strMatcher_CharSetMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher((char[]) null); [EOL]        [EOL]       boolean boolean1 = strBuilder2.contains(strMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       boolean boolean2 = strBuilder_StrBuilderReader0.markSupported(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadRight((Object) iterator0, 102, '?'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.mark(63); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendSeparator("{8UA", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       Integer integer0 = new Integer(2280); [EOL]       MutableFloat mutableFloat0 = new MutableFloat((Number) integer0); [EOL]       Short short0 = new Short((short) (-1931)); [EOL]       mutableFloat0.subtract((Number) short0); [EOL]       assertEquals(4211.0, mutableFloat0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-648), (-176), '2'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteFirst('2'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendln((StringBuffer) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '1'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendAll((Iterable<?>) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       String string1 = strBuilder4.rightString(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetField()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Field field0 = FieldUtils.getField(class0, "s ubr$U?#"); [EOL]       assertNull(field0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "e~/aXjk(\"-1QzZxGM", hashMap0); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0); [EOL]       ExecutorService executorService0 = callableBackgroundInitializer0.getExternalExecutor(); [EOL]       assertNull(executorService0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetMilliseconds()  throws Throwable  { [EOL]       Instant instant0 = MockInstant.ofEpochMilli(0L); [EOL]       Date date0 = Date.from(instant0); [EOL]       Date date1 = DateUtils.setMilliseconds(date0, (-2215)); [EOL]       assertNotSame(date1, date0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprimitiveToWrapper()  throws Throwable  { [EOL]       Class<?> class0 = ClassUtils.primitiveToWrapper((Class<?>) null); [EOL]       assertNull(class0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-43)); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-2081), (-1)).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.is((Object) integer0, comparator0); [EOL]       boolean boolean0 = range0.isStartedBy(integer0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseShortClassName(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-620)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(1L); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.markSupported(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll(iterator0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals((Object) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteAll('J'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.append(1L); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder5); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write("?NYmW7afS>c]@v"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean2 = strBuilder5.isEmpty(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteFirst('\\'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendWithSeparators(iterator0, "u"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(strBuilder2); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.append(1.0F); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.append(stringBuffer0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.subSequence((-900), (-620)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -900 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       stringBuffer0.setLength(2016); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, 2, 5); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(2); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder2.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((-523.88385F)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.append(5); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.setNullText("/RDU5z0P,\u0001Ay"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder2.build(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder3.append((Object) strBuilder5); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       Object object0 = new Object(); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.append(object0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder2.appendNewLine(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder9.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer1 = strBuilder9.toStringBuffer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder9.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'G'; [EOL]       strBuilder8.buffer = charArray0; [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder5.setNullText(""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder10.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder8.length(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf((String) null, (-677)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.appendln((float) 5); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testunescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = ""; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       stringBuffer0.setLength(2016); [EOL]        [EOL]       int int0 = 5; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, 2, 5); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(2); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendSeparator("", 32); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder4.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.append((-523.88385F)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append(5); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.setNullText("/RDU5z0P,\u0001Ay"); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder6.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder7.getNullText()); [EOL]        [EOL]       String string1 = strBuilder2.build(); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder3.append((Object) strBuilder6); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder3.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder6.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder8.getNullText()); [EOL]        [EOL]       Object object0 = new Object(); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder0.append(object0); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder9.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder2.appendNewLine(); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder10.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText()); [EOL]        [EOL]       StringBuffer stringBuffer1 = strBuilder10.toStringBuffer(); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder10.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'G'; [EOL]       strBuilder9.buffer = charArray0; [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder9.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.appendln(strBuilder4, 2, 2016); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testswapCase()  throws Throwable  { [EOL]       String string0 = WordUtils.swapCase(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionToString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       Class<Object> class0 = Object.class; [EOL]       String string0 = ToStringBuilder.reflectionToString(object0, toStringStyle0, true, (Class<? super Object>) class0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       int[] intArray0 = new int[18]; [EOL]       int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'c', 'O'); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = "\\p{InCombiningDiacriticalMarks}+"; [EOL]       Locale locale0 = Locale.TAIWAN; [EOL]        [EOL]       String string1 = locale0.getDisplayName(); [EOL]        [EOL]       String string2 = StringUtils.lowerCase("p{InCombiningDiacriticalMarks}+", locale0); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL]       assertFalse(stack0.contains("p{InCombiningDiacriticalMarks}+")); [EOL]        [EOL]       boolean boolean0 = stack0.add((Object) "p{InCombiningDiacriticalMarks}+"); [EOL]       assertTrue(stack0.contains("p{InCombiningDiacriticalMarks}+")); [EOL]        [EOL]       Iterator<Object> iterator0 = stack0.iterator(); [EOL]       assertTrue(stack0.contains("p{InCombiningDiacriticalMarks}+")); [EOL]        [EOL]       char char0 = '>'; [EOL]       String string3 = StringUtils.join(iterator0, '>'); [EOL]       assertFalse(stack0.contains('>')); [EOL]       assertTrue(stack0.contains("p{InCombiningDiacriticalMarks}+")); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = (int) '>'; [EOL]       intArray0[1] = 2777; [EOL]       intArray0[2] = (int) '>'; [EOL]       intArray0[3] = (-1572); [EOL]       intArray0[4] = (int) '>'; [EOL]       intArray0[5] = (int) '>'; [EOL]       intArray0[6] = (int) '>'; [EOL]       intArray0[7] = (int) '>'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(intArray0, '>', (-1572), 62); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -1572 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(0, (-300)); [EOL]       boolean boolean0 = unicodeEscaper0.translate(0, (Writer) stringWriter0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       charSequenceArray0[0] = (CharSequence) "JGbjVl3X9m!&2 XD"; [EOL]       String string0 = StringUtils.remove("5I<=Sp4`*rQ9Ey", '~'); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "5I<=Sp4`*rQ9Ey"; [EOL]       charSequenceArray0[2] = (CharSequence) "JGbjVl3X9m!&2 XD"; [EOL]       String string1 = StringUtils.appendIfMissing("JGbjVl3X9m!&2 XD", "JGbjVl3X9m!&2 XD", charSequenceArray0); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.join((Object[]) charSequenceArray0, 'y', 2303, (-405)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.substringBeforeLast("", ""); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]        [EOL]       int int0 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[2], "", 2303); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.replacePattern((String) null, "C^~Zv[B=W<.aXJ]B2k", "org.apache.commons.lang3.StringUtils"); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", ""); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]        [EOL]       String string3 = StringUtils.repeat('A', 1330); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) "~@!LXZ6YxCtw"; [EOL]       charSequenceArray0[1] = (CharSequence) "D;ijuF},="; [EOL]       charSequenceArray0[2] = (CharSequence) "~@!LXZ6YxCtw"; [EOL]       charSequenceArray0[3] = (CharSequence) "~@!LXZ6YxCtw"; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "D;ijuF},="; [EOL]       String string4 = StringUtils.appendIfMissing("D;ijuF},=", string3, charSequenceArray0);ijuF},=", string4); [EOL]       assertEquals(6, charSequenceArray0.length); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) ""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("length must be valid"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, '_'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(".["); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append(strBuilder2, 0, 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '_'; [EOL]       charArray0[1] = '_'; [EOL]       charArray0[2] = '_'; [EOL]       charArray0[3] = '_'; [EOL]       charArray0[4] = '_'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.substring(915, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(85, 85, 3832, 85); [EOL]       Boolean boolean1 = BooleanUtils.negate(boolean0); [EOL]       assertFalse(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]       char[] charArray0 = new char[2]; [EOL]       int int0 = strMatcher_NoMatcher0.isMatch(charArray0, 1, 1, (-2741)); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBefore("(?: s|[s&&[^ ]])s*", "(?: s|[s&&[^ ]])s*"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'K'; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.lowerCase("4QSejn\"zyIHEF~:m|C"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoDouble()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)89); [EOL]       MutableDouble mutableDouble0 = new MutableDouble((Number) byte0); [EOL]       mutableDouble0.add((double) 108L); [EOL]       assertEquals(197.0, mutableDouble0.toDouble(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("M?]bESD_=n"); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, 0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf(strMatcher0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int2 = (-65); [EOL]       String string0 = strBuilder0.midString(62, (-65)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((-2266.992F)); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]       assertEquals(10, strBuilder1.size()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-1), 62); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('\u000B'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("v"); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]        [EOL]       int int0 = 169; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator("v", 169); [EOL]       assertEquals(2, strBuilder0.size()); [EOL]       assertEquals(2, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'O'; [EOL]       char char0 = '+'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars(554, (-1433), charArray0, 554); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1433 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) null; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) null; [EOL]       objectArray0[5] = (Object) null; [EOL]       objectArray0[6] = (Object) strBuilder0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln((String) null, objectArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = (-1123.413941); [EOL]       doubleArray0[1] = 0.0; [EOL]       doubleArray0[2] = 6273.6721243; [EOL]       doubleArray0[3] = 0.0; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, (double[]) null); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((int[]) null, (int[]) null); [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '0'; [EOL]       char[] charArray1 = new char[4]; [EOL]       charArray1[0] = '0'; [EOL]       charArray1[1] = '0'; [EOL]       charArray1[2] = '0'; [EOL]       charArray1[3] = '0'; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray1); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(false, true); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((Object) "Cannot get the toString of a null identity", (Object) equalsBuilder2); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append((byte)31, (byte)101); [EOL]       assertSame(equalsBuilder0, equalsBuilder6); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln('N'); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceAll("", (String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       String string1 = strBuilder0.rightString((-2383)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       double[] doubleArray0 = new double[4]; [EOL]       double[] doubleArray1 = new double[7]; [EOL]       compareToBuilder0.append(doubleArray0, doubleArray1); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       compareToBuilder0.append(objectArray0, objectArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       assertTrue(equalsBuilder1.build()); [EOL]        [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = 1.0; [EOL]       doubleArray0[1] = (-690.4802009552836); [EOL]       doubleArray0[2] = 765.3743487472304; [EOL]       doubleArray0[3] = 0.0; [EOL]       double[] doubleArray1 = new double[4]; [EOL]       doubleArray1[0] = 0.0; [EOL]       doubleArray1[1] = 0.0; [EOL]       doubleArray1[2] = (-690.4802009552836); [EOL]       doubleArray1[3] = 1.0; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray1); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-690.4802009552836), (-1445.7440248)); [EOL]       Integer integer0 = new Integer((-4784)); [EOL]       EqualsBuilder.isRegistered(integer0, "]lEx>?>"); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1.1F, 1.1F); [EOL]       equalsBuilder4.append(406, 406); [EOL]       assertFalse(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('9', '9'); [EOL]       char char0 = charRange0.getEnd(); [EOL]       assertEquals('9', charRange0.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.appendSuper(37); [EOL]       hashCodeBuilder0.append((long) (-2563)); [EOL]       hashCodeBuilder0.append((long) (-2563)); [EOL]       assertEquals(0, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("0x"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendNewLine(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append((Object) strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder4 = new StrBuilder((String) null); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.deleteFirst(strMatcher0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-2586)); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string0 = StringUtils.center("6~L @37EEQ$", (-2586), "The character must not be null"); [EOL]        [EOL]       int int2 = StringUtils.length("6~L @37EEQ$"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) "6~L @37EEQ$"; [EOL]       String string1 = StringUtils.appendIfMissingIgnoreCase("6~L @37EEQ$", "6~L @37EEQ$", charSequenceArray0); [EOL]       assertEquals(1, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(3421, 3421); [EOL]       int int0 = fraction0.intValue(); [EOL]       assertEquals(3421, fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       int int0 = (-334); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-334)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-334), 117, 'P'); [EOL]        [EOL]       int int1 = strBuilder0.indexOf('P'); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(117); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert((-334), false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -334 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       short[] shortArray0 = new short[8]; [EOL]       ArrayUtils.reverse(shortArray0); [EOL]       assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = "Minimum abbreviation width with offset is 7"; [EOL]       String string1 = StringUtils.replaceChars("iB`Dd`m)wT", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "iB`Dd`m)wT", 0); [EOL]        [EOL]       char char0 = 'D'; [EOL]       String string2 = StringUtils.remove("iB`Dd`m)wT", 'D'); [EOL]        [EOL]       String string3 = StringUtils.substringAfter("...", ", Length: "); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("vH#$4G"); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.chomp("on,/B?M*0;2fA");2fA", string4); [EOL]        [EOL]       String string5 = StringUtils.join((float[]) null, 'D'); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.toString((byte[]) null, ""); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       String string0 = StringUtils.join(iterator0, "The character must not be null"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "The character must not be null", (CharSequence) "The character must not be null"); [EOL]        [EOL]       Integer integer0 = linkedList0.pollFirst(); [EOL]       assertFalse(linkedList0.contains(int0)); [EOL]        [EOL]       String string1 = StringUtils.chomp(""); [EOL]        [EOL]       String string2 = StringUtils.lowerCase(""); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "The character must not be null", ""); [EOL]        [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       stringArray0[3] = ""; [EOL]       stringArray0[4] = ""; [EOL]       String string3 = StringUtils.join(stringArray0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null); [EOL]        [EOL]       String string4 = StringUtils.substringBefore("kytsDAH*4", "kytsDAH*4"); [EOL]        [EOL]       String string5 = StringUtils.lowerCase(""); [EOL]        [EOL]       int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.appendIfMissing("", "", stringArray0); [EOL]        [EOL]       int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray0); [EOL]        [EOL]       String string7 = StringUtils.removeEndIgnoreCase("", ""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding(416, 'n'); [EOL]       assertEquals(416, strBuilder0.length()); [EOL]       assertEquals(416, strBuilder1.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right((String) null, (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, (String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[3] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]       assertEquals(8, shortArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       String string0 = StringUtils.center("org.apache.commons.lang3.StringUtils", 0, "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       String string1 = StringUtils.stripToEmpty("org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       char char0 = 'R'; [EOL]       String string2 = StringUtils.center("JL_O}", 0, 'R'); [EOL]        [EOL]       String string3 = StringUtils.center((String) null, 0, "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       char char1 = '}'; [EOL]       String string4 = StringUtils.rightPad((String) null, 2185, '}'); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 2185); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL]       assertTrue(stack0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stack0.listIterator((-1)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // Index: -1 [EOL]          // [EOL]          verifyException("java.util.Vector", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       int[] intArray0 = new int[6]; [EOL]       int[] intArray1 = new int[9]; [EOL]       compareToBuilder0.append(intArray0, intArray1); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.stripStart(" ", " "); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) " "); [EOL]        [EOL]       Object[] objectArray0 = new Object[3]; [EOL]       objectArray0[0] = (Object) ""; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[1] = object0; [EOL]       objectArray0[2] = (Object) ""; [EOL]       String string1 = StringUtils.join(objectArray0, "", 2670, 2670); [EOL]       assertEquals(3, objectArray0.length); [EOL]        [EOL]       String string2 = StringUtils.replace("m", "", " ", 2670); [EOL]        [EOL]       String string3 = StringUtils.normalizeSpace(""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase("", "m"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAlphanumeric("m"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(2374, 0, 2374); [EOL]       Fraction fraction1 = fraction0.ONE_HALF.pow(0); [EOL]       assertEquals(2374, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = NumericEntityUnescaper.OPTION.values(); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       int int0 = numericEntityUnescaper0.translate((CharSequence) "&#&\u0000\u0000\u0000#", (int) '\u0000', (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-929)); [EOL]       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("|H").when(comparator0).toString(); [EOL]       doReturn(12, 611, (-929), 611, 0).when(comparator0).compare(anyInt() , anyInt()); [EOL]       Range<Integer> range0 = Range.is(integer0, comparator0); [EOL]       Comparator<Integer> comparator1 = range0.getComparator(); [EOL]       Range<Integer> range1 = Range.between(integer0, integer0, comparator1); [EOL]       boolean boolean0 = range0.isOverlappedBy(range1); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte) (-34); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0); [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = (float) (byte) (-34); [EOL]       floatArray0[1] = (float) (byte) (-34); [EOL]       floatArray0[2] = (float) (byte) (-34); [EOL]       floatArray0[3] = (float) (byte) (-34); [EOL]       floatArray0[4] = (float) (byte) (-34); [EOL]       floatArray0[5] = (float) (byte) (-34); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((float[]) null, floatArray0); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((float) (byte) (-34), (-1.0F)); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) (-34.0F), (double) (byte) (-34)); [EOL]       char[] charArray0 = new char[0]; [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append(charArray0, charArray0); [EOL]       assertSame(equalsBuilder6, equalsBuilder5); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = (-1890); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1890)); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1890), 0.0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1890 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       Long long0 = mutableLong0.getValue(); [EOL]       assertEquals(0L, (long)long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = (-334); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-334)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-334), 117, 'P'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf('P'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(117); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert((-334), false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -334 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testround()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-113), 1, 2, (-451), 3725); [EOL]       Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1); [EOL]       calendar0.setLenient(false); [EOL]       DateUtils.ceiling(calendar0, 0); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=8,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testinitializeUnchecked()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0); [EOL]       TimeUnit timeUnit0 = TimeUnit.DAYS; [EOL]       concurrentUtils_ConstantFuture0.get((long) 0, timeUnit0); [EOL]       ConcurrentHashMap<Error, String> concurrentHashMap0 = new ConcurrentHashMap<Error, String>(0); [EOL]       MockError mockError0 = new MockError(":IC?TWffvYqDnT"); [EOL]       ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, String>) concurrentHashMap0, (Error) mockError0, "Kh*+5b4@&oFsn"); [EOL]       ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Error>) null); [EOL]       ConcurrentUtils.initialize((ConcurrentInitializer<Error>) null); [EOL]       ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>((Object) null); [EOL]       concurrentUtils_ConstantFuture1.get(); [EOL]       ConcurrentSkipListMap<RuntimeException, Delayed> concurrentSkipListMap0 = new ConcurrentSkipListMap<RuntimeException, Delayed>(); [EOL]       ExecutionException executionException0 = new ExecutionException("Naming pattern must not be null!", (Throwable) null); [EOL]       ConcurrentUtils.extractCauseUnchecked(executionException0); [EOL]       Delayed delayed0 = ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<RuntimeException, Delayed>) concurrentSkipListMap0, (RuntimeException) null, (ConcurrentInitializer<Delayed>) null); [EOL]       assertNull(delayed0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisOverlappedBy()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-929)); [EOL]       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("|H").when(comparator0).toString(); [EOL]       doReturn(12, 611, (-929), 611, 0).when(comparator0).compare(anyInt() , anyInt()); [EOL]       Range<Integer> range0 = Range.is(integer0, comparator0); [EOL]       Comparator<Integer> comparator1 = range0.getComparator(); [EOL]       Range<Integer> range1 = Range.between(integer0, integer0, comparator1); [EOL]       boolean boolean0 = range0.isOverlappedBy(range1); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("@uY"); [EOL]        [EOL]       ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]        [EOL]       boolean boolean0 = arrayDeque0.add("2qZ^>Qrw9g\"x/].J"); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]       assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J")); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = 'Q'; [EOL]       charArray0[1] = 'E'; [EOL]       charArray0[2] = '8'; [EOL]       charArray0[3] = '&'; [EOL]       charArray0[4] = 'D'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]        [EOL]       ArrayDeque<String> arrayDeque1 = arrayDeque0.clone(); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]       assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertTrue(arrayDeque1.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertFalse(arrayDeque1.contains("@uY")); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) arrayDeque1, "@uY"); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]       assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertTrue(arrayDeque1.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertFalse(arrayDeque1.contains("@uY")); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(0.0); [EOL]        [EOL]       int int1 = strBuilder0.indexOf('c'); [EOL]        [EOL]       int int2 = strBuilder0.lastIndexOf('c'); [EOL]        [EOL]       int int3 = strBuilder1.size(); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]       assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertTrue(arrayDeque1.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertFalse(arrayDeque1.contains("@uY")); [EOL]        [EOL]       arrayDeque0.addFirst("2qZ^>Qrw9g\"x/].J"); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]       assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J")); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append(2998); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]       assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertTrue(arrayDeque1.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertFalse(arrayDeque1.contains("@uY")); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('h'); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll(", Length: 0", ", Length: 0"); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer2, 773, '5'); [EOL]       assertEquals(773, strBuilder0.size()); [EOL]       assertEquals(773, strBuilder2.size()); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[3] = (Object) strMatcher0; [EOL]       objectArray0[4] = (Object) ", Length: 0"; [EOL]       objectArray0[5] = (Object) strMatcher0; [EOL]       StrBuilder strBuilder3 = strBuilder1.appendSeparator(""); [EOL]       assertEquals(773, strBuilder0.size()); [EOL]       assertEquals(773, strBuilder1.size()); [EOL]       assertEquals(773, strBuilder3.size()); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'h'; [EOL]       charArray0[2] = 'h'; [EOL]       charArray0[3] = 'h'; [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'h'; [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]       assertEquals(773, strBuilder0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1083)); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(integer0, toStringStyle0); [EOL]       long[] longArray0 = new long[8]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append(longArray0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("e9EwrN.v3yrb0"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(645); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 645); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteFirst(strMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendNull(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       int int0 = (-3235); [EOL]       StrBuilder strBuilder5 = strBuilder1.appendSeparator('7', (-3235)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       int int1 = 3; [EOL]       strBuilder0.validateIndex(3); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.appendln('y'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       String string0 = ""; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert((-407), false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -407 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[6]; [EOL]       int int0 = ArrayUtils.indexOf(floatArray0, 0.0F); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       long long0 = mutableDouble0.longValue(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "bA'rZ-*CMNc~eS"); [EOL]       Class<Object> class0 = Object.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Integer) null, toStringStyle0, stringBuffer0, (Class<? super Integer>) class0, false, true); [EOL]       reflectionToStringBuilder0.setAppendStatics(true); [EOL]       assertTrue(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad((String) null, 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", (CharSequence) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, ""); [EOL]       assertTrue(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse((String) null); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) null, charArray0); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[0] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]       assertFalse(string8.equals((Object)string5)); [EOL]       assertFalse(string8.equals((Object)string2)); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       long[] longArray0 = new long[5]; [EOL]       long[] longArray1 = ArrayUtils.clone(longArray0); [EOL]       assertEquals(5, longArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisValidEnum()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       boolean boolean0 = EnumUtils.isValidEnum(class0, (String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '\''); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.isEmpty(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.midString(34, (-1)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator(">R<{"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.ensureCapacity(34); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'K'; [EOL]       charArray0[1] = 'S'; [EOL]       charArray0[2] = 'L'; [EOL]       charArray0[3] = 'x'; [EOL]       charArray0[4] = '`'; [EOL]       charArray0[5] = '^'; [EOL]       charArray0[6] = 'V'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.getChars(3889, 0, charArray0, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcancel()  throws Throwable  { [EOL]       MockError mockError0 = new MockError("I09RDL5"); [EOL]       ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0); [EOL]       concurrentUtils_ConstantFuture0.cancel(false); [EOL]       Integer integer0 = new Integer(0); [EOL]       ConcurrentUtils.constantFuture(integer0); [EOL]       Integer integer1 = new Integer((-3998)); [EOL]       ConcurrentUtils.constantFuture(integer1); [EOL]       ConstantInitializer<String> constantInitializer0 = new ConstantInitializer<String>("4>ZLeeq"); [EOL]       ConcurrentUtils.initialize((ConcurrentInitializer<String>) constantInitializer0); [EOL]       Future<String> future0 = ConcurrentUtils.constantFuture("4>ZLeeq"); [EOL]       assertNotNull(future0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoShort()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort(); [EOL]       MutableShort mutableShort1 = new MutableShort((short)1); [EOL]       boolean boolean0 = mutableShort1.equals(mutableShort0); [EOL]       assertEquals((short)1, (short)mutableShort1.toShort()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("java.library.path"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('h'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendPadding(5, 'd'); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('d'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append((CharSequence) strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln('h'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendFixedWidthPadRight((Object) strBuilder2, (-1089), 'd'); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = 'd'; [EOL]       charArray0[1] = '%'; [EOL]       IntStream intStream0 = strBuilder2.chars(); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]        [EOL]       charArray0[2] = 'd'; [EOL]       charArray0[3] = 'h'; [EOL]       charArray0[4] = 'd'; [EOL]       char[] charArray1 = strBuilder3.getChars(charArray0); [EOL]       assertFalse(charArray1.equals((Object)charArray0)); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder2.replace(strMatcher0, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", 5, 5, 5); [EOL]        [EOL]       IntStream intStream1 = strBuilder6.chars(); [EOL]       assertFalse(intStream1.equals((Object)intStream0)); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.insert(18, (-1835.44)); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder2.setLength(18); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder7.appendWithSeparators((Iterator<?>) null, "java.library.path"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFragmentInSeconds()  throws Throwable  { [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = ""; [EOL]       Date date0 = DateUtils.parseDateStrictly("", stringArray0); [EOL]       long long0 = DateUtils.getFragmentInSeconds(date0, 12); [EOL]       assertEquals(21L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendNull(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder1.toStringBuffer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder1.isEmpty(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.substring("(?: s|[s&&[^ ]])s*", 0, 0); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) "(?: s|[s&&[^ ]])s*"; [EOL]       charSequenceArray0[1] = (CharSequence) "(?: s|[s&&[^ ]])s*"; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0); [EOL]       assertEquals(2, charSequenceArray0.length); [EOL]        [EOL]       Locale locale0 = Locale.ROOT; [EOL]        [EOL]       String string1 = StringUtils.upperCase((String) null, locale0); [EOL]        [EOL]       short[] shortArray0 = new short[2]; [EOL]       shortArray0[0] = (short)4416; [EOL]       shortArray0[1] = (short)0; [EOL]       String string2 = StringUtils.join(shortArray0, 'J'); [EOL]       assertEquals(2, shortArray0.length); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate((short)0); [EOL]       assertEquals(0, charBuffer0.length()); [EOL]        [EOL]       CharBuffer charBuffer1 = charBuffer0.compact(); [EOL]       assertEquals(0, charBuffer0.length()); [EOL]       assertEquals(0, charBuffer1.length()); [EOL]        [EOL]       CharBuffer charBuffer2 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0); [EOL]       assertEquals(0, charBuffer0.length()); [EOL]       assertEquals(0, charBuffer2.length()); [EOL]        [EOL]       String string3 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       String string4 = StringUtils.join((Object[]) charSequenceArray0, '9'); [EOL]       assertEquals(2, charSequenceArray0.length); [EOL]        [EOL]       String string5 = StringUtils.difference("(?: s|[s&&[^ ]])s*", "4416J0"); [EOL]        [EOL]       String string6 = StringUtils.center("4416J0", 13, (String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWithAny("(?: s|[s&&[^ ]])s*", charSequenceArray0); [EOL]       assertEquals(2, charSequenceArray0.length); [EOL]        [EOL]       String string7 = StringUtils.uncapitalize("A%"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testkeep()  throws Throwable  { [EOL]       String string0 = CharSetUtils.keep("t3[t6x`ZZhb.", (String[]) null); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAccessible()  throws Throwable  { [EOL]       Member member0 = mock(Member.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(member0).getModifiers(); [EOL]       boolean boolean0 = MemberUtils.isAccessible(member0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.append((byte[]) null); [EOL]       assertEquals((-37), hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testputIfAbsent()  throws Throwable  { [EOL]       ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>((Integer) null); [EOL]       concurrentUtils_ConstantFuture0.isDone(); [EOL]       ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>((Object) null); [EOL]       concurrentUtils_ConstantFuture1.get(); [EOL]       ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(); [EOL]       ConcurrentUtils.putIfAbsent((ConcurrentMap<String, String>) concurrentHashMap0, "+qP~uk)|Cf!j", "+qP~uk)|Cf!j"); [EOL]       Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0); [EOL]       Error error0 = ConcurrentUtils.createIfAbsent((ConcurrentMap<Object, Error>) null, (Object) "+qP~uk)|Cf!j", (ConcurrentInitializer<Error>) callableBackgroundInitializer0); [EOL]       assertNull(error0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.appendSuper(37); [EOL]       hashCodeBuilder0.append((long) (-2563)); [EOL]       hashCodeBuilder0.append((long) (-2563)); [EOL]       assertEquals(0, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCharMatcher()  throws Throwable  { [EOL]       char[] charArray0 = new char[10]; [EOL]       StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('\u0000'); [EOL]       int int0 = strMatcher_CharMatcher0.isMatch(charArray0, 1, 1, 1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHexDigitMsb0()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0(0); [EOL]       assertEquals('0', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]       assertEquals(5, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '?'; [EOL]       charArray0[2] = 'U'; [EOL]       charArray0[3] = '4'; [EOL]       StrBuilder strBuilder2 = strBuilder1.insert(2, charArray0); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]       assertEquals(9, strBuilder1.size()); [EOL]       assertEquals(9, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]       assertEquals(20, strBuilder3.size()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder4 = strBuilder3.insert(0, (String) null); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]       assertEquals(20, strBuilder3.size()); [EOL]       assertEquals(20, strBuilder4.size()); [EOL]        [EOL]       Writer writer0 = strBuilder4.asWriter(); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]       assertEquals(20, strBuilder3.size()); [EOL]       assertEquals(20, strBuilder4.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]       assertEquals(20, strBuilder5.size()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]        [EOL]       char[] charArray1 = new char[0]; [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.trim(); [EOL]       assertEquals(19, strBuilder0.size()); [EOL]       assertEquals(19, strBuilder6.size()); [EOL]       assertEquals(19, strBuilder5.size()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder7 = strBuilder5.append(6); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]       assertEquals(20, strBuilder7.size()); [EOL]       assertEquals(20, strBuilder5.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray1, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1890)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf(strMatcher0, (-1890)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '$'; [EOL]       charArray0[1] = 'B'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("Invalid startIndex: "); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf(strMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(true); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.deleteCharAt((-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((-1)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll(stringArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder1.lastIndexOf('A'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.replaceAll((StrMatcher) null, "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetExternalExecutor()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.getActiveExecutor(); [EOL]       ExecutorService executorService0 = callableBackgroundInitializer0.getActiveExecutor(); [EOL]       Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Object> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Object>(callable1, executorService0); [EOL]       callableBackgroundInitializer1.isStarted(); [EOL]       Callable<Callable<Delayed>> callable2 = (Callable<Callable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Callable<Delayed>> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Callable<Delayed>>(callable2); [EOL]       ExecutorService executorService1 = callableBackgroundInitializer2.getExternalExecutor(); [EOL]       assertNull(executorService1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       boolean boolean0 = charRange0.isNegated(); [EOL]       assertEquals('%', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOfType()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("J"); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("J", mockThrowable0); [EOL]       Class<String> class0 = String.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable1, (Class<?>) class0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, 1784L); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeEndText(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = 102; [EOL]       StrBuilder strBuilder0 = new StrBuilder(102); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.chars(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       Writer writer0 = strBuilder_StrBuilderWriter0.append('H'); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'H'; [EOL]       charArray0[1] = 'H'; [EOL]       charArray0[2] = 'H'; [EOL]       charArray0[3] = 'H'; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(4, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((float) 102); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]       assertEquals(10, strBuilder1.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder0, 102, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -103 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterString("TsNCo]&_$I5.aM"); [EOL]       assertEquals(0, strTokenizer2.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(0L); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendInternal(stringBuffer0, "]J;-oeCxj.", long0, false); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(3235); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '4'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 656); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.validateRange((-495), (-495)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -495 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("FiHbfxLjq4Y/Lm\""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       int int0 = 988; [EOL]       String string0 = strBuilder0.midString(2, 988); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(1855); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.delete(2, 88); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.clear(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       char char0 = '\''; [EOL]       StringWriter stringWriter1 = stringWriter0.append('\''); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(stringBuffer0, 109, (-1319)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isIn('h', 'h'); [EOL]       boolean boolean0 = charRange0.equals(charRange0); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1728); [EOL]        [EOL]       String string0 = "(?: \\s|[\\s&&[^ ]])\\s*"; [EOL]       StrBuilder strBuilder1 = new StrBuilder(1728); [EOL]       assertTrue(strBuilder1.equals((Object)strBuilder0)); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]       assertTrue(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertTrue(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertTrue(strBuilder2.equals((Object)strBuilder1)); [EOL]        [EOL]       int int0 = strBuilder0.indexOf("(?: s|[s&&[^ ]])s*", 7); [EOL]       assertTrue(strBuilder0.equals((Object)strBuilder1)); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]       assertTrue(strBuilder0.equals((Object)strBuilder1)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(''); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append(''); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder4.equals((Object)strBuilder1)); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.appendSeparator((String) null, "(?: s|[s&&[^ ]])s*"); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder4)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder5.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder5.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder5.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder5.equals((Object)strBuilder4)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert(1728, ''); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1728 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 66, '\"'); [EOL]       assertEquals(75, strBuilder0.size()); [EOL]       assertEquals(75, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteAll("SzpQ!4 ;U"); [EOL]       assertEquals(66, strBuilder0.size()); [EOL]       assertEquals(66, strBuilder2.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('f'); [EOL]       assertEquals(4, booleanArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.spaceMatcher(); [EOL]        [EOL]       String string0 = "iVO"; [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher("iVO"); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher("x~DPyO[EG\"4:"); [EOL]        [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher("iVO"); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(0); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher4 = StrMatcher.spaceMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceFirst(strMatcher4, (String) null); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1), "%;$c19wXmzsg6Q"); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = arrayDeque0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, "java.class.version"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append('Y'); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetAllSuperclasses()  throws Throwable  { [EOL]       Class<ClassUtils> class0 = ClassUtils.class; [EOL]       List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0); [EOL]       List<String> list1 = ClassUtils.convertClassesToClassNames(list0); [EOL]       List<Class<?>> list2 = ClassUtils.convertClassNamesToClasses(list1); [EOL]       assertTrue(list2.equals((Object)list0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt((-1)); [EOL]       int int0 = mutableInt0.intValue(); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetLeft()  throws Throwable  { [EOL]       ImmutablePair<Object, String> immutablePair0 = new ImmutablePair<Object, String>((Object) null, ""); [EOL]       Object object0 = immutablePair0.getLeft(); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHex()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0(2); [EOL]       assertEquals('4', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("..."); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-565)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.midString((-565), 5224); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.isEmpty(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = '_'; [EOL]       charArray0[1] = ']'; [EOL]       charArray0[2] = 'p'; [EOL]       charArray0[3] = 'x'; [EOL]       charArray0[4] = 'f'; [EOL]       charArray0[5] = 'r'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(5224, charArray0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 5224 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.removePattern("Minimum abbreviation width is 4", "Minimum abbreviation width is 4"); [EOL]        [EOL]       String string1 = StringUtils.removeEnd("Minimum abbreviation width is 4", "9.2a=P+HRf`R's^w+eE"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '<'; [EOL]       charArray0[2] = 'u'; [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width is 4", charArray0); [EOL]        [EOL]       String string2 = StringUtils.abbreviateMiddle("}uKvEH|OB1F+ML", " ", 1749); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       int[] intArray0 = new int[0]; [EOL]       String string3 = StringUtils.join(intArray0, 'Z'); [EOL]       assertTrue(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]        [EOL]       String string4 = StringUtils.rightPad("Minimum abbreviation width is 4", 1749, 'P'); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(6); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.ensureCapacity(6); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]        [EOL]       int int0 = strBuilder2.indexOf((StrMatcher) strMatcher_TrimMatcher0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>((-1)); [EOL]       assertEquals(0, arrayDeque0.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendAll((Iterable<?>) arrayDeque0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]       assertEquals(0, arrayDeque0.size()); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder("v@1?:{"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert((-1), (CharSequence) strBuilder2, (-1), 6); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // dstOffset -1 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       String string1 = locale0.getDisplayVariant(); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertFalse(set0.contains(string0)); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertFalse(set0.contains(string0)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert(1, charArray0, 31, 1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid offset: 31 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststringMatcher()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("U"); [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'U'; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(97); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(0L); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Byte[] byteArray0 = new Byte[1]; [EOL]       byte byte0 = (byte)49; [EOL]       Byte byte1 = new Byte((byte)49); [EOL]       byteArray0[0] = byte1; [EOL]       byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0); [EOL]       assertArrayEquals(new byte[] {(byte)49}, byteArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(); [EOL]       equalsBuilder0.append(true, true); [EOL]       Class<Integer> class0 = Integer.class; [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = "Q@a+w^PT*i"; [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) null, true, (Class<?>) class0, stringArray0); [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       MutablePair<IDKey, IDKey> mutablePair0 = new MutablePair<IDKey, IDKey>(); [EOL]       float[] floatArray0 = new float[4]; [EOL]       floatArray0[1] = (float) (byte)2; [EOL]       EqualsBuilder.reflectionEquals((Object) stringArray0[0], (Object) boolean0, stringArray0); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-3995L), (-3995L)); [EOL]        [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = (float) (byte)2; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray1); [EOL]       assertFalse(equalsBuilder2.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAfterRange()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-929)); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-929)).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, comparator0); [EOL]       boolean boolean0 = range0.isAfterRange((Range<Object>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setContentEnd((String) null); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       long[] longArray0 = new long[2]; [EOL]       longArray0[0] = 511L; [EOL]       longArray0[1] = 708L; [EOL]       long long0 = NumberUtils.min(longArray0); [EOL]       assertEquals(511L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = CharUtils.toString('\u0080'); [EOL]       assertEquals("\u0080", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder4.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(3005, strBuilder0.length()); [EOL]       assertEquals(3005, strBuilder4.length()); [EOL]       assertEquals(3005, strBuilder5.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder6 = new StrBuilder("0rn@[CM"); [EOL]       assertEquals(7, strBuilder6.length()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertEquals(7, strBuilder6.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(3010, strBuilder7.length()); [EOL]       assertEquals(3010, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(3028, strBuilder0.length()); [EOL]       assertEquals(3028, strBuilder8.length()); [EOL]       assertEquals(3028, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(3028, strBuilder0.length()); [EOL]       assertEquals(2829, strBuilder9.length()); [EOL]       assertEquals(3028, strBuilder1.length()); [EOL]       assertEquals(3028, strBuilder2.length()); [EOL]       assertEquals(3028, strBuilder3.length()); [EOL]       assertEquals(2829, strBuilder6.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(""); [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('2'); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("U", strMatcher0, strMatcher1); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       String string0 = StringUtils.join(charArray0, 'F'); [EOL]        [EOL]       String string1 = StringUtils.chomp(""); [EOL]        [EOL]       String string2 = StringUtils.join((byte[]) null, 'E', 13, 0); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(); [EOL]       assertTrue(arrayDeque0.isEmpty()); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       boolean boolean0 = arrayDeque0.add(integer0); [EOL]       assertFalse(arrayDeque0.isEmpty()); [EOL]        [EOL]       Integer integer1 = new Integer(122); [EOL]        [EOL]       boolean boolean1 = arrayDeque0.add(integer1); [EOL]       assertFalse(arrayDeque0.isEmpty()); [EOL]        [EOL]       String string3 = StringUtils.join((Iterable<?>) arrayDeque0, '<'); [EOL]       assertFalse(arrayDeque0.isEmpty()); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("`F fL", (String) null, 2067); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("0<122"); [EOL]        [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = (float) 0; [EOL]       String string4 = StringUtils.join(floatArray0, 'f'); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "0<122", ""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitByWholeSeparator("", "0<122"); [EOL]        [EOL]       String[] stringArray3 = StringUtils.splitPreserveAllTokens("Strings must not be null", "`F fL"); [EOL]        [EOL]       double[] doubleArray0 = new double[8]; [EOL]       doubleArray0[0] = (double) 13; [EOL]       doubleArray0[1] = (double) 0; [EOL]       doubleArray0[2] = (double) 0.0F; [EOL]       doubleArray0[3] = (double) '<'; [EOL]       doubleArray0[4] = (double) 0; [EOL]       doubleArray0[5] = (double) 13; [EOL]       doubleArray0[6] = (double) 'E'; [EOL]       doubleArray0[7] = (double) 0; [EOL]       String string5 = StringUtils.join(doubleArray0, 'L', 0, 0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setArraySeparator((String) null); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseShortClassName(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoByte()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte((byte) (-2)); [EOL]       MutableByte mutableByte1 = new MutableByte(); [EOL]       boolean boolean0 = mutableByte0.equals(mutableByte1); [EOL]       assertEquals((byte) (-2), (byte)mutableByte0.toByte()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setUseFieldNames(false); [EOL]       boolean boolean0 = standardToStringStyle0.isUseFieldNames(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder4.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       String string0 = strBuilder4.leftString(2822); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder4.length()); [EOL]        [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer(); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder1.length()); [EOL]       assertEquals(2822, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher(); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder1.length()); [EOL]       assertEquals(2822, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       int int0 = strBuilder4.indexOf(strMatcher0); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder1.length()); [EOL]       assertEquals(2822, strBuilder2.length()); [EOL]       assertEquals(2822, strBuilder4.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(3005, strBuilder0.length()); [EOL]       assertEquals(3005, strBuilder5.length()); [EOL]       assertEquals(3005, strBuilder4.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 10, 2822); [EOL]       assertEquals(5828, strBuilder0.length()); [EOL]       assertEquals(5828, strBuilder6.length()); [EOL]       assertEquals(5828, strBuilder1.length()); [EOL]        [EOL]       int int1 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertEquals(5828, strBuilder0.length()); [EOL]       assertEquals(5828, strBuilder6.length()); [EOL]       assertEquals(5828, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(5833, strBuilder0.length()); [EOL]       assertEquals(5833, strBuilder7.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(5851, strBuilder0.length()); [EOL]       assertEquals(5851, strBuilder1.length()); [EOL]       assertEquals(5851, strBuilder8.length()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 10, 2822); [EOL]       assertEquals(8673, strBuilder0.length()); [EOL]       assertEquals(8673, strBuilder6.length()); [EOL]       assertEquals(8673, strBuilder1.length()); [EOL]       assertEquals(8673, strBuilder2.length()); [EOL]       assertEquals(8673, strBuilder9.length()); [EOL]       assertEquals(8673, strBuilder3.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(".F_8~jr2_t 5y.4", 0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       char[] charArray0 = new char[5]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "Invalid offset: "); [EOL]       List<String> list0 = strTokenizer0.getTokenList(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[0]; [EOL]       int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 628, (-1)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V"); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]       assertEquals(20, strBuilder1.size()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf("x,OEdUuh6_<", 0); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]        [EOL]       Locale.Category locale_Category0 = Locale.Category.DISPLAY; [EOL]       Locale.Category locale_Category1 = Locale.Category.FORMAT; [EOL]       EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1); [EOL]       assertEquals(2, enumSet0.size()); [EOL]        [EOL]       Iterator<Locale.Category> iterator0 = enumSet0.iterator(); [EOL]       assertEquals(2, enumSet0.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<"); [EOL]       assertEquals(119, strBuilder0.size()); [EOL]       assertEquals(119, strBuilder1.size()); [EOL]       assertEquals(2, enumSet0.size()); [EOL]       assertEquals(119, strBuilder2.size()); [EOL]        [EOL]       String string0 = ""; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-1), ""); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-74), (-74)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (-74), (float) (-74)); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short)406, (short)406); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short[]) null, (short[]) null); [EOL]       Object object0 = new Object(); [EOL]       boolean boolean0 = EqualsBuilder.isRegistered(equalsBuilder4, object0); [EOL]       assertTrue(equalsBuilder4.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[1] = (-1); [EOL]       boolean boolean0 = ArrayUtils.contains(intArray0, (-1)); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       String string0 = DateFormatUtils.format((Calendar) mockGregorianCalendar0, "2"); [EOL]       assertEquals("2", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Byte[] byteArray0 = new Byte[1]; [EOL]       Byte byte0 = new Byte((byte)0); [EOL]       byteArray0[0] = byte0; [EOL]       byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0); [EOL]       assertEquals(1, byteArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       Class<Integer> class0 = Integer.class; [EOL]       EqualsBuilder.reflectionEquals(object0, object1, true, class0, (String[]) null); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'd'; [EOL]       charArray0[1] = 'j'; [EOL]       charArray0[2] = '/'; [EOL]       charArray0[3] = 'Y'; [EOL]       charArray0[4] = 'I'; [EOL]       charArray0[5] = 'L'; [EOL]       charArray0[6] = 'f'; [EOL]       charArray0[7] = 'g'; [EOL]       char[] charArray1 = new char[0]; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray1); [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = (int) 'd'; [EOL]       intArray0[1] = (int) 'Y'; [EOL]       intArray0[2] = (int) 'I'; [EOL]       intArray0[3] = (int) 'Y'; [EOL]       intArray0[4] = (int) 'Y'; [EOL]       intArray0[5] = (int) 'L'; [EOL]       intArray0[6] = (int) 'Y'; [EOL]       intArray0[7] = (int) 'Y'; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(intArray0, intArray0); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(object2, (Object) equalsBuilder0); [EOL]       assertSame(equalsBuilder1, equalsBuilder3); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder((String) null); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'i'; [EOL]       charArray0[1] = '~'; [EOL]       charArray0[2] = 'i'; [EOL]       charArray0[3] = 'i'; [EOL]       charArray0[4] = 'i'; [EOL]       charArray0[5] = 'i'; [EOL]       charArray0[6] = 'i'; [EOL]       charArray0[7] = 'i'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteAll((StrMatcher) strMatcher_CharSetMatcher0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, 0, 'i'); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((double) 0); [EOL]       assertEquals(4, strBuilder1.size()); [EOL]       assertEquals(4, strBuilder4.size()); [EOL]        [EOL]       int int0 = strBuilder4.lastIndexOf('l', 103); [EOL]       assertEquals(4, strBuilder1.size()); [EOL]       assertEquals(4, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.appendAll((Iterable<?>) null); [EOL]       assertEquals(0, strBuilder5.size()); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendSeparator((String) null); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder6.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       Float float0 = new Float(0.0F); [EOL]       mutableInt0.setValue((Number) float0); [EOL]       assertEquals(0, mutableInt0.intValue()); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("nFgu8hR=<", strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       double[] doubleArray0 = new double[2]; [EOL]       doubleArray0[0] = 0.0; [EOL]       doubleArray0[1] = 0.0; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray0); [EOL]       Object object0 = new Object(); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((Object) equalsBuilder0, object0); [EOL]       float[] floatArray0 = new float[0]; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(floatArray0, floatArray0); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte) (-1), (byte) (-81)); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(floatArray0, floatArray0); [EOL]       assertSame(equalsBuilder5, equalsBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.minimizeCapacity(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append('U'); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]       assertEquals(1, strBuilder1.length()); [EOL]       assertEquals(1, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer(); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.setTrimmerMatcher(strMatcher_NoMatcher0); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]        [EOL]       String string0 = strBuilder0.leftString(2026); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendFixedWidthPadRight((Object) strBuilder_StrBuilderTokenizer1, 2026, '('); [EOL]       assertEquals(2027, strBuilder0.length()); [EOL]       assertEquals(2027, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]       assertEquals(2027, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.insert(2026, 0.0F); [EOL]       assertEquals(2030, strBuilder0.length()); [EOL]       assertEquals(2030, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]       assertEquals(2030, strBuilder4.length()); [EOL]       assertEquals(2030, strBuilder5.length()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.append(0L); [EOL]       assertEquals(2031, strBuilder0.length()); [EOL]       assertEquals(2031, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]       assertEquals(2031, strBuilder4.length()); [EOL]       assertEquals(2031, strBuilder6.length()); [EOL]        [EOL]       String string1 = strBuilder_StrBuilderTokenizer0.previousToken(); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.setCharAt(97, '+'); [EOL]       assertEquals(2031, strBuilder0.length()); [EOL]       assertEquals(2031, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]       assertEquals(2031, strBuilder4.length()); [EOL]       assertEquals(2031, strBuilder6.length()); [EOL]       assertEquals(2031, strBuilder7.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(2031, strBuilder0.length()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertEquals(2031, strBuilder0.length()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious(); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) "java.vendor.url"; [EOL]       objectArray0[1] = (Object) "U"; [EOL]       objectArray0[2] = (Object) strBuilder2; [EOL]       objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[4] = (Object) "U"; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer3 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]        [EOL]       objectArray0[5] = (Object) strBuilder_StrBuilderTokenizer3; [EOL]       objectArray0[6] = (Object) strBuilder_StrBuilderTokenizer0; [EOL]       StrBuilder strBuilder8 = strBuilder2.appendln("java.vendor.url", objectArray0); [EOL]       assertEquals(2047, strBuilder0.length()); [EOL]       assertEquals(2047, strBuilder1.length()); [EOL]       assertEquals(2047, strBuilder2.length()); [EOL]       assertEquals(2047, strBuilder8.length()); [EOL]       assertEquals(7, objectArray0.length); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(" -~*ui'"); [EOL]       assertEquals(7, stringBuffer0.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder8.appendln(stringBuffer0, (-1229), 2026); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.daemon(true); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Boolean boolean0 = basicThreadFactory0.getDaemonFlag(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]       assertFalse(strMatcher1.equals((Object)strMatcher0)); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf((String) null, 3954); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.trim(); [EOL]       assertFalse(strMatcher0.equals((Object)strMatcher1)); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder5 = strBuilder2.appendln((String) null, 0, 2255); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.appendPadding(6, '2'); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.insert(137, (Object) strBuilder4); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 137 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[7]; [EOL]       int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-1)); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string0 = StringUtils.appendIfMissing("", "", charSequenceArray0); [EOL]       assertEquals(7, charSequenceArray0.length); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '4'; [EOL]       boolean boolean0 = StringUtils.containsAny(charSequenceArray0[2], charArray0); [EOL]       assertEquals(7, charSequenceArray0.length); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.swapCase("YZ,E4uACQ"); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "YZ,E4uACQ", charSequenceArray0[5], 3973); [EOL]       assertEquals(7, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPriority()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.priority(0); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertEquals(0, (int)integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTSVInstance()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/."); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer0.forEachRemaining(consumer0); [EOL]       strTokenizer0.toString(); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetMiddle()  throws Throwable  { [EOL]       Integer integer0 = new Integer(1); [EOL]       MutableTriple<Object, String, Object> mutableTriple0 = new MutableTriple<Object, String, Object>(integer0, "6@w7}8Hh/tF{\"6_z4:", (Object) null); [EOL]       String string0 = mutableTriple0.getMiddle(); [EOL]       assertEquals("6@w7}8Hh/tF{\"6_z4:", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       strTokenizer0.next(); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) null; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) null; [EOL]       objectArray0[5] = (Object) null; [EOL]       objectArray0[6] = (Object) strBuilder0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln((String) null, objectArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]       assertEquals(7, strBuilder1.capacity()); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]       assertEquals(7, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]       assertEquals(7, strBuilder1.capacity()); [EOL]       assertEquals(7, strBuilder3.capacity()); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.clear(); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]       assertEquals(7, strBuilder4.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       String string0 = ")[C$#_(U9,]+>eub7]}"; [EOL]       StrBuilder strBuilder5 = strBuilder0.appendln(false); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]       assertEquals(7, strBuilder5.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.replaceAll(strMatcher0, ")[C$#_(U9,]+>eub7]}"); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]       assertEquals(7, strBuilder4.capacity()); [EOL]       assertEquals(7, strBuilder6.capacity()); [EOL]        [EOL]       char char0 = 'c'; [EOL]       int int3 = strBuilder0.lastIndexOf('c', 7); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder2.appendSeparator("Solaris"); [EOL]       assertEquals(26, strBuilder0.capacity()); [EOL]       assertEquals(26, strBuilder2.capacity()); [EOL]       assertEquals(26, strBuilder7.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter(); [EOL]       assertEquals(26, strBuilder0.capacity()); [EOL]       assertEquals(26, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendFixedWidthPadRight((Object) "java.vm.specification.version", 81, '0'); [EOL]       assertEquals(188, strBuilder8.capacity()); [EOL]       assertEquals(188, strBuilder0.capacity()); [EOL]       assertEquals(188, strBuilder4.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.trim(""); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0); [EOL]       assertEquals(0, charArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNumericSpace(""); [EOL]        [EOL]       String string1 = StringUtils.chop(""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1.3F); [EOL]       assertNull(floatArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("0"); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[8]; [EOL]       longArray0[0] = (long) 'w'; [EOL]       int int0 = ArrayUtils.indexOf(longArray0, 119L); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'E'; [EOL]       charArray0[1] = '$'; [EOL]       charArray0[2] = 'R'; [EOL]       charArray0[3] = ';'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(charArray0, (-758), (-758)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: -758 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       Locale locale0 = Locale.ROOT; [EOL]       String string0 = DateFormatUtils.format((Calendar) mockGregorianCalendar0, "F", locale0); [EOL]       assertEquals("2", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("pKzJ'CmBAFa}&8mMy"); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(955, 955).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "8BSsazZjZ<nSFi28~ ", (Object) range0, comparator0); [EOL]       boolean boolean0 = range1.isEndedBy("pKzJ'CmBAFa}&8mMy"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       int[] intArray0 = new int[9]; [EOL]       compareToBuilder0.append((int[]) null, intArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetQuoteChar()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/."); [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("/Q&ZbFv0Je_(b+/."); [EOL]       strTokenizer0.setDelimiterMatcher(strMatcher0); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer0.forEachRemaining(consumer0); [EOL]       strTokenizer0.setQuoteChar('e'); [EOL]       assertEquals(1, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       int int0 = NumberUtils.min(5226, 5226, 5226); [EOL]       assertEquals(5226, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = CharSequenceUtils.lastIndexOf("", 1834, 2479); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendStart(stringBuffer0, (Object) null); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       int int0 = (-334); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-334)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-334), 117, 'P'); [EOL]        [EOL]       int int1 = strBuilder0.indexOf('P'); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(117); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert((-334), false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -334 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("F"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst('e'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, "F"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll('#'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(598L); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.reverse(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       charArray0[2] = 'K'; [EOL]       charArray0[3] = 'e'; [EOL]       int int0 = strBuilder2.indexOf((StrMatcher) null); [EOL]        [EOL]       charArray0[4] = 'e'; [EOL]       charArray0[5] = 'e'; [EOL]       charArray0[6] = 'e'; [EOL]       charArray0[7] = 'e'; [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int2 = 1354; [EOL]       strBuilder_StrBuilderReader0.mark(1354); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderTokenizer0.previous(); [EOL]         fail("Expecting exception: NoSuchElementException"); [EOL]        [EOL]       } catch(NoSuchElementException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrTokenizer", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'I'; [EOL]       charArray0[1] = 'e'; [EOL]       charArray0[2] = 'M'; [EOL]       charArray0[3] = 'I'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_CharSetMatcher0, (String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testatLeast()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.JAVA_1_3; [EOL]       boolean boolean0 = javaVersion0.atLeast(javaVersion0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("Elements in a range must not be null: element1="); [EOL]       boolean boolean0 = range0.isEndedBy(""); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.clear(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]       assertTrue(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteAll('#'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder3.isEmpty()); [EOL]       assertTrue(strBuilder4.isEmpty()); [EOL]       assertTrue(strBuilder6.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder7.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder8.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((StrBuilder) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-1193)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((-1573)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(114); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       Class<Object> class0 = Object.class; [EOL]       ClassLoader classLoader0 = ClassLoader.getSystemClassLoader(); [EOL]        [EOL]       ClassLoader classLoader1 = classLoader0.getParent(); [EOL]        [EOL]       ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader1); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) serviceLoader0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(4); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder2); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       byte byte0 = ObjectUtils.CONST_BYTE((-128)); [EOL]       assertEquals((byte) (-128), byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       String string0 = WordUtils.capitalize("", charArray0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, (ToStringStyle) null, stringBuffer0); [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append(objectArray0); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object object0 = new Object(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) "!Z;sl 2pEf u", object0, (Comparator<?>) comparator0); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.capitalize("Supplied value must be a valid byte literal between -32768 and 32767: ["); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", 392); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("The Array must not be null", "Supplied value must be a valid byte literal between -32768 and 32767: ["); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '|'; [EOL]       charArray0[1] = '/'; [EOL]       charArray0[2] = ','; [EOL]       charArray0[3] = 'B'; [EOL]       charArray0[4] = 'b'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", charArray0); [EOL]        [EOL]       String string1 = StringUtils.abbreviate("\r", 392, 392); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.replaceChars("R\"?33Lrbm5Y?s", "Minimum abbreviation width with offset is 7", "Supplied value must be a valid byte literal between -32768 and 32767: ["); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: ["); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens("R\"?33Llvl5Y? "); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       String string3 = StringUtils.strip((String) null, "_iVq9-<w--D+?HoA~d"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       Integer integer0 = new Integer(905); [EOL]       Integer integer1 = Integer.valueOf(2033); [EOL]       Integer integer2 = BooleanUtils.toIntegerObject(false, integer0, integer1); [EOL]       assertEquals(2033, (int)integer2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       char[] charArray0 = new char[6]; [EOL]       char[] charArray1 = new char[6]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray1); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]       standardToStringStyle0.appendDetail(stringBuffer0, "r#1|H@M0", stringBuffer0); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertTrue(charBuffer1.equals((Object)charBuffer0)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testxor()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[1] = true; [EOL]       boolean boolean0 = BooleanUtils.xor(booleanArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRawType()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Class<?> class1 = TypeUtils.getRawType(class0, class0); [EOL]       Class<String> class2 = String.class; [EOL]       Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class1, (Class<?>) class2); [EOL]       assertNull(map0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeEndText(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(2374, 0, 2374); [EOL]       float float0 = fraction0.floatValue(); [EOL]       assertEquals(2374, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText("Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.replaceFirst("Invalid startIndex: ", "t~;\"vYIT!5}%CW)%"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       int int0 = 537; [EOL]       StrBuilder strBuilder3 = new StrBuilder("Invalid startIndex: "); [EOL]       assertEquals(52, strBuilder3.capacity()); [EOL]        [EOL]       int int1 = 9; [EOL]       StrBuilder strBuilder4 = strBuilder2.appendFixedWidthPadRight((Object) strBuilder1, 9, '*'); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.insert(117, (long) 537); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 117 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.append(stringBuffer0, "org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle", (char[]) null, boolean0); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-1564), (-241)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.between("j(P0Sj", "", comparator0); [EOL]       boolean boolean0 = range0.contains("j(P0Sj"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[3]; [EOL]       Boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 2); [EOL]       assertEquals(2, booleanArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmultiplyBy()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(0.0); [EOL]       Fraction fraction1 = fraction0.ZERO.multiplyBy(fraction0); [EOL]       assertSame(fraction1, fraction0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1.0)); [EOL]       Fraction fraction1 = fraction0.pow((-1)); [EOL]       assertEquals((-1.0), fraction0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendln((-1270.0144F)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       String string1 = strBuilder3.leftString(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.trim(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = new StrBuilder(); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendln((Object) strBuilder7); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder9 = strBuilder5.append(6); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder9.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder"); [EOL]       assertEquals(40, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('2'); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]       assertEquals(41, strBuilder1.length()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]       assertEquals(41, strBuilder1.length()); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]       assertEquals(41, strBuilder2.length()); [EOL]        [EOL]       strBuilder0.hashCode(); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]        [EOL]       int int1 = strBuilder0.lastIndexOf('', 0); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       byte[] byteArray0 = new byte[2]; [EOL]       byteArray0[0] = (byte)0; [EOL]       byteArray0[1] = (byte) (-105); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, (byte[]) null); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0, 4134); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short) (byte) (-105), (short) (-1)); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte)0, (byte)0); [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) (short) (-1); [EOL]       floatArray0[1] = (float) 0; [EOL]       floatArray0[2] = 0.0F; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(floatArray0, floatArray0); [EOL]       assertFalse(equalsBuilder0.isEquals()); [EOL]        [EOL]       short[] shortArray0 = new short[1]; [EOL]       equalsBuilder4.reset(); [EOL]       shortArray0[0] = (short) (byte)0; [EOL]       equalsBuilder0.append(shortArray0, shortArray0); [EOL]       equalsBuilder5.append((Object) "", (Object) ""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTypeArguments()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Class<?> class1 = TypeUtils.getRawType(class0, class0); [EOL]       Class<String> class2 = String.class; [EOL]       Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class1, (Class<?>) class2); [EOL]       assertNull(map0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String[] stringArray0 = new String[7]; [EOL]       String string0 = ReflectionToStringBuilder.toStringExclude((Object) "<null>", stringArray0); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.normalizeSpace(" "); [EOL]        [EOL]       String string1 = StringUtils.abbreviate("The Array must not be null", 10); [EOL]        [EOL]       String string2 = StringUtils.repeat('', 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ""); [EOL]       assertEquals(0, stringArray0.length); [EOL]        [EOL]       String string3 = "\\u00"; [EOL]       String string4 = StringUtils.lowerCase(string3); [EOL]        [EOL]       String string5 = StringUtils.overlay("dyfY", "t", (-437), (-452)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Integer integer0 = new Integer(3); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((String) null, (String) null, (String) null).when(comparator0).toString(); [EOL]       doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.is((Object) integer0, comparator0); [EOL]       Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator1).compare(anyString() , anyString()); [EOL]       Range<String> range1 = Range.between("$VALUES", "$VALUES", comparator1); [EOL]       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0, 0).when(comparator2).compare(any() , any()); [EOL]       Range<Object> range2 = Range.between((Object) range0, (Object) range1, comparator2); [EOL]       Range<Object> range3 = range0.intersectionWith(range2); [EOL]       Range<Integer> range4 = Range.is(integer0); [EOL]       boolean boolean0 = range3.equals(range4); [EOL]       assertFalse(range3.equals((Object)range2)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPattern()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("<#"); [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("<#", timeZone0, locale0); [EOL]       String string0 = fastDateParser0.getPattern(); [EOL]       assertEquals("<#", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-1230L)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       int int0 = 108; [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'C'; [EOL]       charArray0[1] = '<'; [EOL]       charArray0[2] = '%'; [EOL]       charArray0[3] = 'A'; [EOL]       charArray0[4] = '>'; [EOL]       charArray0[5] = '<'; [EOL]       charArray0[6] = ']'; [EOL]       charArray0[7] = '%'; [EOL]       charArray0[8] = 'b'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert(108, charArray0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 108 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Boolean boolean0 = new Boolean("ph'3ls("); [EOL]       standardToStringStyle0.DEFAULT_STYLE.append(stringBuffer0, "@@@43'A1VpWX3", (float[]) null, boolean0); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToInt()  throws Throwable  { [EOL]       int int0 = Conversion.hexDigitMsb0ToInt('d'); [EOL]       assertEquals(11, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null); [EOL]       assertNull(booleanArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       HashMap<String, StrLookup.MapStrLookup<String>> hashMap0 = new HashMap<String, StrLookup.MapStrLookup<String>>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, StrLookup.MapStrLookup<String>>) hashMap0, "", "", 'A'); [EOL]       strSubstitutor0.replace((StringBuffer) null); [EOL]       assertEquals('A', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpriority()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.priority(0); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertEquals(0, (int)integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       System.setCurrentTimeMillis(3391L); [EOL]       long long0 = stopWatch0.getNanoTime(); [EOL]       assertEquals((-1392409277929000L), long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       boolean boolean0 = charRange0.contains('n'); [EOL]       assertEquals('%', charRange0.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testceiling()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-113), 1, 2, (-451), 3725); [EOL]       Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1); [EOL]       calendar0.setLenient(false); [EOL]       DateUtils.ceiling(calendar0, 0); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=8,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Integer integer0 = new Integer(21); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(integer0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.mid("on%35hx1", 775, 7); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "on%35hx1", 775); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       String string1 = StringUtils.abbreviateMiddle("", "3", 2863); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) "on%35hx1"; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "on%35hx1"; [EOL]       String string2 = StringUtils.join((Iterator<?>) null, '}'); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) null; [EOL]       boolean boolean1 = StringUtils.startsWithAny("on%35hx1", charSequenceArray0); [EOL]       assertEquals(7, charSequenceArray0.length); [EOL]        [EOL]       String string3 = StringUtils.join((Iterator<?>) null, '$'); [EOL]        [EOL]       String string4 = StringUtils.repeat("3", 12); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '}'; [EOL]       charArray0[1] = 'J'; [EOL]       charArray0[2] = '}'; [EOL]       charArray0[3] = '}'; [EOL]       charArray0[4] = '}'; [EOL]       int int0 = StringUtils.indexOfAny(charSequenceArray0[6], charArray0); [EOL]       assertEquals(7, charSequenceArray0.length); [EOL]       assertEquals(5, charArray0.length); [EOL]        [EOL]       String string5 = StringUtils.chomp("333333333333"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumericSpace("333333333333"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0, 0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("", comparator0); [EOL]       Range<String> range1 = Range.is("Elements in a range must not be null: element1="); [EOL]       boolean boolean0 = range0.isOverlappedBy(range1); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       short[] shortArray0 = new short[7]; [EOL]       short[] shortArray1 = ArrayUtils.add(shortArray0, (short)103); [EOL]       assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)103}, shortArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testextractCause()  throws Throwable  { [EOL]       ExecutionException executionException0 = new ExecutionException("F*e#u^=aqWbGI{fiz", (Throwable) null); [EOL]       ConcurrentUtils.extractCauseUnchecked(executionException0); [EOL]       ExecutionException executionException1 = new ExecutionException((Throwable) null); [EOL]       ConcurrentException concurrentException0 = ConcurrentUtils.extractCause(executionException1); [EOL]       assertNull(concurrentException0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("%.uP-XC6m9"); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(strBuilder0); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]       assertEquals(10, stringBuffer0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0); [EOL]       assertEquals(21, strBuilder0.length()); [EOL]       assertEquals(10, stringBuffer0.length()); [EOL]       assertEquals(21, strBuilder1.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       char char0 = ObjectUtils.CONST(']'); [EOL]       assertEquals(']', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertEquals("<", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-1230L)); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]       assertEquals(5, strBuilder1.size()); [EOL]        [EOL]       int int0 = 108; [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'C'; [EOL]       charArray0[1] = '<'; [EOL]       charArray0[2] = '%'; [EOL]       charArray0[3] = 'A'; [EOL]       charArray0[4] = '>'; [EOL]       charArray0[5] = '<'; [EOL]       charArray0[6] = ']'; [EOL]       charArray0[7] = '%'; [EOL]       charArray0[8] = 'b'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert(108, charArray0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 108 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testparseObject()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       Object object0 = fastDateFormat0.parseObject("1/1/70 12:00 AM", parsePosition0); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 5); [EOL]       Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0); [EOL]       assertNull(comparable0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreformat()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = 276.59881; [EOL]       String[] stringArray0 = new String[4]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = "^2b *9$Dg"; [EOL]       ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0); [EOL]       CompositeFormat compositeFormat0 = new CompositeFormat(choiceFormat0, choiceFormat0); [EOL]       String string0 = compositeFormat0.reformat("^2b *9$Dg"); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(0L); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendInternal(stringBuffer0, "]J;-oeCxj.", long0, false); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.setValue(525L); [EOL]       float float0 = mutableLong0.floatValue(); [EOL]       assertEquals(525.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("\"Li"); [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('F'); [EOL]       assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBefore("", "s/eB&ED@mIB"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "s/eB&ED@mIB", 0); [EOL]       assertEquals(0, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.rightPad("", 0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('6'); [EOL]       assertEquals(4, booleanArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       Byte[] byteArray0 = new Byte[1]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.priority(594); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertEquals(594, (int)integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.replaceChars("s\"", "s\"", "s\""); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'R'; [EOL]       charArray0[1] = '{'; [EOL]       charArray0[2] = 'A'; [EOL]       charArray0[3] = 'D'; [EOL]       charArray0[4] = ']'; [EOL]       charArray0[5] = 'c'; [EOL]       charArray0[6] = '6'; [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "s\"", charArray0); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNotEmpty("s\""); [EOL]        [EOL]       String string1 = StringUtils.normalizeSpace("\r"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       int int0 = StringUtils.countMatches("", "\r"); [EOL]        [EOL]       String string2 = StringUtils.join(charArray0, 'D'); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.mid("", 0, 13); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("", 'A'); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(1719.82282); [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       assertEquals((-1719.8229F), fraction1.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoStringExclude()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       Class<String> class0 = String.class; [EOL]       String string0 = ReflectionToStringBuilder.toString((String) null, toStringStyle0, true, true, (Class<? super String>) class0); [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       String string1 = ReflectionToStringBuilder.toStringExclude((Object) string0, (Collection<String>) linkedList0); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("Sn", ""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "Sn"; [EOL]       String string1 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = 'Z'; [EOL]       charArray0[1] = ''; [EOL]       charArray0[2] = '-'; [EOL]       charArray0[3] = 'v'; [EOL]       charArray0[4] = 'F'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("java.library.path"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('h'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendPadding(5, 'd'); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('d'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append((CharSequence) strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln('h'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendFixedWidthPadRight((Object) strBuilder2, (-1089), 'd'); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = 'd'; [EOL]       charArray0[1] = '%'; [EOL]       IntStream intStream0 = strBuilder2.chars(); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]       assertTrue(reader0.markSupported()); [EOL]        [EOL]       charArray0[2] = 'd'; [EOL]       charArray0[3] = 'h'; [EOL]       charArray0[4] = 'd'; [EOL]       char[] charArray1 = strBuilder3.getChars(charArray0); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder2.replace(strMatcher0, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", 5, 5, 5); [EOL]        [EOL]       IntStream intStream1 = strBuilder6.chars(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.insert(18, (-1835.44)); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder2.setLength(18); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder7.appendWithSeparators((Iterator<?>) null, "java.library.path"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]       assertFalse(strMatcher1.equals((Object)strMatcher0)); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.trim(); [EOL]       assertFalse(strMatcher0.equals((Object)strMatcher1)); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder6 = strBuilder4.append(6); [EOL]       assertFalse(strMatcher0.equals((Object)strMatcher1)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       Integer integer0 = hashCodeBuilder0.build(); [EOL]       assertEquals(17, (int)integer0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(true, true); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(641); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, (-1032)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       int int0 = 0; [EOL]       int int1 = strBuilder0.validateRange(0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(1, ""); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRight()  throws Throwable  { [EOL]       MutablePair<ImmutablePair<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> mutablePair0 = new MutablePair<ImmutablePair<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>(); [EOL]       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = mutablePair0.getRight(); [EOL]       assertNull(abstractMap_SimpleImmutableEntry0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Character[] characterArray0 = new Character[4]; [EOL]       char char0 = '\\'; [EOL]       char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0); [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, '\\', 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true, 17); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       Object[] objectArray1 = new Object[3]; [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       compareToBuilder0.append(objectArray0, objectArray1, comparator0); [EOL]       int int0 = compareToBuilder0.toComparison(); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.EMPTY; [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0); [EOL]       assertEquals(1, charSequenceArray0.length); [EOL]        [EOL]       int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) ""); [EOL]       assertEquals(1, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.capitalize(""); [EOL]        [EOL]       String string2 = StringUtils.remove("", '8'); [EOL]        [EOL]       String string3 = StringUtils.removeEndIgnoreCase("", ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotBlank(""); [EOL]        [EOL]       String string4 = StringUtils.substring("kF#m1", 0); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "kF#m1"); [EOL]        [EOL]       String string5 = "Aborting to protect against StackOverflowError - output of one loop is the input of another"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.removePattern((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another"); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbyteToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       boolean[] booleanArray1 = Conversion.byteToBinary((byte)47, (byte)47, booleanArray0, 102, 0); [EOL]       assertSame(booleanArray1, booleanArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetQuoteMatcher()  throws Throwable  { [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("BW ]-a", strMatcher_NoMatcher0); [EOL]       strTokenizer0.nextToken(); [EOL]       strTokenizer0.setQuoteMatcher(strMatcher_NoMatcher0); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(256); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, ""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln("HDK1o:4z@EGXArn*_"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder3, (-2074), (-2074)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       Character[] characterArray0 = ArrayUtils.toObject((char[]) null); [EOL]       assertNull(characterArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmatchesPattern()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Validate.matchesPattern((CharSequence) "'}Uk]v}\"Gil;qF:d}", "'}Uk]v}\"Gil;qF:d}"); [EOL]        //  fail("Expecting exception: IllegalArgumentException"); [EOL]        // Unstable assertion [EOL]       } catch(IllegalArgumentException e) { [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = 107; [EOL]       StrBuilder strBuilder0 = new StrBuilder(107); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       char char0 = 'w'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('w'); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(""); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int2 = strBuilder0.indexOf(strMatcher0, (-2284)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(289); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.deleteCharAt(1027); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1027 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = (-2195); [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-2195)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-2195)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.deleteCharAt((-2195)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -2195 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.EMPTY; [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-3426)); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("-&nd]JTIu9of_kp'Hb;", "Threshold must not be negative"); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWith("Threshold must not be negative", ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase("-&nd]JTIu9of_kp'Hb;", ""); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '2'; [EOL]       charArray0[1] = ''; [EOL]       boolean boolean2 = StringUtils.containsAny((CharSequence) "Threshold must not be negative", charArray0); [EOL]        [EOL]       boolean boolean3 = StringUtils.isNotBlank("Threshold must not be negative"); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsWhitespace(""); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "E"); [EOL]        [EOL]       boolean boolean5 = StringUtils.containsWhitespace((CharSequence) null); [EOL]        [EOL]       double[] doubleArray0 = new double[5]; [EOL]       doubleArray0[0] = (double) (-1); [EOL]       doubleArray0[1] = (double) '2'; [EOL]       doubleArray0[2] = (double) 0; [EOL]       byte[] byteArray0 = new byte[8]; [EOL]       byteArray0[0] = (byte) (-126); [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte) (-35); [EOL]       byteArray0[3] = (byte)32; [EOL]       byteArray0[4] = (byte)19; [EOL]       byteArray0[5] = (byte)7; [EOL]       byteArray0[6] = (byte)119; [EOL]       byteArray0[7] = (byte) (-115); [EOL]       String string2 = StringUtils.join(byteArray0, 'z', 3360, 0); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]        [EOL]       doubleArray0[3] = (double) '2'; [EOL]       doubleArray0[4] = (double) ''; [EOL]       String string3 = StringUtils.join(doubleArray0, 'P'); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad("", 3214, '\''); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) string0, 4); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split(" in an array of ", "3U", 1366); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.overlay("", " in an array of ", 0, 0); [EOL]        [EOL]       boolean boolean1 = StringUtils.isBlank(" in an array of "); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPackageName()  throws Throwable  { [EOL]       Class<Double> class0 = Double.class; [EOL]       String string0 = ClassUtils.getPackageName(class0); [EOL]       assertEquals("java.lang", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendNull(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder1.toStringBuffer(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = strBuilder1.isEmpty(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 't'; [EOL]       charArray0[1] = 't'; [EOL]       charArray0[2] = '{'; [EOL]       String string4 = StringUtils.join(charArray0, 't'); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("Nt{2P6~Pso'"); [EOL]       assertFalse(stringArray2.equals((Object)stringArray1)); [EOL]        [EOL]       String string5 = StringUtils.substringAfter("Hdl6An@o)]mG1*(G5r", "Hdl6An@o)]mG1*(G5r"); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.getLevenshteinDistance((CharSequence) ":;6z", (CharSequence) null); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Strings must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testuncapitalize()  throws Throwable  { [EOL]       String string0 = WordUtils.uncapitalize(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-811), (-811)); [EOL]       double[] doubleArray0 = new double[3]; [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(doubleArray0); [EOL]       hashCodeBuilder1.append((boolean[]) null); [EOL]       assertEquals((-1693551291), (int)hashCodeBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('B'); [EOL]       CharRange charRange1 = CharRange.is('e'); [EOL]       boolean boolean0 = charRange0.contains(charRange1); [EOL]       assertEquals('e', charRange1.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       int int0 = ObjectUtils.CONST(0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.setSizeEndText("AEhzPmLst|m|:e7J{Z"); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       double double0 = NumberUtils.min(792.0, 792.0, 792.0); [EOL]       assertEquals(792.0, double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       char[] charArray0 = new char[5]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoLong()  throws Throwable  { [EOL]       long long0 = NumberUtils.toLong("0"); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append('L'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int0 = 4284; [EOL]       String string0 = strBuilder1.rightString(4284); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int1 = 32; [EOL]       StringBuilder stringBuilder0 = new StringBuilder("os.name"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert(4284, (float) 4284); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 4284 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.strip(""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 48); [EOL]        [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       byteArray0[0] = (byte) (-3); [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[3] = (byte)89; [EOL]       byteArray0[4] = (byte) (-85); [EOL]       byteArray0[5] = (byte) (-17); [EOL]       byteArray0[6] = (byte)26; [EOL]       byteArray0[7] = (byte)2; [EOL]       byteArray0[8] = (byte) (-3); [EOL]       String string1 = StringUtils.join(byteArray0, 'u', 48, 0); [EOL]       assertEquals(9, byteArray0.length); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ';'); [EOL]       assertEquals(0, stringArray0.length); [EOL]        [EOL]       String string2 = StringUtils.replacePattern("", "}2NKtV<0;W;H!b/jjV", ""); [EOL]        [EOL]       String string3 = StringUtils.chomp(""); [EOL]        [EOL]       Locale locale0 = new Locale("", "Cannot store "); [EOL]        [EOL]       String string4 = StringUtils.lowerCase("", locale0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("5T]_m"); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-689.841F)); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]       assertEquals(37, strBuilder1.capacity()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(0L); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]        [EOL]       long long1 = strBuilder_StrBuilderReader0.skip(310L); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(1.0); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]       assertEquals(37, strBuilder2.capacity()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append(stringBuffer0, (-611), (-713)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator(' ', (-2561)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.stripAll((String[]) null, "TT"); [EOL]        [EOL]       String string0 = StringUtils.substringAfter("TT", "TT"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'E'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0); [EOL]        [EOL]       String string1 = StringUtils.substringBeforeLast("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.repeat("", 116); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens(""); [EOL]        [EOL]       String string3 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]       assertTrue(string3.equals((Object)string0)); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]        [EOL]       String string4 = StringUtils.stripStart("pG$0h;W-R>", "TT"); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string1));W-R>", string4); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("", ",FQU3=\"q$yCb$a\"_=Cm", 122); [EOL]        [EOL]       String[] stringArray3 = StringUtils.substringsBetween("LS", "Cannot store ", "xQD3IhI"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) "pG$0h;W-R>"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "LS", charArray0); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumeric("xQD3IhI"); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) ""); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[4]; [EOL]       String string5 = StringUtils.reverseDelimited("", ']'); [EOL]       assertTrue(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertTrue(string5.equals((Object)string2)); [EOL]       assertTrue(string5.equals((Object)string0)); [EOL]       assertTrue(string5.equals((Object)string1)); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "xQD3IhI"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) "pG$0h;W-R>"; [EOL]       int int2 = StringUtils.lastIndexOfAny("pG$0h;W-R>", charSequenceArray0); [EOL]        [EOL]       int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       boolean boolean4 = StringUtils.isWhitespace("TT"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = 107; [EOL]       StrBuilder strBuilder0 = new StrBuilder(107); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder1.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       char char0 = 'w'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('w'); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(""); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]       assertEquals(0, charArray0.length); [EOL]        [EOL]       int int2 = strBuilder0.indexOf(strMatcher0, (-2284)); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(289); [EOL]       assertEquals(9, strBuilder0.length()); [EOL]       assertEquals(9, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher1); [EOL]       assertEquals(9, strBuilder0.length()); [EOL]       assertEquals(9, strBuilder3.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.deleteCharAt(1027); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1027 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeHtml3()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeHtml3(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[2] = 'C'; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'C'); [EOL]       assertEquals(2, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = strBuilder0.asTokenizer(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char char0 = 'w'; [EOL]       int int0 = strBuilder0.indexOf('w'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       Integer integer0 = new Integer((-1)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) integer0, (-1), 'w'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf("java.specification.vendor", 1579); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder("java.specification.vendor"); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals(strBuilder2); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'w'; [EOL]       charArray0[1] = 'w'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(charArray0, 1579, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       short[] shortArray0 = new short[8]; [EOL]       int[] intArray0 = new int[0]; [EOL]       short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0); [EOL]       assertEquals(8, shortArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testparseDate()  throws Throwable  { [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = ""; [EOL]       Date date0 = DateUtils.parseDateStrictly("", stringArray0); [EOL]       MockDate mockDate0 = new MockDate((-4272), (-4272), (-4272), (-4272), (-4272), (-4272)); [EOL]       boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdecrement()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte((byte)13); [EOL]       Float float0 = new Float((float) (byte)13); [EOL]       mutableByte0.subtract((Number) float0); [EOL]       mutableByte0.decrement(); [EOL]       long long0 = mutableByte0.longValue(); [EOL]       assertEquals((-1L), long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(160, strBuilder0.capacity()); [EOL]       assertEquals(160, strBuilder1.capacity()); [EOL]       assertEquals(160, strBuilder2.capacity()); [EOL]       assertEquals(160, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       String string0 = strBuilder4.leftString(2822); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]        [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer(); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder1.capacity()); [EOL]       assertEquals(5644, strBuilder2.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher(); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder1.capacity()); [EOL]       assertEquals(5644, strBuilder2.capacity()); [EOL]        [EOL]       int int0 = strBuilder4.indexOf(strMatcher0); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder1.capacity()); [EOL]       assertEquals(5644, strBuilder2.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder5.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 10, 2822); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder6.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]        [EOL]       int int1 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder6.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder7.capacity()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]       assertEquals(11654, strBuilder8.capacity()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 10, 2822); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder6.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]       assertEquals(11654, strBuilder2.capacity()); [EOL]       assertEquals(11654, strBuilder9.capacity()); [EOL]       assertEquals(11654, strBuilder3.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrMatcher strMatcher0 = StrMatcher.commaMatcher(); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported"); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('i'); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer1.forEachRemaining(consumer0); [EOL]       strTokenizer0.previousToken(); [EOL]       strTokenizer1.setIgnoreEmptyTokens(true); [EOL]       assertEquals(1, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       System.setCurrentTimeMillis(0L); [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       String string0 = stopWatch0.toSplitString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       String string0 = strBuilder4.leftString(2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       int int0 = strBuilder4.indexOf(strMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 10, 2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       int int1 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder8.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 10, 2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder9.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = "hZ3CNnc|]e"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.minimizeCapacity(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals("//", charBuffer0.toString()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals("", charBuffer0.toString()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append((long) 104); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.ensureCapacity(104); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.getTokenList(); [EOL]        [EOL]       List<String> list1 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]        [EOL]       StrBuilder strBuilder6 = new StrBuilder(); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]        [EOL]       int int2 = 101; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append("/t@?VM", (-775), (-3316)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart(); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('c'); [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, 0); [EOL]       assertEquals('3', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("pKzJ'CmBAFa}&8mMy"); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(955, 955, 955).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "^RBl5F79];!", (Object) range0, comparator0); [EOL]       int int0 = range1.elementCompareTo("pKzJ'CmBAFa}&8mMy"); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRawType()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       Class<Object> class1 = Object.class; [EOL]       ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(class0).when(parameterizedType0).getRawType(); [EOL]       Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class1, parameterizedType0); [EOL]       assertNull(map0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testinvokeExactConstructor()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Object object0 = ConstructorUtils.invokeExactConstructor(class0, (Object[]) null, (Class<?>[]) null); [EOL]       assertNotNull(object0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[18]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals(18, charBuffer0.capacity()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(18, charBuffer0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(50, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertEquals(0, charBuffer1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(50, strBuilder4.capacity()); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(50, strBuilder4.capacity()); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder5.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder6.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(50, strBuilder4.capacity()); [EOL]       assertEquals(50, strBuilder7.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststop()  throws Throwable  { [EOL]       System.setCurrentTimeMillis(0L); [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       String string0 = stopWatch0.toSplitString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append('a', '7'); [EOL]       compareToBuilder1.append(true, true); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       String string0 = StringUtils.join(charArray0, 'F'); [EOL]       assertEquals(0, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.chomp(""); [EOL]        [EOL]       String string2 = StringUtils.join((byte[]) null, 'E', 13, 0); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       boolean boolean0 = arrayDeque0.add(integer0); [EOL]        [EOL]       Integer integer1 = new Integer(122); [EOL]        [EOL]       boolean boolean1 = arrayDeque0.add(integer1); [EOL]        [EOL]       String string3 = StringUtils.join((Iterable<?>) arrayDeque0, '<'); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("`F fL", (String) null, 2067); [EOL]       assertEquals(2, stringArray0.length); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("0<122"); [EOL]       assertEquals(3, stringArray1.length); [EOL]        [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = (float) 0; [EOL]       String string4 = StringUtils.join(floatArray0, 'f'); [EOL]       assertEquals(1, floatArray0.length); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "0<122", ""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitByWholeSeparator("", "0<122"); [EOL]       assertEquals(0, stringArray2.length); [EOL]        [EOL]       String[] stringArray3 = StringUtils.splitPreserveAllTokens("Strings must not be null", "`F fL"); [EOL]       assertEquals(5, stringArray3.length); [EOL]        [EOL]       double[] doubleArray0 = new double[8]; [EOL]       doubleArray0[0] = (double) 13; [EOL]       doubleArray0[1] = (double) 0; [EOL]       doubleArray0[2] = (double) 0.0F; [EOL]       doubleArray0[3] = (double) '<'; [EOL]       doubleArray0[4] = (double) 0; [EOL]       doubleArray0[5] = (double) 13; [EOL]       doubleArray0[6] = (double) 'E'; [EOL]       doubleArray0[7] = (double) 0; [EOL]       String string5 = StringUtils.join(doubleArray0, 'L', 0, 0); [EOL]       assertEquals(8, doubleArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{"); [EOL]       toStringStyle0.appendEnd(stringBuffer0, standardToStringStyle0); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.THREE_QUARTERS; [EOL]       boolean boolean0 = fraction0.equals(fraction0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnotEqual()  throws Throwable  { [EOL]       ImageCapabilities imageCapabilities0 = new ImageCapabilities(false); [EOL]       boolean boolean0 = ObjectUtils.notEqual(imageCapabilities0, imageCapabilities0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '$'; [EOL]       charArray0[1] = 'B'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("Invalid startIndex: "); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf(strMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.deleteCharAt((-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = new long[6]; [EOL]       longArray0[3] = (-1438L); [EOL]       long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1438L)); [EOL]       assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("v"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = 169; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator("v", 169); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'O'; [EOL]       char char0 = '+'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars(554, (-1433), charArray0, 554); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1433 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((float[]) null, (-4405.2466F)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       long[] longArray0 = new long[2]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappendAsObjectToString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.appendAsObjectToString(object0); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(8); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(strBuilder0); [EOL]       assertEquals("", stringBuilder0.toString()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0); [EOL]       assertEquals("", stringBuilder0.toString()); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("", stringBuilder1.toString()); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder1.insert(0, 3482.0); [EOL]       assertEquals("3482.0", stringBuilder0.toString()); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("3482.0", stringBuilder1.toString()); [EOL]       assertEquals("3482.0", stringBuilder2.toString()); [EOL]        [EOL]       StringBuilder stringBuilder3 = stringBuilder2.append(5L); [EOL]       assertEquals("3482.05", stringBuilder0.toString()); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("3482.05", stringBuilder1.toString()); [EOL]       assertEquals("3482.05", stringBuilder2.toString()); [EOL]       assertEquals("3482.05", stringBuilder3.toString()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuilder3); [EOL]       assertEquals("3482.05", stringBuilder0.toString()); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("3482.05", stringBuilder1.toString()); [EOL]       assertEquals("3482.05", stringBuilder2.toString()); [EOL]       assertEquals("3482.05", stringBuilder3.toString()); [EOL]        [EOL]       int int0 = strBuilder0.size(); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setDefaultFullDetail(false); [EOL]       boolean boolean0 = standardToStringStyle0.isDefaultFullDetail(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       int int0 = 79; [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((double) 79); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int1 = (-2267); [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll('o'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       strBuilder3.buffer = null; [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       String string0 = "nCIF=^XRVL:\\t%AH&"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]        [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = 1.0; [EOL]       doubleArray0[1] = (-690.4802009552836); [EOL]       doubleArray0[2] = (-690.4802009552836); [EOL]       doubleArray0[3] = 0.0; [EOL]       double[] doubleArray1 = new double[4]; [EOL]       doubleArray1[0] = 0.0; [EOL]       doubleArray1[1] = 0.0; [EOL]       doubleArray1[2] = (-690.4802009552836); [EOL]       doubleArray1[3] = 1.0; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray1); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-690.4802009552836), (-1445.7440248)); [EOL]       Integer integer0 = new Integer((-4784)); [EOL]       EqualsBuilder.isRegistered(integer0, "]lEx>?>"); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((-18.816923F), (-18.816923F)); [EOL]       equalsBuilder4.append(406, 406); [EOL]       assertFalse(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetImplicitLowerBounds()  throws Throwable  { [EOL]       Type[] typeArray0 = new Type[5]; [EOL]       WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(typeArray0).when(wildcardType0).getLowerBounds(); [EOL]       Type[] typeArray1 = TypeUtils.getImplicitLowerBounds(wildcardType0); [EOL]       assertEquals(5, typeArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcharSetMatcher()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0); [EOL]       assertNotNull(strMatcher0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setArraySeparator((String) null); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionCompare()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Integer integer1 = new Integer(6); [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, (Collection<String>) linkedList0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.insert(0, (Object) integer0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.clear(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder7 = strBuilder5.appendln(false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder6.replaceAll(strMatcher0, ""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]        [EOL]       char char0 = 'W'; [EOL]       int int3 = strBuilder0.lastIndexOf('W', 7); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder5.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[6]; [EOL]       int int0 = ArrayUtils.indexOf(intArray0, 564, (-310)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[0] = object0; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) null; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) strBuilder0; [EOL]       objectArray0[5] = (Object) strBuilder0; [EOL]       objectArray0[6] = (Object) null; [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "length must be valid"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendWithSeparators(objectArray0, (String) null); [EOL]       assertEquals(360, strBuilder0.capacity()); [EOL]       assertEquals(360, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((CharSequence) strBuilder0, 31, 31); [EOL]       assertEquals(360, strBuilder0.capacity()); [EOL]       assertEquals(360, strBuilder2.capacity()); [EOL]       assertEquals(360, strBuilder3.capacity()); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]       assertEquals(360, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(1L); [EOL]       assertEquals(360, strBuilder0.capacity()); [EOL]       assertEquals(360, strBuilder4.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigitMsb0_4bits()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[3] = true; [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0); [EOL]       assertEquals('d', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char char0 = 'j'; [EOL]       Iterable<Object> iterable0 = null; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) null, "b0}RRkoCl[.="); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('j', 815); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char char1 = '8'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendSeparator('j', '8'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       int int1 = 516; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.insert(516, false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 516 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(2729); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(charBuffer0); [EOL]       toStringStyle0.SIMPLE_STYLE.append(stringBuffer0, "java.specification.vendor", '%'); [EOL]       assertEquals(2731, stringBuffer0.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRight()  throws Throwable  { [EOL]       ImmutableTriple<Object, Integer, Object> immutableTriple0 = ImmutableTriple.of((Object) null, (Integer) null, (Object) null); [EOL]       Object object0 = immutableTriple0.getRight(); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.stripStart("XF", "5i;(d$6_s%^;sG2`"); [EOL]        [EOL]       String string1 = StringUtils.defaultString("5i;(d$6_s%^;sG2`");(d$6_s%^;sG2`", string1); [EOL]        [EOL]       long[] longArray0 = new long[7]; [EOL]       longArray0[0] = 1790L; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[2] = 0L; [EOL]       longArray0[3] = 996L; [EOL]       longArray0[4] = (-3436L); [EOL]       longArray0[5] = (-955L); [EOL]       longArray0[6] = (-1154L); [EOL]       String string2 = StringUtils.join(longArray0, 'y', Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]       assertEquals(7, longArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       int int0 = (-4768); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-4768)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       HashSet<StrBuilder> hashSet0 = new HashSet<StrBuilder>(); [EOL]       assertEquals(0, hashSet0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) hashSet0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, hashSet0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = strBuilder1.asTokenizer(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, hashSet0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft(0, 0, '0'); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, hashSet0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       strBuilder0.size = (-2104); [EOL]       assertEquals((-2104), strBuilder0.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'c'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars(1506, (-4768), charArray0, 1506); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -4768 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_THIRD; [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPackageName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageName((Object) null, "{t&,1r\""); [EOL]       assertEquals("{t&,1r\"", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short) (-1)); [EOL]       Short short0 = mutableShort0.toShort(); [EOL]       assertEquals("-1", mutableShort0.toString()); [EOL]        [EOL]       mutableShort0.subtract((Number) short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) null; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) null; [EOL]       objectArray0[5] = (Object) null; [EOL]       objectArray0[6] = (Object) strBuilder0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln((String) null, objectArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between(object0, object0, comparator0); [EOL]       boolean boolean0 = range0.equals((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]       assertEquals(3, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]       assertEquals(3, strBuilder4.length()); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.insert(0, (Object) integer0); [EOL]       assertEquals(31, strBuilder0.length()); [EOL]       assertEquals(31, strBuilder1.length()); [EOL]       assertEquals(31, strBuilder5.length()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.clear(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder6.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder7 = strBuilder5.appendln(false); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]       assertEquals(6, strBuilder1.length()); [EOL]       assertEquals(6, strBuilder5.length()); [EOL]       assertEquals(6, strBuilder7.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder6.replaceAll(strMatcher0, ""); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]       assertEquals(6, strBuilder6.length()); [EOL]       assertEquals(6, strBuilder8.length()); [EOL]        [EOL]       char char0 = 'W'; [EOL]       int int3 = strBuilder0.lastIndexOf('W', 7); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder5.new StrBuilderWriter(); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]       assertEquals(6, strBuilder1.length()); [EOL]       assertEquals(6, strBuilder5.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-143)); [EOL]       Range<Integer> range0 = Range.is(integer0); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0, 0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) range0, (Object) range0, comparator0); [EOL]       int int0 = range1.elementCompareTo(integer0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-1564), (-241)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.between("j(P0Sj", "", comparator0); [EOL]       Range<String> range1 = Range.between("", "", (Comparator<String>) null); [EOL]       boolean boolean0 = range0.isAfterRange(range1); [EOL]       assertFalse(range1.equals((Object)range0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln("rn$e:"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       Vector<String> vector0 = new Vector<String>(); [EOL]       assertTrue(vector0.isEmpty()); [EOL]        [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(vector0); [EOL]       assertTrue(vector0.isEmpty()); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(linkedHashSet0); [EOL]       assertTrue(vector0.isEmpty()); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll((Iterable<?>) treeSet0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertTrue(vector0.isEmpty()); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendSeparator("rn$e:", 1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       Integer[] integerArray0 = new Integer[5]; [EOL]       Integer integer0 = new Integer(1); [EOL]        [EOL]       integerArray0[0] = integer0; [EOL]       Integer integer1 = new Integer(862); [EOL]        [EOL]       integerArray0[1] = integer1; [EOL]       int int0 = 0; [EOL]       Integer integer2 = new Integer(0); [EOL]        [EOL]       integerArray0[2] = integer2; [EOL]       Integer integer3 = new Integer(862); [EOL]        [EOL]       integerArray0[3] = integer3; [EOL]       Integer integer4 = new Integer(int0); [EOL]        [EOL]       integerArray0[4] = integer4; [EOL]       StrBuilder strBuilder4 = strBuilder3.appendAll(integerArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction("-256 16/39"); [EOL]       assertEquals((-256.41025F), fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("OgU68#7UbWI,wzq8", toStringStyle0, stringBuffer0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((long) 0); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendFieldStart(stringBuffer0, ""); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       Locale.Category locale_Category0 = Locale.Category.FORMAT; [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) locale_Category0); [EOL]       assertEquals(72, strBuilder0.capacity()); [EOL]       assertEquals(72, strBuilder1.capacity()); [EOL]        [EOL]       char char0 = '\"'; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendPadding(0, '\"'); [EOL]       assertEquals(72, strBuilder0.capacity()); [EOL]       assertEquals(72, strBuilder2.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = '\"'; [EOL]       charArray0[1] = '\"'; [EOL]       charArray0[2] = '\"'; [EOL]       charArray0[3] = '\"'; [EOL]       charArray0[4] = '\"'; [EOL]       charArray0[5] = '\"'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.append(charArray0, (-2049), 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       CharRange charRange1 = CharRange.isNot('%'); [EOL]       boolean boolean0 = charRange1.equals(charRange0); [EOL]       assertTrue(charRange1.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)0, 0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiNumeric()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiNumeric('7'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       stringBuffer0.setLength(2016); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, 2, 5); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(2); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder2.toStringBuilder(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((-523.88385F)); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.append(5); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.setNullText("/RDU5z0P,\u0001Ay"); [EOL]        [EOL]       String string0 = strBuilder2.build(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder3.append((Object) strBuilder5); [EOL]        [EOL]       Object object0 = new Object(); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.append(object0); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder2.appendNewLine(); [EOL]        [EOL]       StringBuffer stringBuffer1 = strBuilder9.toStringBuffer(); [EOL]       assertFalse(stringBuffer1.equals((Object)stringBuffer0)); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'G'; [EOL]       strBuilder8.buffer = charArray0; [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder5.setNullText(""); [EOL]        [EOL]       int int0 = strBuilder8.length(); [EOL]        [EOL]       int int1 = strBuilder0.indexOf((String) null, (-677)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.appendln((float) 5); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]       assertTrue(strBuilder1.equals((Object)strBuilder0)); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]       assertTrue(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertTrue(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertTrue(strBuilder2.equals((Object)strBuilder1)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendNewLine(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       boolean boolean0 = strBuilder3.equals((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       charArray0[0] = ':'; [EOL]       String string0 = strBuilder0.substring(0, 0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]        [EOL]       charArray0[1] = ')'; [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       int int2 = strBuilder2.indexOf("=.j", 1810); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder1)); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendNull(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder4.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       mutableDouble0.getValue(); [EOL]       assertEquals((-1), mutableDouble0.intValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("F"); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst('e'); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]       assertEquals(1, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, "F"); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll('#'); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder2.length()); [EOL]       assertEquals(2, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(598L); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder4.length()); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.reverse(); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder4.length()); [EOL]       assertEquals(5, strBuilder5.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       charArray0[2] = 'K'; [EOL]       charArray0[3] = 'e'; [EOL]       int int0 = strBuilder2.indexOf((StrMatcher) null); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder2.length()); [EOL]        [EOL]       charArray0[4] = 'e'; [EOL]       charArray0[5] = 'e'; [EOL]       charArray0[6] = 'e'; [EOL]       charArray0[7] = 'e'; [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(8, charArray0.length); [EOL]        [EOL]       int int2 = 1354; [EOL]       strBuilder_StrBuilderReader0.mark(1354); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer(); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder2.length()); [EOL]       assertEquals(5, strBuilder3.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderTokenizer0.previous(); [EOL]         fail("Expecting exception: NoSuchElementException"); [EOL]        [EOL]       } catch(NoSuchElementException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrTokenizer", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(3296, (-3213)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       boolean boolean0 = range0.isAfter("!R3q"); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       int[] intArray0 = new int[5]; [EOL]       intArray0[0] = (int) (short) (-1030); [EOL]       int int0 = NumberUtils.min(intArray0); [EOL]       assertEquals((-1030), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isIn('h', 'h'); [EOL]       boolean boolean0 = charRange0.equals(charRange0); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseFieldNames(); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '$'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1774), charArray0, 2269, 2269); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1774 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       CharRange charRange1 = CharRange.isNot('#'); [EOL]       boolean boolean0 = charRange0.equals(charRange1); [EOL]       assertEquals('#', charRange1.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-466)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       objectArray0[1] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       StrBuilder strBuilder1 = strBuilder0.append("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", objectArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRight()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-2004)); [EOL]       ImmutableTriple<Integer, Integer, String> immutableTriple0 = new ImmutableTriple<Integer, Integer, String>(integer0, integer0, "y_"); [EOL]       String string0 = immutableTriple0.getRight(); [EOL]       assertEquals("y_", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_THIRDS; [EOL]       Fraction fraction1 = Fraction.getFraction((-1304.67)); [EOL]       boolean boolean0 = fraction0.equals(fraction1); [EOL]       assertEquals((-130467), fraction1.getNumerator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigitMsb0_4bits()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       booleanArray0[2] = true; [EOL]       booleanArray0[3] = true; [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0); [EOL]       assertEquals('3', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("off", (String) null, "off", ""); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(")l(BL"); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testregister()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       IDKey iDKey0 = new IDKey("xNm2VMx&()xcv t@{"); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) null, (Object) iDKey0); [EOL]       IDKey iDKey1 = new IDKey((Object) null); [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       EqualsBuilder.reflectionEquals((Object) "I", (Object) iDKey1, (Collection<String>) linkedList0); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[0] = (-1L); [EOL]       longArray0[1] = 0L; [EOL]       longArray0[2] = (-128L); [EOL]       longArray0[3] = 0L; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray0); [EOL]       double[] doubleArray0 = new double[0]; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder1.append(doubleArray0, doubleArray0); [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) (-128L), (-2440.566416299249)); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder2.append(longArray0, longArray0); [EOL]       equalsBuilder1.reset(); [EOL]       EqualsBuilder equalsBuilder7 = equalsBuilder6.append('2', ','); [EOL]       equalsBuilder5.reset(); [EOL]       Object object0 = new Object(); [EOL]       EqualsBuilder.register(equalsBuilder7, object0); [EOL]       equalsBuilder0.append(561.19965F, (float) (-1L)); [EOL]       EqualsBuilder equalsBuilder8 = equalsBuilder1.append((byte) (-88), (byte) (-125)); [EOL]       assertSame(equalsBuilder8, equalsBuilder5); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1728); [EOL]       assertEquals(1728, strBuilder0.capacity()); [EOL]        [EOL]       String string0 = "(?: \\s|[\\s&&[^ ]])\\s*"; [EOL]       StrBuilder strBuilder1 = new StrBuilder(1728); [EOL]       assertEquals(1728, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]       assertEquals(1728, strBuilder0.capacity()); [EOL]       assertEquals(1728, strBuilder1.capacity()); [EOL]       assertEquals(1728, strBuilder2.capacity()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf("(?: s|[s&&[^ ]])s*", 7); [EOL]       assertEquals(1728, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]       assertEquals(1728, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(''); [EOL]       assertEquals(1728, strBuilder0.capacity()); [EOL]       assertEquals(1728, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append(''); [EOL]       assertEquals(1728, strBuilder0.capacity()); [EOL]       assertEquals(1728, strBuilder1.capacity()); [EOL]       assertEquals(1728, strBuilder2.capacity()); [EOL]       assertEquals(1728, strBuilder4.capacity()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.appendSeparator((String) null, "(?: s|[s&&[^ ]])s*"); [EOL]       assertEquals(1728, strBuilder1.capacity()); [EOL]       assertEquals(1728, strBuilder5.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert(1728, ''); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1728 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       assertTrue(equalsBuilder0.build()); [EOL]        [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = true; [EOL]       booleanArray0[3] = true; [EOL]       booleanArray0[4] = false; [EOL]       booleanArray0[5] = false; [EOL]       boolean[] booleanArray1 = new boolean[2]; [EOL]       booleanArray1[0] = false; [EOL]       booleanArray1[1] = true; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(true); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, true); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1865, 1865); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) 1865, (double) 1865); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append((long) 1865, (long) 1865); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('A'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       double[] doubleArray0 = new double[6]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray0); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[0]; [EOL]       Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0); [EOL]       ArrayUtils.reverse((Object[]) floatArray1); [EOL]       assertEquals(0, floatArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setArraySeparator((String) null); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testaddYears()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(362L); [EOL]       Date date0 = DateUtils.addYears(mockDate0, 4); [EOL]       assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(0L); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       String string4 = StringUtils.defaultIfEmpty((String) null, ":;6z"); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertTrue(string4.equals((Object)string1));6z", string4); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertTrue(charBuffer1.equals((Object)charBuffer0)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       String string1 = locale0.getDisplayVariant(); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert(1, charArray0, 31, 1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid offset: 31 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       long[] longArray0 = new long[1]; [EOL]       long[] longArray1 = new long[7]; [EOL]       compareToBuilder0.append(longArray0, longArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object[] objectArray1 = new Object[4]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray1); [EOL]       int[] intArray0 = new int[6]; [EOL]       compareToBuilder1.append(intArray0, intArray0); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       int[] intArray0 = new int[0]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0); [EOL]       assertEquals(1, booleanArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       String string0 = "0rn@[CM"; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.setLength(2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder2; [EOL]       objectArray0[1] = (Object) strBuilder2; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder3 = strBuilder2.appendAll(objectArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("FXDeiw%p~"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char char0 = '\"'; [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '\"'; [EOL]       charArray0[1] = '\"'; [EOL]       charArray0[2] = '\"'; [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       charArray0[3] = '\"'; [EOL]       charArray0[4] = '\"'; [EOL]       StrBuilder strBuilder1 = strBuilder0.append(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[2] = (Object) "FXDeiw%p~"; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[3] = object0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append("FXDeiw%p~", objectArray0); [EOL]         fail("Expecting exception: UnknownFormatConversionException"); [EOL]        [EOL]       } catch(UnknownFormatConversionException e) { [EOL]          // [EOL]          // Conversion = 'p' [EOL]          // [EOL]          verifyException("java.util.Formatter$FormatSpecifier", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNotTrue()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.isNotTrue((Boolean) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V"); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf("x,OEdUuh6_<", 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       Locale.Category locale_Category0 = Locale.Category.DISPLAY; [EOL]       Locale.Category locale_Category1 = Locale.Category.FORMAT; [EOL]       EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1); [EOL]        [EOL]       Iterator<Locale.Category> iterator0 = enumSet0.iterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder3.toStringBuilder(); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendln(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       String string1 = strBuilder0.rightString(5); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder1 = strBuilder0.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[0] = object0; [EOL]       objectArray0[1] = (Object) stringBuilder1; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       objectArray0[2] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       objectArray0[4] = (Object) stringBuffer1; [EOL]       objectArray0[5] = (Object) stringBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       objectArray0[6] = (Object) strBuilder_StrBuilderTokenizer2; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder1.insert((-1), 1L); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPackageCanonicalName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageCanonicalName("["); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableObject<Object> mutableObject0 = new MutableObject<Object>(); [EOL]       Integer integer0 = new Integer((-61)); [EOL]       MutableObject<Integer> mutableObject1 = new MutableObject<Integer>(integer0); [EOL]       mutableObject0.setValue(mutableObject1); [EOL]       MutableObject<MutableObject<Integer>> mutableObject2 = new MutableObject<MutableObject<Integer>>(mutableObject1); [EOL]       boolean boolean0 = mutableObject2.equals(mutableObject0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       IDKey iDKey0 = new IDKey("j<w?_Kh"); [EOL]       Object object0 = new Object(); [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[0] = "j<w?_Kh"; [EOL]       stringArray0[1] = "j<w?_Kh"; [EOL]       stringArray0[2] = "j<w?_Kh"; [EOL]       stringArray0[3] = "j<w?_Kh"; [EOL]       stringArray0[4] = "j<w?_Kh"; [EOL]       EqualsBuilder.reflectionEquals((Object) iDKey0, object0, stringArray0); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       int[] intArray0 = new int[2]; [EOL]       intArray0[0] = (-504); [EOL]       intArray0[1] = 0; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0); [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) (-504); [EOL]       floatArray0[1] = (float) 0; [EOL]       floatArray0[2] = (float) 0; [EOL]       float[] floatArray1 = new float[5]; [EOL]       floatArray1[0] = (float) (-504); [EOL]       floatArray1[1] = (float) (-504); [EOL]       floatArray1[2] = (float) 0; [EOL]       floatArray1[3] = (float) 0; [EOL]       floatArray1[4] = (float) 0; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray1); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((byte)0, (byte)1); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(' ', '8'); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(959, 0); [EOL]       equalsBuilder5.reset(); [EOL]       assertTrue(equalsBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '0'; [EOL]       charArray0[1] = '5'; [EOL]       charArray0[2] = '\"'; [EOL]       charArray0[3] = 'i'; [EOL]       charArray0[4] = 'K'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars(0, 5017, charArray0, 5017); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 5017 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 4); [EOL]       Locale locale0 = Locale.SIMPLIFIED_CHINESE; [EOL]       Calendar calendar0 = MockCalendar.getInstance(locale0); [EOL]       int int0 = DateUtils.truncatedCompareTo((Calendar) mockGregorianCalendar0, calendar0, 0); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(919); [EOL]       assertEquals(919, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("+7zRuHp;`0", 919); [EOL]       assertEquals(919, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       Byte byte0 = mutableByte0.getValue(); [EOL]       assertEquals((byte)0, (byte)byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       int int0 = 517; [EOL]       StrBuilder strBuilder0 = new StrBuilder(517); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       Object object0 = new Object(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append('S'); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(object0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((long) 517); [EOL]       assertEquals(32, strBuilder0.size()); [EOL]       assertEquals(32, strBuilder2.size()); [EOL]       assertEquals(32, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(84, strBuilder0.size()); [EOL]       assertEquals(84, strBuilder2.size()); [EOL]       assertEquals(84, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.replaceFirst("G1", "G1"); [EOL]       assertEquals(84, strBuilder0.size()); [EOL]       assertEquals(84, strBuilder5.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.append((long) 517); [EOL]       assertEquals(87, strBuilder0.size()); [EOL]       assertEquals(87, strBuilder5.size()); [EOL]       assertEquals(87, strBuilder6.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendSeparator("v5a", 517); [EOL]       assertEquals(91, strBuilder0.size()); [EOL]       assertEquals(91, strBuilder7.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('S'); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder7.replaceFirst(strMatcher0, ""); [EOL]       assertEquals(90, strBuilder0.size()); [EOL]       assertEquals(90, strBuilder7.size()); [EOL]       assertEquals(90, strBuilder8.size()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder1.appendln("v5a"); [EOL]       assertEquals(95, strBuilder0.size()); [EOL]       assertEquals(95, strBuilder1.size()); [EOL]       assertEquals(95, strBuilder9.size()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder1.appendFixedWidthPadRight(517, 517, 'o'); [EOL]       assertEquals(612, strBuilder0.size()); [EOL]       assertEquals(612, strBuilder1.size()); [EOL]       assertEquals(612, strBuilder10.size()); [EOL]        [EOL]       int int1 = 2001; [EOL]       boolean boolean0 = true; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder9.append((CharSequence) strBuilder1, 517, 1738); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(""); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder0.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(strBuilder1, 3005, 115); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(101); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder[] strBuilderArray0 = new StrBuilder[7]; [EOL]       strBuilderArray0[0] = strBuilder0; [EOL]       strBuilderArray0[1] = strBuilder0; [EOL]       strBuilderArray0[2] = strBuilder0; [EOL]       strBuilderArray0[3] = strBuilder0; [EOL]       strBuilderArray0[4] = strBuilder0; [EOL]       strBuilderArray0[5] = strBuilder0; [EOL]       strBuilderArray0[6] = strBuilder0; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll(strBuilderArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.setNewLineText(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       int int0 = strBuilder0.capacity(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.close(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       ArrayList<Integer> arrayList0 = new ArrayList<Integer>(955); [EOL]        [EOL]       String string0 = StringUtils.join((Iterable<?>) arrayList0, '5'); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       String string1 = StringUtils.mid("", 955, 3); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       String string2 = StringUtils.upperCase(""); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       String string3 = StringUtils.removeStartIgnoreCase("\r", ""); [EOL]        [EOL]       charSequenceArray0[3] = (CharSequence) "\r"; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[2]); [EOL]       assertEquals("", charBuffer0.toString()); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) charBuffer0; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[0], charSequenceArray0[0]); [EOL]        [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       long[] longArray0 = new long[7]; [EOL]       longArray0[0] = (long) 3; [EOL]       longArray0[1] = 2587L; [EOL]       longArray0[2] = (long) 3; [EOL]       longArray0[3] = (long) 955; [EOL]       longArray0[4] = (long) 955; [EOL]       longArray0[5] = (long) 3; [EOL]       longArray0[6] = (-1L); [EOL]       String string4 = StringUtils.join(longArray0, '5', 8192, (-1515)); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string5 = StringUtils.chomp("\"N;ix%MK");ix%MK", string5); [EOL]        [EOL]       charSequenceArray0[7] = (CharSequence) "\"N;ix%MK"; [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[0] = (float) 8192; [EOL]       floatArray0[1] = (float) 3L; [EOL]       String string6 = StringUtils.join(floatArray0, 'L', 32, 16); [EOL]        [EOL]       charSequenceArray0[8] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetUserHome()  throws Throwable  { [EOL]       EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/sepehr"); [EOL]       FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false); [EOL]       File file0 = SystemUtils.getUserHome(); [EOL]       assertTrue(file0.isDirectory()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-484)); [EOL]       ImmutableTriple<Integer, String, Integer> immutableTriple0 = ImmutableTriple.of(integer0, "", integer0); [EOL]       int int0 = immutableTriple0.compareTo((Triple<Integer, String, Integer>) immutableTriple0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       Float[] floatArray0 = ArrayUtils.toObject((float[]) null); [EOL]       assertNull(floatArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText("Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.replaceFirst("Invalid startIndex: ", "t~;\"vYIT!5d}%CW)%"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       int int0 = 537; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.replace(537, 166, ""); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(102); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(102, 102, '?'); [EOL]       assertEquals(102, strBuilder0.length()); [EOL]       assertEquals(102, strBuilder1.length()); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendAll(iterator0); [EOL]       assertEquals(102, strBuilder0.length()); [EOL]       assertEquals(102, strBuilder1.length()); [EOL]       assertEquals(102, strBuilder2.length()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(102, strBuilder0.length()); [EOL]       assertEquals(102, strBuilder1.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertEquals(102, strBuilder0.length()); [EOL]       assertEquals(102, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>(); [EOL]        [EOL]       boolean boolean0 = treeSet0.retainAll(arrayList0); [EOL]        [EOL]       charArray0[0] = '?'; [EOL]       charArray0[1] = '?'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       int int0 = strBuilder1.indexOf((StrMatcher) strMatcher_CharSetMatcher0); [EOL]       assertEquals(102, strBuilder0.length()); [EOL]       assertEquals(102, strBuilder1.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher((char[]) null); [EOL]        [EOL]       boolean boolean1 = strBuilder2.contains(strMatcher0); [EOL]       assertEquals(102, strBuilder0.length()); [EOL]       assertEquals(102, strBuilder1.length()); [EOL]       assertEquals(102, strBuilder2.length()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(); [EOL]       assertEquals(102, strBuilder0.length()); [EOL]       assertEquals(102, strBuilder1.length()); [EOL]        [EOL]       boolean boolean2 = strBuilder_StrBuilderReader0.markSupported(); [EOL]       assertEquals(102, strBuilder0.length()); [EOL]       assertEquals(102, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadRight((Object) iterator0, 102, '?'); [EOL]       assertEquals(204, strBuilder0.length()); [EOL]       assertEquals(204, strBuilder1.length()); [EOL]       assertEquals(204, strBuilder3.length()); [EOL]       assertEquals(204, strBuilder2.length()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.mark(63); [EOL]       assertEquals(204, strBuilder0.length()); [EOL]       assertEquals(204, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendSeparator("{8UA", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer"); [EOL]       assertEquals(208, strBuilder0.length()); [EOL]       assertEquals(208, strBuilder1.length()); [EOL]       assertEquals(208, strBuilder4.length()); [EOL]       assertEquals(208, strBuilder2.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlphanumeric()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('0'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       char char0 = charRange0.getStart(); [EOL]       assertEquals('6', charRange0.getEnd()); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       int int0 = BooleanUtils.toInteger(false); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln("Op@VD%uv8O6;z[\"gC"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator('a', 6); [EOL]        [EOL]       TreeSet<String> treeSet0 = new TreeSet<String>();z[\"gC")); [EOL]        [EOL]       TreeSet<String> treeSet1 = new TreeSet<String>((SortedSet<String>) treeSet0);z[\"gC"));z[\"gC")); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterable<?>) treeSet1, "Op@VD%uv8O6;z[\"gC");z[\"gC"));z[\"gC")); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.mark(115); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int0 = (-1726); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1726), 'b'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1726 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.right("Threshold must not be negative", 2139); [EOL]        [EOL]       LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>(2139, 2139); [EOL]        [EOL]       Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES; [EOL]       boolean boolean0 = linkedHashSet0.add(locale_FilteringMode0); [EOL]       assertTrue(linkedHashSet0.contains(locale_FilteringMode0)); [EOL]        [EOL]       Spliterator<Locale.FilteringMode> spliterator0 = linkedHashSet0.spliterator(); [EOL]       assertTrue(linkedHashSet0.contains(locale_FilteringMode0)); [EOL]        [EOL]       String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, "Threshold must not be negative"); [EOL]       assertTrue(linkedHashSet0.contains(locale_FilteringMode0)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isEmpty("Threshold must not be negative"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAlphaSpace("Threshold must not be negative"); [EOL]        [EOL]       String string2 = StringUtils.repeat("-h0>", "#m(.AN4", 256); [EOL]        [EOL]       boolean boolean3 = StringUtils.isNumeric("Threshold must not be negative"); [EOL]        [EOL]       String string3 = StringUtils.stripEnd("U", "Threshold must not be negative"); [EOL]        [EOL]       String[] stringArray0 = new String[6]; [EOL]       stringArray0[0] = "-h0>"; [EOL]       stringArray0[1] = "#m(.AN4"; [EOL]       stringArray0[2] = "Threshold must not be negative"; [EOL]       stringArray0[3] = "U"; [EOL]       stringArray0[4] = string2; [EOL]       stringArray0[5] = "java.util.Locale$FilteringMode@0000000001"; [EOL]       String string4 = StringUtils.getCommonPrefix(stringArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (float) 0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       int int0 = strBuilder1.capacity(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder2 = strBuilder1.append((CharSequence) strBuilder0, 0, 0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append(strBuilder3); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       char char0 = '|'; [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceAll('A', '|'); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder5.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.validateRange(32, 32); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)15); [EOL]       assertEquals(9, byteArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       byte[] byteArray0 = new byte[2]; [EOL]       byteArray0[0] = (byte)0; [EOL]       byteArray0[1] = (byte) (-105); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, (byte[]) null); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0, 4134); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short) (byte) (-105), (short) (-1)); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte)0, (byte)0); [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) (short) (-1); [EOL]       floatArray0[1] = (float) 0; [EOL]       floatArray0[2] = 0.0F; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(floatArray0, floatArray0); [EOL]        [EOL]       short[] shortArray0 = new short[1]; [EOL]       equalsBuilder4.reset(); [EOL]       shortArray0[0] = (short) (byte)0; [EOL]       equalsBuilder0.append(shortArray0, shortArray0); [EOL]       equalsBuilder5.append((Object) "", (Object) ""); [EOL]       assertTrue(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int[] intArray0 = new int[1]; [EOL]       char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionCompare()  throws Throwable  { [EOL]       Integer integer0 = new Integer(18); [EOL]       Integer integer1 = new Integer(0); [EOL]       int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, true); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       String string0 = strBuilder4.rightString(2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder4; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder8.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder9.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.setSummaryObjectEndText("Windows 9"); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtokenize()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("org.apache.commons.lang3.text.StrBuilder"); [EOL]       String string0 = strTokenizer0.toString(); [EOL]       assertEquals("StrTokenizer[not tokenized yet]", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSimpleName()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       String string0 = ClassUtils.getSimpleName(class0); [EOL]       assertEquals("Integer", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnotEmpty()  throws Throwable  { [EOL]       HashMap<SQLSyntaxErrorException, CharBuffer> hashMap0 = new HashMap<SQLSyntaxErrorException, CharBuffer>(); [EOL]       SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("dFD6FZ", "The validated character sequence index is invalid: %d"); [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(2241); [EOL]       hashMap0.putIfAbsent(sQLSyntaxErrorException0, charBuffer0); [EOL]       HashMap<SQLSyntaxErrorException, CharBuffer> hashMap1 = Validate.notEmpty(hashMap0); [EOL]       assertSame(hashMap1, hashMap0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       int int0 = 0; [EOL]       String string0 = strBuilder0.midString(0, 0); [EOL]        [EOL]       LinkedList<Object> linkedList0 = new LinkedList<Object>(); [EOL]       assertFalse(linkedList0.contains(0)); [EOL]        [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       linkedList0.sort(comparator0); [EOL]       assertFalse(linkedList0.contains(0)); [EOL]        [EOL]       ListIterator<Object> listIterator0 = linkedList0.listIterator(); [EOL]       assertFalse(linkedList0.contains(0)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) listIterator0); [EOL]       assertFalse(linkedList0.contains(0)); [EOL]        [EOL]       int int1 = 2; [EOL]       boolean boolean0 = linkedList0.add((Object) strBuilder0); [EOL]       assertFalse(linkedList0.contains(0)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.setCharAt(2, 'l'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals("n", charBuffer0.toString()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals("n", charBuffer0.toString()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", (-1)); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertEquals("", charBuffer1.toString()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys();2|T ")); [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0);2|T ")); [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       Double double0 = new Double((-1.2639182580149089)); [EOL]       MutableFloat mutableFloat0 = new MutableFloat(double0); [EOL]       mutableFloat0.add((Number) double0); [EOL]       assertEquals((-2L), mutableFloat0.longValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAssignable()  throws Throwable  { [EOL]       WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); [EOL]       boolean boolean0 = TypeUtils.isAssignable((Type) null, wildcardType0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((long) 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       Reader reader0 = strBuilder1.asReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = arrayList0.add((Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertFalse(arrayList0.isEmpty()); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertFalse(arrayList0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterator<?>) listIterator0, ""); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(arrayList0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.minimizeCapacity(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) ""; [EOL]       objectArray0[1] = (Object) ""; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       StrBuilder strBuilder5 = strBuilder0.appendWithSeparators(objectArray0, "\u0005~t3<ZfA9n`W0/IY"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String[] stringArray0 = new String[6]; [EOL]       stringArray0[0] = "\"N;ix%MK"; [EOL]       stringArray0[1] = "(?: s|[s&&[^ ]])s*"; [EOL]       stringArray0[2] = "(?: s|[s&&[^ ]])s*"; [EOL]       stringArray0[3] = "(?: s|[s&&[^ ]])s*"; [EOL]       stringArray0[4] = "(?: s|[s&&[^ ]])s*"; [EOL]       stringArray0[5] = "(?: s|[s&&[^ ]])s*"; [EOL]       String[] stringArray1 = new String[9]; [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       stringArray1[0] = "\"N;ix%MK"; [EOL]       stringArray1[1] = "\"N;ix%MK"; [EOL]       stringArray1[2] = "(?: s|[s&&[^ ]])s*"; [EOL]       stringArray1[3] = "(?: s|[s&&[^ ]])s*"; [EOL]       stringArray1[4] = "\"N;ix%MK"; [EOL]       stringArray1[5] = "\"N;ix%MK"; [EOL]       stringArray1[6] = "(?: s|[s&&[^ ]])s*"; [EOL]       stringArray1[7] = "(?: s|[s&&[^ ]])s*"; [EOL]       stringArray1[8] = "(?: s|[s&&[^ ]])s*"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.replaceEach("(?: s|[s&&[^ ]])s*", stringArray0, stringArray1); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Search and Replace array lengths don't match: 6 vs 9 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       IDKey iDKey0 = new IDKey("yXF20W=RcpY4f"); [EOL]       boolean boolean0 = iDKey0.equals("yXF20W=RcpY4f"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(718); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((long) 718); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter"; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter", objectArray0); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendSeparator('d', 'Z'); [EOL]        [EOL]       StrBuilder strBuilder4 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]        [EOL]       strBuilder4.size = 55; [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.toString(); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST_SHORT(32767); [EOL]       assertEquals((short)32767, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]       assertEquals(106, strBuilder0.size()); [EOL]       assertEquals(106, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]       assertEquals(110, strBuilder0.size()); [EOL]       assertEquals(110, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]       assertEquals(114, strBuilder0.size()); [EOL]       assertEquals(114, strBuilder2.size()); [EOL]       assertEquals(114, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]       assertEquals(109, strBuilder1.size()); [EOL]       assertEquals(109, strBuilder4.size()); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]        [EOL]       String string2 = strBuilder1.leftString((-2254)); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]       assertEquals(109, strBuilder1.size()); [EOL]        [EOL]       boolean boolean0 = strBuilder3.contains('`'); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]       assertEquals(109, strBuilder2.size()); [EOL]       assertEquals(109, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]       assertEquals(109, strBuilder2.size()); [EOL]       assertEquals(109, strBuilder5.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.trim(); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertFalse(set0.contains("D:qv{0F`Yb3&H^f*N2")); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertFalse(set0.contains("D:qv{0F`Yb3&H^f*N2")); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetShortClassName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getShortClassName(";/_C5D3#ZC<f .-"); [EOL]       assertEquals("-", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(2374, 0, 2374); [EOL]       Fraction fraction1 = fraction0.TWO_THIRDS.add(fraction0); [EOL]       assertEquals(7122, fraction1.getDenominator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf((String) null, 3954); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.trim(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder5 = strBuilder2.appendln((String) null, 0, 2255); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.appendPadding(6, '2'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.insert(137, (Object) strBuilder4); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 137 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[7]; [EOL]       intArray0[3] = (-426); [EOL]       int int0 = ArrayUtils.lastIndexOf(intArray0, (-426), 102); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ","); [EOL]       standardToStringStyle0.removeLastFieldSeparator(stringBuffer0); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(3595.0, 3595.0); [EOL]       long[] longArray0 = new long[6]; [EOL]       longArray0[0] = (-501L); [EOL]       longArray0[1] = (-1500L); [EOL]       longArray0[2] = 1L; [EOL]       longArray0[3] = 4647091106607819706L; [EOL]       longArray0[4] = 4634837335261839360L; [EOL]       longArray0[5] = 4573L; [EOL]       long[] longArray1 = new long[6]; [EOL]       longArray1[0] = 4573L; [EOL]       longArray1[1] = 4634837335261839360L; [EOL]       longArray1[2] = (-501L); [EOL]       longArray1[3] = 1L; [EOL]       longArray1[4] = (-501L); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray1); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(0.0F, (float) (-501L)); [EOL]       float[] floatArray0 = new float[8]; [EOL]       floatArray0[0] = (-772.5231F); [EOL]       floatArray0[1] = (float) 4634837335261839360L; [EOL]       floatArray0[2] = (float) (-1500L); [EOL]       floatArray0[3] = (float) 1L; [EOL]       floatArray0[4] = 0.0F; [EOL]       floatArray0[5] = (float) 4634837335261839360L; [EOL]       floatArray0[6] = (float) 4647091106607819706L; [EOL]       floatArray0[7] = 0.0F; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(floatArray0, floatArray0); [EOL]       assertSame(equalsBuilder2, equalsBuilder4); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetAllFields()  throws Throwable  { [EOL]       Class<Annotation> class0 = Annotation.class; [EOL]       Field[] fieldArray0 = FieldUtils.getAllFields(class0); [EOL]       assertEquals(0, fieldArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableObject<MutableObject<Object>> mutableObject0 = new MutableObject<MutableObject<Object>>(); [EOL]       MutableObject<Object> mutableObject1 = mutableObject0.getValue(); [EOL]       assertNull(mutableObject1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, true); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(421L, 421L); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((byte) (-26), (byte) (-26)); [EOL]       boolean[] booleanArray0 = new boolean[3]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = true; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0); [EOL]       assertTrue(equalsBuilder4.isEquals()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       short short0 = NumberUtils.max((short) (-338), (short) (-2610), (short) (byte)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 1913, 1913); [EOL]        [EOL]       String string2 = StringUtils.normalizeSpace("The character must not be null"); [EOL]        [EOL]       String string3 = StringUtils.deleteWhitespace("The character must not be null"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Thecharactermustnotbenull", (CharSequence) "The character must not be null"); [EOL]        [EOL]       double[] doubleArray0 = new double[7]; [EOL]       doubleArray0[0] = (double) 5; [EOL]       doubleArray0[1] = (double) 5; [EOL]       doubleArray0[2] = (double) 1913; [EOL]       doubleArray0[3] = (double) 1913; [EOL]       doubleArray0[4] = (double) 5; [EOL]       doubleArray0[5] = (double) 5; [EOL]       doubleArray0[6] = (double) 5; [EOL]       String string4 = StringUtils.join(doubleArray0, 'X'); [EOL]        [EOL]       String string5 = StringUtils.left("Thecharactermustnotbenull", (-2027)); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("Thecharactermustnotbenull", "5.0X5.0X1913.0X1913.0X5.0X5.0X5.0"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumeric("The character must not be null"); [EOL]        [EOL]       Locale locale0 = Locale.GERMAN; [EOL]        [EOL]       String string6 = StringUtils.lowerCase("The character must not be null", locale0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'X'; [EOL]       charArray0[1] = 'X'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "the character must not be null", charArray0); [EOL]        [EOL]       int int1 = StringUtils.getLevenshteinDistance((CharSequence) "5.0X5.0X1913.0X1913.0X5.0X5.0X5.0", (CharSequence) "the character must not be null"); [EOL]        [EOL]       ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(); [EOL]       assertFalse(arrayDeque0.contains("The character must not be null")); [EOL]        [EOL]       Iterator<Object> iterator0 = arrayDeque0.iterator(); [EOL]       assertFalse(arrayDeque0.contains("The character must not be null")); [EOL]        [EOL]       String string7 = StringUtils.join(iterator0, '2'); [EOL]       assertFalse(arrayDeque0.contains("The character must not be null")); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       Set<Pair<IDKey, IDKey>> set0 = EqualsBuilder.getRegistry(); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1274, (-3205)); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[0] = (long) (-3205); [EOL]       longArray0[1] = (long) (-3205); [EOL]       longArray0[2] = (long) 1274; [EOL]       longArray0[3] = (long) (-3205); [EOL]       equalsBuilder0.append((Object) set0, (Object) set0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((long[]) null, longArray0); [EOL]       equalsBuilder2.append((byte)96, (byte)43); [EOL]       Object object0 = new Object(); [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "A^~AVSb)S"; [EOL]       stringArray0[1] = "org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle"; [EOL]       stringArray0[2] = "BVuI?48"; [EOL]       EqualsBuilder.reflectionEquals(object0, (Object) set0, stringArray0); [EOL]       equalsBuilder2.append((double) 1274, 2037.269826675559); [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       booleanArray0[0] = false; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = false; [EOL]       booleanArray0[3] = false; [EOL]       booleanArray0[4] = true; [EOL]       booleanArray0[5] = false; [EOL]       booleanArray0[6] = false; [EOL]       booleanArray0[7] = true; [EOL]       equalsBuilder1.append(booleanArray0, booleanArray0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-1222.086F), (float) 1274L); [EOL]       assertSame(equalsBuilder2, equalsBuilder3); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher(";.Wv4!3f/"); [EOL]       char[] charArray0 = new char[9]; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       char char0 = 'j'; [EOL]       Iterable<Object> iterable0 = null; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) null, "b0}RRkoCl[.="); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('j', 815); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       char char1 = '8'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendSeparator('j', '8'); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]       assertEquals(1, strBuilder2.size()); [EOL]        [EOL]       int int1 = 516; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.insert(516, false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 516 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       String string0 = "#Vd[("; [EOL]       StrBuilder strBuilder0 = new StrBuilder("#Vd[("); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = 7; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.delete(7, 1542); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator(' ', (-2561)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort(); [EOL]       double double0 = mutableShort0.doubleValue(); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBefore("", "s/eB&ED@mIB"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "s/eB&ED@mIB", 0); [EOL]        [EOL]       String string1 = StringUtils.rightPad("", 0); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testformatDurationHMS()  throws Throwable  { [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token((Object) null, 0); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.getValue(); [EOL]       durationFormatUtils_Token0.equals((Object) null); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[9]; [EOL]       durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_TokenArray0[8] = durationFormatUtils_Token0; [EOL]       DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, durationFormatUtils_Token0); [EOL]       String string0 = (String)DurationFormatUtils.s; [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("s"); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       String string1 = DurationFormatUtils.formatDurationISO(0); [EOL]       DurationFormatUtils.formatDurationHMS(0L); [EOL]       DurationFormatUtils.formatDuration(0L, "0java.lang.StringBuilder@000000003300java.lang.StringBuilder@000000003400java.lang.StringBuilder@0000000035000", false); [EOL]       System.setCurrentTimeMillis(1L); [EOL]       String string2 = DurationFormatUtils.formatDurationISO((-1036L)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) null; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) null; [EOL]       objectArray0[5] = (Object) null; [EOL]       objectArray0[6] = (Object) strBuilder0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln((String) null, objectArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappendSuper()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) 876L; [EOL]       double[] doubleArray1 = new double[9]; [EOL]       doubleArray1[0] = (double) 876L; [EOL]       doubleArray1[1] = (double) 876L; [EOL]       doubleArray1[2] = (double) 876L; [EOL]       doubleArray1[3] = (double) 876L; [EOL]       doubleArray1[4] = (double) 876L; [EOL]       doubleArray1[5] = (double) 876L; [EOL]       doubleArray1[6] = (double) 876L; [EOL]       Class<EqualsBuilder> class0 = EqualsBuilder.class; [EOL]       String[] stringArray0 = new String[7]; [EOL]       stringArray0[0] = null; [EOL]       stringArray0[1] = null; [EOL]       stringArray0[2] = null; [EOL]       stringArray0[3] = null; [EOL]       stringArray0[4] = null; [EOL]       stringArray0[5] = ""; [EOL]       stringArray0[6] = null; [EOL]       EqualsBuilder.reflectionEquals((Object) null, (Object) equalsBuilder0, false, (Class<?>) class0, stringArray0); [EOL]       doubleArray1[7] = (double) 876L; [EOL]       doubleArray1[8] = (double) 876L; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray1); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder0.append(876L, 0L); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((byte)0, (byte)0); [EOL]       equalsBuilder1.reset(); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte)0, (byte)47); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.appendSuper(false); [EOL]       assertFalse(equalsBuilder5.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       Calendar calendar0 = MockCalendar.getInstance(); [EOL]       Calendar calendar1 = DateUtils.round(calendar0, 9); [EOL]       Calendar calendar2 = DateUtils.truncate(calendar1, 9); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392422400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar2.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]       assertEquals(7, strBuilder1.capacity()); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]       assertEquals(7, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]       assertEquals(7, strBuilder1.capacity()); [EOL]       assertEquals(7, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]       assertEquals(7, strBuilder0.capacity()); [EOL]       assertEquals(7, strBuilder1.capacity()); [EOL]       assertEquals(7, strBuilder4.capacity()); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.insert(0, (Object) integer0); [EOL]       assertEquals(62, strBuilder0.capacity()); [EOL]       assertEquals(62, strBuilder1.capacity()); [EOL]       assertEquals(62, strBuilder5.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.clear(); [EOL]       assertEquals(62, strBuilder0.capacity()); [EOL]       assertEquals(62, strBuilder6.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       String string0 = ""; [EOL]       boolean boolean0 = false; [EOL]       StrBuilder strBuilder7 = strBuilder5.appendln(false); [EOL]       assertEquals(62, strBuilder0.capacity()); [EOL]       assertEquals(62, strBuilder1.capacity()); [EOL]       assertEquals(62, strBuilder5.capacity()); [EOL]       assertEquals(62, strBuilder7.capacity()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder6.replaceAll(strMatcher0, ""); [EOL]       assertEquals(62, strBuilder0.capacity()); [EOL]       assertEquals(62, strBuilder6.capacity()); [EOL]       assertEquals(62, strBuilder8.capacity()); [EOL]        [EOL]       char char0 = 'a'; [EOL]       int int3 = strBuilder0.lastIndexOf('a', 7); [EOL]       assertEquals(62, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder5.new StrBuilderWriter(); [EOL]       assertEquals(62, strBuilder0.capacity()); [EOL]       assertEquals(62, strBuilder1.capacity()); [EOL]       assertEquals(62, strBuilder5.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 66, '\"'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteAll("SzpQ!4 ;U"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('8'); [EOL]       assertEquals(4, booleanArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupportKd", 'C', 'C'); [EOL]       int int0 = strTokenizer0.nextIndex(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setFieldSeparatorAtStart(true); [EOL]       boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       Integer integer0 = new Integer(2779); [EOL]       Integer integer1 = new Integer((-2003)); [EOL]       Integer integer2 = BooleanUtils.toIntegerObject((Boolean) null, integer0, integer0, integer1); [EOL]       assertEquals((-2003), (int)integer2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ","); [EOL]       standardToStringStyle0.appendToString(stringBuffer0, ""); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertEquals(7, strBuilder0.length()); [EOL]       assertEquals(7, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertEquals(13, strBuilder0.length()); [EOL]       assertEquals(13, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(65, strBuilder0.length()); [EOL]       assertEquals(65, strBuilder1.length()); [EOL]       assertEquals(65, strBuilder3.length()); [EOL]       assertEquals(65, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertEquals(65, strBuilder0.length()); [EOL]       assertEquals(65, strBuilder1.length()); [EOL]       assertEquals(65, strBuilder3.length()); [EOL]       assertEquals(65, strBuilder4.length()); [EOL]       assertEquals(65, strBuilder5.length()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.append((StringBuilder) null, 79, 44); [EOL]       assertEquals(65, strBuilder0.length()); [EOL]       assertEquals(65, strBuilder1.length()); [EOL]       assertEquals(65, strBuilder3.length()); [EOL]       assertEquals(65, strBuilder4.length()); [EOL]       assertEquals(65, strBuilder5.length()); [EOL]       assertEquals(65, strBuilder6.length()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(65, strBuilder0.length()); [EOL]       assertEquals(65, strBuilder1.length()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertEquals(130, strBuilder0.length()); [EOL]       assertEquals(130, strBuilder1.length()); [EOL]       assertEquals(130, strBuilder7.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertEquals(130, strBuilder0.length()); [EOL]       assertEquals(130, strBuilder8.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", ""); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testwrite()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-620)); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(1L); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.markSupported(); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll(iterator0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals((Object) null); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteAll('J'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.append(1L); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0); [EOL]        [EOL]       Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder5); [EOL]       assertNotNull(writer0); [EOL]       assertSame(strBuilder_StrBuilderWriter0, writer0); [EOL]       assertSame(writer0, strBuilder_StrBuilderWriter0); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write("?NYmW7afS>c]@v"); [EOL]       assertSame(strBuilder_StrBuilderWriter0, writer0); [EOL]        [EOL]       boolean boolean2 = strBuilder5.isEmpty(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteFirst('\\'); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendWithSeparators(iterator0, "u"); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(strBuilder2); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.append(1.0F); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.append(stringBuffer0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.subSequence((-900), (-620)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -900 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Character[] characterArray0 = new Character[1]; [EOL]       Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0); [EOL]       assertEquals(1, characterArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       booleanArray0[0] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0, 0); [EOL]       assertEquals('1', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)89); [EOL]       MutableDouble mutableDouble0 = new MutableDouble((Number) byte0); [EOL]       mutableDouble0.subtract(1574.5204259); [EOL]       float float0 = mutableDouble0.floatValue(); [EOL]       assertEquals((-1485.5204F), float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       int int0 = (-4136); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-4136)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, (-4136)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((Object) "_D]5>#kw<b6p@SuO"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       Writer writer0 = strBuilder1.asWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.replaceAll("", ""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       String string0 = strBuilder2.midString((-4136), (-4136)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.substring((-730), 938); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -730 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testand()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null, "Array and element annot both be null", (String) null, "O`|q ?"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeCsv()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeCsv((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('o'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null); [EOL]       assertNull(intArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(256); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, ""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln("HDK1o:4z@EGXArn*_"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertTrue(strBuilder3.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder3, (-2074), (-2074)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdefaultIfNull()  throws Throwable  { [EOL]       LinkedList<MockSimpleDateFormat> linkedList0 = ObjectUtils.defaultIfNull((LinkedList<MockSimpleDateFormat>) null, (LinkedList<MockSimpleDateFormat>) null); [EOL]       assertNull(linkedList0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append((long) 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln('H'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       Object[] objectArray1 = new Object[0]; [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendAll(objectArray1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteCharAt(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.setLength(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       int int0 = 2; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2, (double) 2); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(); [EOL]       String string0 = fastDateFormat0.toString(); [EOL]       assertEquals("FastDateFormat[M/d/yy h:mm a,en,GMT]", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = new String[9]; [EOL]       String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0); [EOL]       assertEquals(9, stringArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(); [EOL]       assertTrue(arrayDeque0.isEmpty()); [EOL]        [EOL]       Iterator<Object> iterator0 = arrayDeque0.descendingIterator(); [EOL]       assertTrue(arrayDeque0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, "java.class.version"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(arrayDeque0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append('Y'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("b-K~^"); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendNewLine(); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append((StringBuilder) null); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]       assertEquals(6, strBuilder2.size()); [EOL]        [EOL]       boolean boolean0 = strBuilder1.equals(strBuilder0); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]        [EOL]       int int0 = strBuilder0.capacity(); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'p'; [EOL]       int int1 = 96; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(31, charArray0, 96, (-886)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 31 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(6); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.ensureCapacity(6); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]        [EOL]       int int0 = strBuilder2.indexOf((StrMatcher) strMatcher_TrimMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>((-1)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendAll((Iterable<?>) arrayDeque0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder("v@1?:{"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert((-1), (CharSequence) strBuilder2, (-1), 6); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // dstOffset -1 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isIn('&', 'L'); [EOL]       CharRange charRange1 = CharRange.is('&'); [EOL]       boolean boolean0 = charRange1.equals(charRange0); [EOL]       assertFalse(charRange1.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isIn('w', ')'); [EOL]        [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       charRange0.forEach(consumer0); [EOL]       assertEquals(')', charRange0.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (double) 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('w'); [EOL]       CharRange charRange1 = CharRange.is('A'); [EOL]       boolean boolean0 = charRange0.contains(charRange1); [EOL]       assertFalse(charRange1.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHexDigit()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0(2); [EOL]       assertEquals('4', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '7'; [EOL]       charArray0[1] = 'L'; [EOL]       charArray0[2] = 'v'; [EOL]       charArray0[3] = 't'; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0, 0, 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, ""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln('h'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteCharAt(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       int int1 = strBuilder3.capacity(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.subSequence(44, 6); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 6 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       long[] longArray0 = new long[6]; [EOL]       longArray0[3] = (-1438L); [EOL]       long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1438L)); [EOL]       assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       StrLookup<String> strLookup0 = StrLookup.systemPropertiesLookup(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "clon", "clon", 'h'); [EOL]       strSubstitutor0.replace((String) null); [EOL]       assertEquals('h', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-113), 1, 2, (-451), 3725); [EOL]       DateUtils.iterator((Calendar) mockGregorianCalendar0, 3); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62401465735000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=9,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=213,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=31,SECOND=5,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString()); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testtoInt()  throws Throwable  { [EOL]       int int0 = NumberUtils.toInt("-nEFaAWda", (-3560)); [EOL]       assertEquals((-3560), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOfThrowable()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(); [EOL]       MockThrowable mockThrowable1 = new MockThrowable(); [EOL]       mockThrowable0.initCause(mockThrowable1); [EOL]       Class<Throwable> class0 = Throwable.class; [EOL]       int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "The validated state is false", 3, 3, 3, 0, 0, 2, 3, 2, 2); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0); [EOL]       TimeZone timeZone0 = fastDateFormat0.getTimeZone(); [EOL]       assertSame(timeZone0, simpleTimeZone0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-1)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAvailableLocale()  throws Throwable  { [EOL]       Locale locale0 = Locale.ROOT; [EOL]       boolean boolean0 = LocaleUtils.isAvailableLocale(locale0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       int int0 = 79; [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       int int1 = (-2267); [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln((Object) strBuilder1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.deleteAll('o'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 79, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       long[] longArray0 = new long[3]; [EOL]       longArray0[0] = (long) 37; [EOL]       hashCodeBuilder0.append(longArray0); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(1); [EOL]       toStringStyle0.DEFAULT_STYLE.appendToString(stringBuffer0, (String) null); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDateInstance()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getDefault(); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0); [EOL]       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(); [EOL]       boolean boolean0 = fastDateFormat0.equals(fastDateFormat1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('Z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testidentityToString()  throws Throwable  { [EOL]       String string0 = ObjectUtils.identityToString((Object) ""); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       int int0 = (-2195); [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-2195)); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-2195)); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.deleteCharAt((-2195)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -2195 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'd'; [EOL]       char[] charArray1 = ArrayUtils.removeElement(charArray0, 'd'); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null, (String) null, (String) null, (String) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       PageAttributes pageAttributes0 = ObjectUtils.CONST((PageAttributes) null); [EOL]       assertNull(pageAttributes0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-890)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append("$Ps-)|ysy>r47^"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       objectArray0[0] = (Object) strBuilder1; [EOL]       objectArray0[1] = (Object) "$Ps-)|ysy>r47^"; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       objectArray0[4] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[5] = (Object) "$Ps-)|ysy>r47^"; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(objectArray0, "$Ps-)|ysy>r47^"); [EOL]       assertEquals(604, strBuilder0.capacity()); [EOL]       assertEquals(604, strBuilder1.capacity()); [EOL]       assertEquals(604, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(4, (float) 4); [EOL]       assertEquals(604, strBuilder0.capacity()); [EOL]       assertEquals(604, strBuilder1.capacity()); [EOL]       assertEquals(604, strBuilder2.capacity()); [EOL]       assertEquals(604, strBuilder3.capacity()); [EOL]        [EOL]       String string0 = strBuilder1.midString((-3719), 97); [EOL]       assertEquals(604, strBuilder0.capacity()); [EOL]       assertEquals(604, strBuilder1.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectEndText(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(4); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('2'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexToByte()  throws Throwable  { [EOL]       byte byte0 = Conversion.hexToByte("", 0, (byte) (-2), (-2974), 0); [EOL]       assertEquals((byte) (-2), byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       String string0 = StringUtils.mid("-", (-385), (-385)); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "|qO{l0uUU|R8lUrfn"; [EOL]       long[] longArray0 = new long[9]; [EOL]       longArray0[0] = (long) (-385); [EOL]       longArray0[1] = (long) (-385); [EOL]       longArray0[2] = (long) (-385); [EOL]       longArray0[3] = (long) (-385); [EOL]       longArray0[4] = 3213L; [EOL]       longArray0[5] = (long) (-385); [EOL]       longArray0[6] = (long) (-385); [EOL]       longArray0[7] = (long) (-385); [EOL]       String string1 = StringUtils.join(longArray0, 'D'); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) "-385D-385D-385D-385D3213D-385D-385D-385D0"; [EOL]       charSequenceArray0[7] = (CharSequence) "|qO{l0uUU|R8lUrfn"; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Boolean boolean0 = new Boolean("l+Twxa)v3-+?Fz_"); [EOL]       String string0 = BooleanUtils.toString(boolean0, "l+Twxa)v3-+?Fz_", (String) null, ""); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getDefault(); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0); [EOL]       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(); [EOL]       boolean boolean0 = fastDateFormat0.equals(fastDateFormat1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFirstContextValue()  throws Throwable  { [EOL]       DefaultExceptionContext defaultExceptionContext0 = new DefaultExceptionContext(); [EOL]       DefaultExceptionContext defaultExceptionContext1 = defaultExceptionContext0.setContextValue((String) null, (Object) null); [EOL]       Object object0 = defaultExceptionContext1.getFirstContextValue("Ex{ptio Conext:\""); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       String string0 = "#Vd[("; [EOL]       StrBuilder strBuilder0 = new StrBuilder("#Vd[("); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]        [EOL]       int int0 = 7; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.delete(7, 1542); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart(); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testLocale()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("/O5f<g"); [EOL]       Locale locale0 = Locale.ITALY; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("''1F", timeZone0, locale0); [EOL]       assertEquals("''1F", fastDateParser0.getPattern()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.setValue(1.0); [EOL]       mutableDouble0.getValue(); [EOL]       assertEquals((byte)1, mutableDouble0.byteValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("X>2Y%"); [EOL]       long[] longArray0 = new long[5]; [EOL]       Boolean boolean0 = new Boolean(""); [EOL]       standardToStringStyle0.append(stringBuffer0, (String) null, longArray0, boolean0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast(", '", ""); [EOL]        [EOL]       String string1 = StringUtils.defaultIfBlank("fk= 2D", "fk= 2D"); [EOL]        [EOL]       float[] floatArray0 = new float[7]; [EOL]       floatArray0[0] = 2112.0F; [EOL]       floatArray0[1] = 713.954F; [EOL]       floatArray0[2] = 389.0F; [EOL]       floatArray0[3] = 0.0F; [EOL]       floatArray0[4] = 2385.58F; [EOL]       floatArray0[5] = 0.0F; [EOL]       floatArray0[6] = 1.0F; [EOL]       String string2 = StringUtils.join(floatArray0, '6'); [EOL]       assertEquals(7, floatArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.setSummaryObjectEndText("Windows 9"); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       booleanArray0[0] = true; [EOL]       boolean boolean0 = ArrayUtils.contains(booleanArray0, true); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("`<j[.Hj#z$ak.1\"Rd", strMatcher0); [EOL]       strTokenizer0.getQuoteMatcher(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       float float0 = (-3134.9556F); [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("", (int) ':'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.trim(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder6 = new StrBuilder(15); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 0); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       String string0 = "length must be valid"; [EOL]       StrBuilder strBuilder1 = new StrBuilder("length must be valid"); [EOL]       assertEquals(20, strBuilder1.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append((CharSequence) strBuilder0, 187, 187); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{"); [EOL]       toStringStyle0.appendEnd(stringBuffer0, standardToStringStyle0); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toString(false, "", ""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       Stack<StrBuilder> stack0 = new Stack<StrBuilder>(); [EOL]        [EOL]       LinkedHashSet<StrBuilder> linkedHashSet0 = new LinkedHashSet<StrBuilder>(stack0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) linkedHashSet0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator(""); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder2.length()); [EOL]        [EOL]       int int0 = (-1); [EOL]       StringWriter stringWriter0 = null; [EOL]       try { [EOL]         stringWriter0 = new StringWriter((-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Negative buffer size [EOL]          // [EOL]          verifyException("java.io.StringWriter", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-811), (-811)); [EOL]       Object[] objectArray0 = new Object[0]; [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(objectArray0); [EOL]       assertEquals((-811), (int)hashCodeBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoLong()  throws Throwable  { [EOL]       long long0 = NumberUtils.toLong("~\"9Je1[NEZ<tR4", (long) (short)614); [EOL]       assertEquals(614L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('Y'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("L,!4&lfs}", "L,!4&lfs}"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder0.length(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSuccessful()  throws Throwable  { [EOL]       ForkJoinPool forkJoinPool0 = new ForkJoinPool(); [EOL]       MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0); [EOL]       Callable<MultiBackgroundInitializer.MultiBackgroundInitializerResults> callable0 = (Callable<MultiBackgroundInitializer.MultiBackgroundInitializerResults>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<MultiBackgroundInitializer.MultiBackgroundInitializerResults> callableBackgroundInitializer0 = new CallableBackgroundInitializer<MultiBackgroundInitializer.MultiBackgroundInitializerResults>(callable0); [EOL]       multiBackgroundInitializer0.addInitializer("org.apache.commons.lang3.concurrent.BasicThreadFactory$1", callableBackgroundInitializer0); [EOL]       MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize(); [EOL]       assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       Fraction fraction1 = Fraction.getFraction((-1391.467789443829)); [EOL]       Fraction fraction2 = fraction0.subtract(fraction1); [EOL]       assertEquals((-3304736), fraction1.getNumerator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((-5438)); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetEnableSubstitutionInVariables()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", '\"'); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]       strSubstitutor0.setVariablePrefixMatcher(strMatcher0); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testLocale()  throws Throwable  { [EOL]       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1444), "GMTCNT"); [EOL]       Locale locale0 = Locale.US; [EOL]       FastDateParser fastDateParser0 = new FastDateParser(">H,W8K", simpleTimeZone0, locale0); [EOL]       TimeZone timeZone0 = fastDateParser0.getTimeZone(); [EOL]       assertFalse(timeZone0.useDaylightTime()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.clear(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder4.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       String string0 = ")[C$#_(U9,]+>eub7]}"; [EOL]       StrBuilder strBuilder5 = strBuilder0.appendln(false); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.replaceAll(strMatcher0, ")[C$#_(U9,]+>eub7]}"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       char char0 = 'c'; [EOL]       int int3 = strBuilder0.lastIndexOf('c', 7); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder2.appendSeparator("Solaris"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendFixedWidthPadRight((Object) "java.vm.specification.version", 81, '0'); [EOL]       assertFalse(strBuilder8.isEmpty()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(159, 159, 159); [EOL]       Fraction fraction1 = fraction0.reduce(); [EOL]       assertEquals(160.0, fraction1.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       int[] intArray0 = new int[6]; [EOL]       int[] intArray1 = new int[2]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray1); [EOL]       double[] doubleArray0 = new double[0]; [EOL]       compareToBuilder1.append(doubleArray0, doubleArray0); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdaemon()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.daemon(false); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Boolean boolean0 = basicThreadFactory0.getDaemonFlag(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       short[] shortArray0 = new short[4]; [EOL]       shortArray0[1] = (short)1732; [EOL]       boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1732); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       String string0 = "K6f"; [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.delete(0, 0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       String string1 = "]*qbQ%"; [EOL]       StrBuilder strBuilder2 = strBuilder1.setNewLineText("]*qbQ%"); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]       assertEquals(6, strBuilder2.size()); [EOL]       assertEquals(6, strBuilder3.size()); [EOL]        [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]       assertEquals(0, linkedList0.size()); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]       assertEquals(0, linkedList0.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendAll(iterator0); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]       assertEquals(0, linkedList0.size()); [EOL]       assertEquals(6, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.appendSeparator("]*qbQ%", (-1079)); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]       assertEquals(0, linkedList0.size()); [EOL]       assertEquals(6, strBuilder4.size()); [EOL]       assertEquals(6, strBuilder5.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendln('\''); [EOL]       assertEquals(13, strBuilder0.size()); [EOL]       assertEquals(13, strBuilder1.size()); [EOL]       assertEquals(13, strBuilder2.size()); [EOL]       assertEquals(13, strBuilder3.size()); [EOL]       assertEquals(13, strBuilder6.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.append(0); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder1.size()); [EOL]       assertEquals(14, strBuilder2.size()); [EOL]       assertEquals(14, strBuilder3.size()); [EOL]       assertEquals(14, strBuilder6.size()); [EOL]       assertEquals(14, strBuilder7.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder0, (-286), 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("", ", element2="); [EOL]       boolean boolean0 = range0.contains("k.v4"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = "\\u"; [EOL]       String string1 = StringUtils.repeat(string0, "Arguments cannot both be null", 32); [EOL]        [EOL]       String string2 = StringUtils.defaultString(string1); [EOL]        [EOL]       Locale locale0 = Locale.JAPANESE; [EOL]        [EOL]       String[] stringArray0 = Locale.getISOCountries(); [EOL]       assertEquals(250, stringArray0.length); [EOL]        [EOL]       String string3 = StringUtils.upperCase(string0, locale0); [EOL]        [EOL]       int[] intArray0 = new int[1]; [EOL]       intArray0[0] = 32; [EOL]       String string4 = StringUtils.join(intArray0, '7', 32, (-1106)); [EOL]       assertEquals(1, intArray0.length); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte)13; [EOL]       byteArray0[1] = (byte)28; [EOL]       byteArray0[2] = (byte)59; [EOL]       byteArray0[3] = (byte)0; [EOL]       String string5 = StringUtils.join(byteArray0, '7', 32, (-1451)); [EOL]       assertEquals(4, byteArray0.length); [EOL]        [EOL]       String string6 = StringUtils.repeat((String) null, (int) (byte)28); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((-5438)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(0, 798); [EOL]       Fraction fraction1 = fraction0.add(fraction0); [EOL]       assertSame(fraction1, fraction0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((short[]) null); [EOL]       assertEquals(629, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null, 0, 2825); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlphanumeric()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('a'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStringBuffer()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer("Jj^%^wj"); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0, stringBuffer0); [EOL]       StringBuffer stringBuffer1 = toStringBuilder0.getStringBuffer(); [EOL]       assertEquals(29, stringBuffer1.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Integer integer1 = new Integer(0); [EOL]       MutableTriple<Object, Object, Integer> mutableTriple0 = MutableTriple.of((Object) integer0, (Object) integer0, integer1); [EOL]       mutableTriple0.setLeft(integer1); [EOL]       assertTrue(integer1.equals((Object)integer0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetExternalExecutor()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.getFuture(); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Integer> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Integer>(callable1); [EOL]       ExecutorService executorService0 = callableBackgroundInitializer1.getExternalExecutor(); [EOL]       assertNull(executorService0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPriority()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertNull(integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("", 'e'); [EOL]       assertEquals(0, stringArray0.length); [EOL]        [EOL]       Class<Integer> class0 = Integer.class; [EOL]       ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0); [EOL]        [EOL]       String string0 = StringUtils.join((Iterable<?>) serviceLoader0, ""); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertEquals(0, stringArray0.length); [EOL]       assertEquals(0, stringArray1.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWithIgnoreCase("", ""); [EOL]        [EOL]       String string1 = StringUtils.join((Object[]) stringArray1, "vaf0N@H/E9XUtm"); [EOL]       assertEquals(0, stringArray0.length); [EOL]       assertEquals(0, stringArray1.length); [EOL]        [EOL]       String string2 = StringUtils.replaceChars("vaf0N@H/E9XUtm", "", ""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.stripAll(stringArray1); [EOL]       assertEquals(0, stringArray0.length); [EOL]       assertEquals(0, stringArray1.length); [EOL]       assertEquals(0, stringArray2.length); [EOL]        [EOL]       String string3 = StringUtils.replace("", "", "vaf0N@H/E9XUtm"); [EOL]        [EOL]       String string4 = StringUtils.substring((String) null, 10, 0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutablePair<String, Object> mutablePair0 = new MutablePair<String, Object>(); [EOL]       String string0 = mutablePair0.toString("["); [EOL]       assertEquals("[", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder1.capacity()); [EOL]       assertEquals(79, strBuilder3.capacity()); [EOL]       assertEquals(79, strBuilder4.capacity()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.clear(); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder2.capacity()); [EOL]       assertEquals(79, strBuilder5.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteAll('#'); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder1.capacity()); [EOL]       assertEquals(79, strBuilder3.capacity()); [EOL]       assertEquals(79, strBuilder4.capacity()); [EOL]       assertEquals(79, strBuilder6.capacity()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder1.capacity()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder1.capacity()); [EOL]       assertEquals(79, strBuilder7.capacity()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder8.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       Double double0 = new Double((-30.60225976818994)); [EOL]       MutableLong mutableLong0 = new MutableLong(double0); [EOL]       mutableLong0.subtract((Number) double0); [EOL]       assertEquals((short)0, mutableLong0.shortValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, (String) null); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(0.0); [EOL]       assertEquals(4, strBuilder0.size()); [EOL]       assertEquals(4, strBuilder1.size()); [EOL]       assertEquals(4, strBuilder2.size()); [EOL]        [EOL]       int int0 = 556; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.substring(821, 556); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0); [EOL]       assertEquals(18, charArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(256); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, ""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln("HDK1o:4z@EGXArn*_"); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder0)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder3, (-2074), (-2074)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlocaleLookupList()  throws Throwable  { [EOL]       LocaleUtils.languagesByCountry("JP"); [EOL]       LocaleUtils.localeLookupList((Locale) null); [EOL]       LocaleUtils.languagesByCountry("{aqB[@@U9)'OL"); [EOL]       List<Locale> list0 = LocaleUtils.countriesByLanguage(""); [EOL]       assertEquals(0, list0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(false); [EOL]       mutableBoolean0.hashCode(); [EOL]       assertFalse(mutableBoolean0.getValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testJAVA_CTRL_CHARS_UNESCAPE()  throws Throwable  { [EOL]       String[][] stringArray0 = EntityArrays.JAVA_CTRL_CHARS_UNESCAPE(); [EOL]       assertEquals(5, stringArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_HALF; [EOL]       int int0 = fraction0.intValue(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetMonths()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-947), (-947), 0); [EOL]       Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, 0); [EOL]       Date date1 = DateUtils.setMonths(date0, 1); [EOL]       assertEquals("Mon Jan 01 00:00:00 GMT 4", date1.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontainsOnly()  throws Throwable  { [EOL]       StringUtils.remove("null comparator", '.'); [EOL]       StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]       StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]       char[] charArray0 = new char[0]; [EOL]       StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]       StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]       StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator"); [EOL]       StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]       StringUtils.replacePattern("", "", ""); [EOL]       boolean boolean0 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]       StringUtils.deleteWhitespace("null comparator"); [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "null comparator", (CharSequence) null); [EOL]       assertFalse(boolean1 == boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testxor()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       booleanArray0[0] = true; [EOL]       boolean boolean0 = BooleanUtils.xor(booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigitMsb0_4bits()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = true; [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, 0); [EOL]       assertEquals('6', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSplitNanoTime()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       long long0 = stopWatch0.getSplitNanoTime(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator"); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string3 = StringUtils.replaceOnce("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7"); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       String string4 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is 7"); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.difference(",-t8JJh/bUr{+$_DS", "WDl?;hCf*= F");hCf*= F", string0); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "WDl?;hCf*= F", "RWSLzV4h"); [EOL]        [EOL]       String string1 = StringUtils.stripAccents(",-t8JJh/bUr{+$_DS"); [EOL]        [EOL]       String string2 = StringUtils.uncapitalize("uOcUk"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphaSpace("uOcUk"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[4]; [EOL]       charSequenceArray0[0] = (CharSequence) "uOcUk"; [EOL]       charSequenceArray0[1] = (CharSequence) ",-t8JJh/bUr{+$_DS"; [EOL]       charSequenceArray0[2] = (CharSequence) ",-t8JJh/bUr{+$_DS"; [EOL]       String string3 = StringUtils.center("WDl?;hCf*= F", 13);hCf*= F ", string3); [EOL]        [EOL]       charSequenceArray0[3] = (CharSequence) "WDl?;hCf*= F "; [EOL]       String string4 = StringUtils.appendIfMissingIgnoreCase("Ha?BYN:B?", "WDl?;hCf*= F", charSequenceArray0);hCf*= F", string4); [EOL]       assertEquals(4, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsNone((CharSequence) "Ha?BYN:B?WDl?;hCf*= F", (char[]) null); [EOL]        [EOL]       String string5 = StringUtils.join((Iterator<?>) null, 'z'); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "Ha?BYN:B?WDl?;hCf*= F", (CharSequence) null); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = 0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.deleteCharAt(0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((short) (-1149)); [EOL]       assertEquals((-520), hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY; [EOL]       Double double0 = new Double((-355.081269)); [EOL]       int int0 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) double0, (-2849)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt((-2587)); [EOL]       mutableInt0.increment(); [EOL]       assertEquals((-2586), (int)mutableInt0.getValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", 0); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short) (-1)); [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) hashCodeBuilder1; [EOL]       objectArray0[1] = (Object) hashCodeBuilder0; [EOL]       objectArray0[2] = (Object) hashCodeBuilder0; [EOL]       Object object0 = new Object(); [EOL]       objectArray0[3] = object0; [EOL]       objectArray0[4] = (Object) hashCodeBuilder0; [EOL]       objectArray0[5] = (Object) hashCodeBuilder0; [EOL]       objectArray0[6] = (Object) hashCodeBuilder1; [EOL]       hashCodeBuilder1.append(objectArray0); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]       assertEquals(0, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoLong()  throws Throwable  { [EOL]       Double double0 = new Double((-30.60225976818994)); [EOL]       MutableLong mutableLong0 = new MutableLong(double0); [EOL]       Long long0 = mutableLong0.toLong(); [EOL]       assertEquals((-30L), (long)long0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder.isRegistered("Unexpected IllegalAccessException", "Unexpected IllegalAccessException"); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) "Unexpected IllegalAccessException", (Object) "Unexpected IllegalAccessException"); [EOL]       assertTrue(equalsBuilder1.isEquals()); [EOL]        [EOL]       boolean[] booleanArray0 = new boolean[3]; [EOL]       booleanArray0[0] = false; [EOL]       booleanArray0[1] = false; [EOL]       booleanArray0[2] = false; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((boolean[]) null, booleanArray0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(443.779, 443.779); [EOL]       short[] shortArray0 = new short[2]; [EOL]       shortArray0[0] = (short)1; [EOL]       shortArray0[1] = (short) (-756); [EOL]       short[] shortArray1 = new short[1]; [EOL]       shortArray1[0] = (short) (-756); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(shortArray0, shortArray1); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append(false, false); [EOL]       assertFalse(equalsBuilder1.isEquals()); [EOL]       assertFalse(equalsBuilder6.isEquals()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("java.library.path"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('h'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendPadding(5, 'd'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('d'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln('h'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendFixedWidthPadRight((Object) strBuilder2, (-1089), 'd'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = 'd'; [EOL]       charArray0[1] = '%'; [EOL]       IntStream intStream0 = strBuilder2.chars(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       charArray0[2] = 'd'; [EOL]       charArray0[3] = 'h'; [EOL]       charArray0[4] = 'd'; [EOL]       char[] charArray1 = strBuilder3.getChars(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder2.replace(strMatcher0, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", 5, 5, 5); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       IntStream intStream1 = strBuilder6.chars(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.insert(18, (-1835.44)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder2.setLength(18); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder8.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder7.appendWithSeparators((Iterator<?>) null, "java.library.path"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]       assertFalse(strBuilder9.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       int int0 = ObjectUtils.CONST((-2394)); [EOL]       assertEquals((-2394), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetAllFields()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       List<Field> list0 = FieldUtils.getAllFieldsList(class0); [EOL]       assertTrue(list0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1075)); [EOL]       MutablePair<Object, Object> mutablePair0 = MutablePair.of((Object) integer0, (Object) null); [EOL]       MutablePair<Integer, Integer> mutablePair1 = new MutablePair<Integer, Integer>(integer0, integer0); [EOL]       ImmutablePair<Pair<Object, Object>, MutablePair<Integer, Integer>> immutablePair0 = new ImmutablePair<Pair<Object, Object>, MutablePair<Integer, Integer>>(mutablePair0, mutablePair1); [EOL]       Object object0 = immutablePair0.getKey(); [EOL]       boolean boolean0 = mutablePair0.equals(object0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testavailableLocaleList()  throws Throwable  { [EOL]       List<Locale> list0 = LocaleUtils.availableLocaleList(); [EOL]       assertEquals(160, list0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) 104); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendSeparator("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.ensureCapacity(104); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]       assertTrue(list0.isEmpty()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]        [EOL]       int int2 = strBuilder4.lastIndexOf('/'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 101, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlphanumeric()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('A'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append((-463.38F), (-1.0F)); [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       compareToBuilder0.append(byteArray0, byteArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-127), (int) (byte)67); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) integer0); [EOL]       int int0 = pair0.compareTo(pair0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testor()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       booleanArray0[0] = true; [EOL]       boolean boolean0 = BooleanUtils.or(booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.append((StringBuilder) null, 79, 44); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = 226.07797F; [EOL]       floatArray0[1] = 1348.4321F; [EOL]       floatArray0[2] = (-1534.7029F); [EOL]       String string0 = StringUtils.join(floatArray0, 'c'); [EOL]       assertEquals(3, floatArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1083)); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(integer0, toStringStyle0); [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append(byteArray0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testaddContextValue()  throws Throwable  { [EOL]       DefaultExceptionContext defaultExceptionContext0 = new DefaultExceptionContext(); [EOL]       DefaultExceptionContext defaultExceptionContext1 = defaultExceptionContext0.addContextValue("Ex{ptio Conext:\"", "Ex{ptio Conext:\""); [EOL]       DefaultExceptionContext defaultExceptionContext2 = defaultExceptionContext0.setContextValue("Ex{ptio Conext:\"", defaultExceptionContext1); [EOL]       assertSame(defaultExceptionContext2, defaultExceptionContext1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.contains('5'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("false"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4043)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertEquals(3, stringArray0.length); [EOL]       assertEquals(3, stringArray1.length); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       long[] longArray0 = new long[2]; [EOL]       longArray0[0] = 1885L; [EOL]       longArray0[1] = (long) 0; [EOL]       String string4 = StringUtils.join(longArray0, 'S', 285, 0); [EOL]       assertEquals(2, longArray0.length); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("LaKB", "{FakYXNQUOHZ", (-4043)); [EOL]       assertEquals(2, stringArray2.length); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byteArray0[0] = (byte)21; [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte)16; [EOL]       byteArray0[3] = (byte) (-1); [EOL]       byteArray0[4] = (byte)3; [EOL]       byteArray0[5] = (byte)64; [EOL]       byteArray0[6] = (byte)36; [EOL]       try {  [EOL]         StringUtils.toString(byteArray0, ""); [EOL]         fail("Expecting exception: UnsupportedEncodingException"); [EOL]        [EOL]       } catch(UnsupportedEncodingException e) { [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       long long0 = mutableDouble0.longValue(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcharSetMatcher()  throws Throwable  { [EOL]       char[] charArray0 = new char[4]; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(""); [EOL]       int int0 = strMatcher0.isMatch(charArray0, (int) 'M'); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       MutablePair<ImmutablePair<Integer, Object>, Object> mutablePair0 = new MutablePair<ImmutablePair<Integer, Object>, Object>(); [EOL]       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("", ""); [EOL]       ImmutablePair<String, Object> immutablePair0 = ImmutablePair.of("", (Object) abstractMap_SimpleEntry0); [EOL]       MutablePair<AbstractMap.SimpleEntry<Object, Object>, ImmutablePair<String, Object>> mutablePair1 = MutablePair.of(abstractMap_SimpleEntry0, immutablePair0); [EOL]       Object object0 = mutablePair1.getValue(); [EOL]       boolean boolean0 = mutablePair0.equals(object0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRootCauseMessage()  throws Throwable  { [EOL]       String string0 = ExceptionUtils.getRootCauseMessage((Throwable) null); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmapLookup()  throws Throwable  { [EOL]       StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) null); [EOL]       String string0 = strLookup0.lookup((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(88, 0); [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]       char[] charArray0 = new char[9]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = unicodeEscaper0.translate((CharSequence) charBuffer0, 0, (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.ensureCapacity(115); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf((StrMatcher) null); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.subSequence(57, 117); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 117 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd((String) null, (String) null); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, (String) null); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]       assertEquals(1, stringArray1.length); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       int int1 = StringUtils.length("RWSLzV4h"); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, 9); [EOL]        [EOL]       int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (char[]) null); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]        [EOL]       standardToStringStyle0.setNullText(""); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = " in an array of "; [EOL]       StrBuilder strBuilder0 = new StrBuilder(" in an array of "); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(" in an array of ", 0, 0); [EOL]        [EOL]       String string1 = strBuilder1.substring(0); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       int int1 = (-860); [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-860), (Object) " in an array of "); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -860 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       String string0 = RandomStringUtils.randomAlphabetic(0); [EOL]        [EOL]       RandomStringUtils randomStringUtils0 = new RandomStringUtils(); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'K'; [EOL]       charArray0[1] = 'b'; [EOL]       charArray0[2] = ';'; [EOL]       charArray0[3] = '0'; [EOL]       charArray0[4] = 'k'; [EOL]       charArray0[5] = 'V'; [EOL]       MockRandom mockRandom0 = new MockRandom((-1298L)); [EOL]       assertNotNull(mockRandom0); [EOL]        [EOL]       String string1 = RandomStringUtils.random(2190, 0, 1551, false, false, charArray0, (Random) mockRandom0);', '0', 'k', 'V'}, charArray0); [EOL]        [EOL]       String string2 = RandomStringUtils.randomAscii(32); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '1'; [EOL]       charArray1[1] = 'I'; [EOL]       String string3 = RandomStringUtils.random(2052, charArray1); [EOL]        [EOL]       String string4 = RandomStringUtils.random(2439); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         RandomStringUtils.randomNumeric((-557)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Requested random string length -557 is less than 0. [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.RandomStringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("&uiM4\"5g,@ppG"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder("line.separator"); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       objectArray0[0] = (Object) "oIj {5P}vL!>"; [EOL]       objectArray0[1] = (Object) "oIj {5P}vL!>"; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[2] = object0; [EOL]       objectArray0[3] = (Object) "&uiM4\"5g,@ppG"; [EOL]       objectArray0[4] = (Object) strBuilder0; [EOL]       objectArray0[5] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln("oIj {5P}vL!>", objectArray0); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.replaceFirst("'l+&r7", "line.separator"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       int int0 = (-3301); [EOL]       StringBuilder stringBuilder0 = null; [EOL]       try { [EOL]         stringBuilder0 = new StringBuilder((-3301)); [EOL]         fail("Expecting exception: NegativeArraySizeException"); [EOL]        [EOL]       } catch(NegativeArraySizeException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.daemon(false); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Boolean boolean0 = basicThreadFactory0.getDaemonFlag(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       boolean[] booleanArray1 = new boolean[9]; [EOL]       compareToBuilder0.append(booleanArray0, booleanArray1); [EOL]       compareToBuilder0.append('P', 'j'); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       boolean boolean5 = StringUtils.equals(charSequenceArray0[1], (CharSequence) ""); [EOL]        [EOL]       String string4 = StringUtils.stripAccents(""); [EOL]       assertTrue(string4.equals((Object)string0)); [EOL]       assertTrue(string4.equals((Object)string1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, ""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       String string1 = ""; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(stringBuffer0, 3, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson("Kr^K5)xi3M!@H]nX\"'Z"); [EOL]       assertEquals("Kr^K5)xi3M!@H]nX\"'Z", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 242.8578F; [EOL]       float float0 = IEEE754rUtils.min(floatArray0); [EOL]       assertEquals(242.8578F, float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]       assertEquals(114, strBuilder0.length()); [EOL]       assertEquals(114, strBuilder1.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]       assertEquals(114, strBuilder0.length()); [EOL]       assertEquals(114, strBuilder1.length()); [EOL]       assertEquals(114, strBuilder2.length()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals(2, charBuffer0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       Buffer buffer0 = charBuffer0.flip(); [EOL]       assertEquals(0, charBuffer0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(114, strBuilder0.length()); [EOL]       assertEquals(0, charBuffer0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertEquals(114, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) 104); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]       assertEquals(117, strBuilder1.length()); [EOL]       assertEquals(117, strBuilder3.length()); [EOL]        [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendWithSeparators((Iterable<?>) treeSet0, "hZ3CNnc|]e"); [EOL]       assertEquals(117, strBuilder4.length()); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]       assertEquals(117, strBuilder1.length()); [EOL]       assertEquals(117, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.ensureCapacity(104); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]       assertEquals(117, strBuilder5.length()); [EOL]       assertEquals(117, strBuilder1.length()); [EOL]       assertEquals(117, strBuilder3.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]       assertEquals(117, strBuilder1.length()); [EOL]       assertEquals(117, strBuilder6.length()); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]       assertEquals(120, strBuilder0.length()); [EOL]       assertEquals(120, strBuilder7.length()); [EOL]       assertEquals(2, charArray1.length); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 121, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "$!$](1CnP-5;", 'J'); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       StringBuffer stringBuffer1 = stringBuffer0.append(0); [EOL]       strSubstitutor0.replace(stringBuffer1); [EOL]       assertEquals('J', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]       assertEquals(1, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append((long) 0); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]       assertEquals(1, strBuilder1.length()); [EOL]       assertEquals(1, strBuilder2.length()); [EOL]       assertEquals(1, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln('H'); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]       assertEquals(3, strBuilder2.length()); [EOL]       assertEquals(3, strBuilder3.length()); [EOL]       assertEquals(1, objectArray0.length); [EOL]        [EOL]       Object[] objectArray1 = new Object[0]; [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendAll(objectArray1); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]       assertEquals(3, strBuilder4.length()); [EOL]       assertEquals(1, objectArray0.length); [EOL]       assertEquals(0, objectArray1.length); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteCharAt(0); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder1.length()); [EOL]       assertEquals(2, strBuilder4.length()); [EOL]       assertEquals(2, strBuilder5.length()); [EOL]       assertEquals(1, objectArray0.length); [EOL]       assertEquals(0, objectArray1.length); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.setLength(0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder6.length()); [EOL]       assertEquals(1, objectArray0.length); [EOL]        [EOL]       int int0 = 2; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2, (double) 2); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       Buffer buffer0 = charBuffer0.flip(); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) 104); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendWithSeparators((Iterable<?>) treeSet0, "hZ3CNnc|]e"); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.ensureCapacity(104); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 121, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1354); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setQuoteMatcher(strMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append('E'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.charAt(2193); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2193 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnoNullElements()  throws Throwable  { [EOL]       SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3]; [EOL]       SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(); [EOL]       sQLTimeoutExceptionArray0[0] = sQLTimeoutException0; [EOL]       sQLTimeoutExceptionArray0[1] = sQLTimeoutException0; [EOL]       sQLTimeoutExceptionArray0[2] = sQLTimeoutExceptionArray0[0]; [EOL]       SQLTimeoutException[] sQLTimeoutExceptionArray1 = Validate.noNullElements(sQLTimeoutExceptionArray0, "@y^t]#1`x&", (Object[]) sQLTimeoutExceptionArray0); [EOL]       assertSame(sQLTimeoutExceptionArray0, sQLTimeoutExceptionArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "e~/aXjk(\"-1QzZxGM", hashMap0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("2g"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       int int0 = (-1287); [EOL]       char[] charArray0 = new char[7]; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher("2g"); [EOL]        [EOL]       boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       charArray0[1] = '='; [EOL]       charArray0[2] = '$'; [EOL]       charArray0[3] = 'W'; [EOL]       charArray0[4] = 'X'; [EOL]       charArray0[5] = 'j'; [EOL]       charArray0[6] = 'Q'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars((-1287), (-1287), charArray0, (-1287)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1287 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("."); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       Locale locale0 = Locale.SIMPLIFIED_CHINESE; [EOL]        [EOL]       String string0 = StringUtils.upperCase("", locale0); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 5); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "", 236, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isEmpty(""); [EOL]        [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       assertFalse(linkedList0.contains("")); [EOL]        [EOL]       Iterator<String> iterator0 = linkedList0.descendingIterator(); [EOL]       assertFalse(linkedList0.contains("")); [EOL]        [EOL]       String string1 = StringUtils.join(iterator0, '+'); [EOL]       assertFalse(linkedList0.contains("")); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsNone((CharSequence) "", ""); [EOL]        [EOL]       String string2 = StringUtils.join((float[]) null, '+'); [EOL]        [EOL]       String string3 = StringUtils.upperCase("iCQh"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '+'; [EOL]       charArray0[1] = '\"'; [EOL]       boolean boolean2 = StringUtils.containsNone((CharSequence) "ICQH", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("w+Pf>Zb"); [EOL]        [EOL]       Locale locale1 = Locale.TRADITIONAL_CHINESE; [EOL]        [EOL]       boolean boolean3 = locale1.hasExtensions(); [EOL]        [EOL]       String string4 = StringUtils.lowerCase((String) null, locale1); [EOL]        [EOL]       boolean boolean4 = StringUtils.isNumeric((CharSequence) null); [EOL]        [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short)0; [EOL]       String string5 = StringUtils.join(shortArray0, '\"'); [EOL]        [EOL]       String string6 = StringUtils.substringAfter("", "*="); [EOL]        [EOL]       boolean boolean5 = StringUtils.containsIgnoreCase("*=", (CharSequence) null); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = new long[1]; [EOL]       longArray0[0] = 1467L; [EOL]       long[] longArray1 = ArrayUtils.removeElement(longArray0, 1467L); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSupported()  throws Throwable  { [EOL]       boolean boolean0 = CharEncoding.isSupported("UTF-16"); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.setSizeEndText("AEhzPmLst|m|:e7J{Z"); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(706); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder0.midString(0, 34); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNewLineText(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       int int0 = 102; [EOL]       StrBuilder strBuilder2 = new StrBuilder(102); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(""); [EOL]       assertTrue(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append("", (Object[]) null); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]       assertTrue(strBuilder4.isEmpty()); [EOL]        [EOL]       char char0 = 'q'; [EOL]       StrBuilder strBuilder5 = strBuilder0.deleteAll('q'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder5.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.append("", 1364, 102); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testparseDate()  throws Throwable  { [EOL]       Locale locale0 = Locale.US; [EOL]       String[] stringArray0 = new String[4]; [EOL]       stringArray0[0] = "% "; [EOL]       Date date0 = DateUtils.parseDateStrictly("% ", locale0, stringArray0); [EOL]       long long0 = DateUtils.getFragmentInMilliseconds(date0, 5); [EOL]       assertEquals(73281320L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       booleanArray0[0] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0); [EOL]       assertEquals('1', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1354); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setQuoteMatcher(strMatcher0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append('E'); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]       assertEquals(1, strBuilder1.length()); [EOL]       assertEquals(1, strBuilder2.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.charAt(2193); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2193 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisStartedBy()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-43)); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-2081), (-1)).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.is((Object) integer0, comparator0); [EOL]       boolean boolean0 = range0.isStartedBy(integer0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, (-317L)); [EOL]       char[] charArray0 = new char[2]; [EOL]       compareToBuilder1.append(charArray0, charArray0); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRawMessage()  throws Throwable  { [EOL]       ContextedException contextedException0 = new ContextedException(); [EOL]       String string0 = contextedException0.getRawMessage(); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       byte byte0 = ObjectUtils.CONST_BYTE(127); [EOL]       assertEquals((byte)127, byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       compareToBuilder0.append((byte[]) null, byteArray0); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1)); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, comparator0); [EOL]       boolean boolean0 = range0.isEndedBy((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(0, 2004, 3923); [EOL]       assertEquals(0.51083356F, fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]        [EOL]       standardToStringStyle0.setArrayEnd((String) null); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       Integer integer0 = new Integer(10); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append((Object) integer0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'U'; [EOL]       charArray0[1] = 'C'; [EOL]       charArray0[2] = 'r'; [EOL]       charArray0[3] = 'g'; [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'p'; [EOL]       charArray0[6] = '('; [EOL]       charArray0[7] = 'P'; [EOL]       charArray0[8] = '@'; [EOL]       StringBuilder stringBuilder2 = stringBuilder1.append(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder3 = stringBuilder2.insert(10, (float) 10); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.append(stringBuilder3, 10, 10); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.toBoolean(3832); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryBeMsb0ToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       booleanArray0[5] = true; [EOL]       booleanArray0[7] = true; [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, (int) (short)0); [EOL]       assertEquals('a', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[3]; [EOL]       shortArray0[2] = (short)1085; [EOL]       int int0 = ArrayUtils.indexOf(shortArray0, (short)1085, (int) (short)0); [EOL]       assertEquals(2, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       String string0 = DateFormatUtils.format(0L, ".", (TimeZone) null); [EOL]       assertEquals(".", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = new StrBuilder("0rn@[CM"); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder8.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder9.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("lg?3caGG41[$\"tg!|"); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, (String) null, true); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Boolean boolean0 = basicThreadFactory0.getDaemonFlag(); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) integer0); [EOL]       int int0 = pair0.compareTo(pair0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       String string0 = WordUtils.capitalizeFully("C"); [EOL]       assertEquals("C", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       booleanArray0[0] = true; [EOL]       boolean[] booleanArray1 = new boolean[5]; [EOL]       compareToBuilder0.append(booleanArray0, booleanArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       double[] doubleArray0 = new double[4]; [EOL]       double[] doubleArray1 = new double[7]; [EOL]       compareToBuilder0.append(doubleArray0, doubleArray1); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       compareToBuilder0.append(objectArray0, objectArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-811), (-811)); [EOL]       Object[] objectArray0 = new Object[0]; [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(objectArray0); [EOL]       assertEquals((-811), (int)hashCodeBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-620)); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(1L); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.markSupported(); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll(iterator0); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals((Object) null); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteAll('J'); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.append(1L); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0); [EOL]        [EOL]       Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder5); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write("?NYmW7afS>c]@v"); [EOL]        [EOL]       boolean boolean2 = strBuilder5.isEmpty(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteFirst('\\'); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendWithSeparators(iterator0, "u"); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(strBuilder2); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.append(1.0F); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.append(stringBuffer0); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.subSequence((-900), (-620)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -900 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-466)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       objectArray0[1] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       StrBuilder strBuilder1 = strBuilder0.append("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", objectArray0); [EOL]       assertEquals(114, strBuilder0.capacity()); [EOL]       assertEquals(114, strBuilder1.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       int int0 = ArrayUtils.indexOf(charArray0, 'J', (int) (short) (-1)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       String string0 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string1 = strBuilder_StrBuilderTokenizer0.nextToken(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((Object) strBuilder_StrBuilderTokenizer1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder2 = strBuilder1.append((char[]) null, 7, 7); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendSeparator("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-2599), (float) (-2599)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -2599 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       long long0 = stopWatch0.getSplitTime(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('\'', '~'); [EOL]       CharRange charRange1 = CharRange.isNot('M'); [EOL]       boolean boolean0 = charRange1.contains(charRange0); [EOL]       assertEquals('M', charRange1.getEnd()); [EOL]       assertEquals('~', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(0, 0, 0); [EOL]       Date date0 = DateUtils.setDays(mockDate0, 0); [EOL]       mockDate0.setTime(0); [EOL]       boolean boolean0 = DateUtils.isSameInstant(date0, (Date) mockDate0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, ""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       String string1 = ""; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(stringBuffer0, 3, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "", byteArray0); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.remove(" vs ", 'h'); [EOL]        [EOL]       String string1 = StringUtils.removePattern(" vs ", " vs "); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isEmpty(" vs "); [EOL]        [EOL]       String string2 = StringUtils.replace("`4A!K;B`", "", " vs ", (-1)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0));B`", string2); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumeric(""); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumericSpace(" vs "); [EOL]        [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "`4A!K;B`", (CharSequence) ""); [EOL]        [EOL]       int int1 = StringUtils.indexOfDifference((CharSequence) " vs ", (CharSequence) "`4A!K;B`"); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'h'; [EOL]       charArray0[2] = 'h'; [EOL]       charArray0[3] = 'h'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0); [EOL]        [EOL]       CharBuffer charBuffer1 = StringUtils.defaultIfBlank((CharBuffer) null, charBuffer0); [EOL]        [EOL]       String string3 = StringUtils.trimToNull(" vs "); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       String string4 = StringUtils.replaceChars("vs", "(0AV$B", "vd*+g.n+9W"); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertTrue(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) "vs", 0, (-1)); [EOL]        [EOL]       String string5 = StringUtils.center("", 121, 'h'); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]        [EOL]       String string6 = StringUtils.substringAfter("\n", "?O<Ssm#PEN1-^/bq"); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertTrue(string6.equals((Object)string1)); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]        [EOL]       boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "vs"); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte)53; [EOL]       byteArray0[1] = (byte) (-94); [EOL]       byteArray0[2] = (byte)11; [EOL]       byteArray0[3] = (byte)64; [EOL]       String string7 = StringUtils.join(byteArray0, 'N', 105, (-4848)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertTrue(string7.equals((Object)string1)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string2)); [EOL]       assertFalse(string7.equals((Object)string0)); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("$W8BC)fVnoVM,sZ]"); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, "hJd3~IkyQU3Lzn0Z^Hs"); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       float[] floatArray0 = new float[1]; [EOL]       float[] floatArray1 = new float[3]; [EOL]       float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1); [EOL]       assertEquals(0, floatArray2.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisTrue()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       Validate.isTrue(true, "W>^;`wEmj@H;Ur", objectArray0); [EOL]       assertEquals(2, objectArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcloneIfPossible()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-3175)); [EOL]       String string0 = ObjectUtils.toString((Object) strBuilder0); [EOL]       Object object0 = ObjectUtils.cloneIfPossible((Object) string0); [EOL]       assertNotNull(object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("IPz$I2G^e"); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("IPz$I2G^e", (short[]) null, false); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(); [EOL]       strTokenizer0.previousToken(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlookup()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       hashMap0.put("", ""); [EOL]       String string0 = strLookup0.lookup(""); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       char char0 = 'j'; [EOL]       Iterable<Object> iterable0 = null; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) null, "b0}RRkoCl[.="); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('j', 815); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       char char1 = '8'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendSeparator('j', '8'); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]       assertEquals(1, strBuilder1.length()); [EOL]       assertEquals(1, strBuilder2.length()); [EOL]        [EOL]       int int1 = 516; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.insert(516, false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 516 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null, "g,SXP", "w#4xU.0t'5b#", (String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", (-1)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys();2|T ")); [EOL]       assertTrue(set0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0);2|T ")); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertTrue(set0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{"); [EOL]       toStringStyle0.appendEnd(stringBuffer0, standardToStringStyle0); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetMatchingAccessibleMethod()  throws Throwable  { [EOL]       Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5); [EOL]       Class<String> class0 = String.class; [EOL]       Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getChars", classArray0); [EOL]       assertNull(method0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.setSizeEndText("AEhzPmLst|m|:e7J{Z"); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1580); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       char[] charArray1 = strBuilder0.getChars(charArray0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, charArray0.length); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       short[] shortArray0 = new short[4]; [EOL]       short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0); [EOL]       assertEquals(0, shortArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[0] = object0; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) null; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) strBuilder0; [EOL]       objectArray0[5] = (Object) strBuilder0; [EOL]       objectArray0[6] = (Object) null; [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "length must be valid"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendWithSeparators(objectArray0, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((CharSequence) strBuilder0, 31, 31); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(1L); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       strBuilder0.size = 0; [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNewLineText("h)s;1V;.*L`~Xja^");1V;.*L`~Xja^", strBuilder0.getNewLineText()); [EOL]       assertEquals(32, strBuilder0.capacity());1V;.*L`~Xja^", strBuilder1.getNewLineText()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(37); [EOL]       hashCodeBuilder1.append((byte)0); [EOL]       assertEquals(0, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       Integer integer0 = BooleanUtils.toIntegerObject(true); [EOL]       Integer integer1 = BooleanUtils.toIntegerObject(true, integer0, integer0); [EOL]       assertEquals(1, (int)integer1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("5T]_m"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-689.841F)); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(0L); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       long long1 = strBuilder_StrBuilderReader0.skip(310L); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(1.0); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append(stringBuffer0, (-611), (-713)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("FiHbfxLjq4Y/Lm\""); [EOL]        [EOL]       int int0 = 988; [EOL]       String string0 = strBuilder0.midString(2, 988); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(1855); [EOL]       assertEquals("", stringWriter0.toString()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.delete(2, 88); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       assertEquals("", stringWriter0.toString()); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.clear(); [EOL]        [EOL]       char char0 = '\''; [EOL]       StringWriter stringWriter1 = stringWriter0.append('\''); [EOL]       assertEquals("'", stringWriter0.toString()); [EOL]       assertEquals("'", stringWriter1.toString()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(stringBuffer0, 109, (-1319)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("", comparator0); [EOL]       boolean boolean0 = range0.equals(""); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testuncapitalize()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       String string0 = WordUtils.uncapitalize("Y>:3]{V_{+6", charArray0); [EOL]       assertEquals("Y>:3]{V_{+6", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('o'); [EOL]       char char0 = charRange0.getEnd(); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       StringUtils.remove("null comparator", '.'); [EOL]       StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]       StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]       char[] charArray0 = new char[0]; [EOL]       StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]       StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]       StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator"); [EOL]       StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]       StringUtils.replacePattern("", "", ""); [EOL]       boolean boolean0 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]       StringUtils.deleteWhitespace("null comparator"); [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "null comparator", (CharSequence) null); [EOL]       assertFalse(boolean1 == boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertEquals(7, strBuilder0.length()); [EOL]       assertEquals(7, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertEquals(13, strBuilder0.length()); [EOL]       assertEquals(13, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(65, strBuilder0.length()); [EOL]       assertEquals(65, strBuilder1.length()); [EOL]       assertEquals(65, strBuilder3.length()); [EOL]       assertEquals(65, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.clear(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder2.length()); [EOL]       assertEquals(0, strBuilder5.length()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteAll('#'); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]       assertEquals(0, strBuilder4.length()); [EOL]       assertEquals(0, strBuilder6.length()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder7.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder8.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setSummaryObjectEndText(""); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectEndText(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testregionMatches()  throws Throwable  { [EOL]       char[] charArray0 = new char[23]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       boolean boolean0 = CharSequenceUtils.regionMatches("Z", false, (-1), charBuffer0, 140, (-1)); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFragment()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(13, 13, 13, 13, 13); [EOL]       long long0 = DateUtils.getFragmentInDays((Date) mockDate0, 13); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       String string0 = "K6f"; [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.delete(0, 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       String string1 = "]*qbQ%"; [EOL]       StrBuilder strBuilder2 = strBuilder1.setNewLineText("]*qbQ%"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendAll(iterator0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.appendSeparator("]*qbQ%", (-1079)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendln('\''); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.append(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder0, (-286), 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToInt()  throws Throwable  { [EOL]       int int0 = Conversion.hexDigitMsb0ToInt('3'); [EOL]       assertEquals(12, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       int int0 = 107; [EOL]       StrBuilder strBuilder0 = new StrBuilder(107); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       char char0 = 'w'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('w'); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(""); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int2 = strBuilder0.indexOf(strMatcher0, (-2284)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(289); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.deleteCharAt(1027); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1027 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder8.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder9.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder5.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, (-2133), (-915)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.trim(); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '$'; [EOL]       charArray0[1] = '\\'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendSeparator('#', 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith("Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendSeparator("Invalid startIndex: ", "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.reverse(", Length: 0"); [EOL]        [EOL]       String string1 = StringUtils.defaultString("N!c%7%Qc399PR"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.equals((CharSequence) "N!c%7%Qc399PR", (CharSequence) null); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) "0 :htgneL ,"; [EOL]       charSequenceArray0[1] = null; [EOL]       charSequenceArray0[2] = (CharSequence) "0 :htgneL ,"; [EOL]       charSequenceArray0[3] = (CharSequence) "N!c%7%Qc399PR"; [EOL]       charSequenceArray0[4] = (CharSequence) "N!c%7%Qc399PR"; [EOL]       charSequenceArray0[5] = (CharSequence) "0 :htgneL ,"; [EOL]       int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("0 :htgneL ,", ">D<O)oa1X?)", (-924)); [EOL]        [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]        [EOL]       Iterator<String> iterator0 = linkedList0.descendingIterator(); [EOL]        [EOL]       String string2 = StringUtils.join(iterator0, "N!c%7%Qc399PR"); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       float[] floatArray0 = new float[5]; [EOL]       float[] floatArray1 = new float[5]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray1); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[0]; [EOL]       Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = 0; [EOL]       String string0 = strBuilder0.midString(0, 0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       LinkedList<Object> linkedList0 = new LinkedList<Object>(); [EOL]        [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       linkedList0.sort(comparator0); [EOL]        [EOL]       ListIterator<Object> listIterator0 = linkedList0.listIterator(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) listIterator0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       int int1 = 2; [EOL]       boolean boolean0 = linkedList0.add((Object) strBuilder0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.setCharAt(2, 'l'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToShortArray()  throws Throwable  { [EOL]       short[] shortArray0 = new short[7]; [EOL]       short[] shortArray1 = Conversion.intToShortArray(0, 0, shortArray0, (short) (-3102), 0); [EOL]       assertSame(shortArray1, shortArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       strTokenizer0.reset(); [EOL]       assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true); [EOL]       assertNull(booleanArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       char char0 = charRange0.getStart(); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int[] intArray0 = new int[1]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(intArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       char[] charArray1 = new char[0]; [EOL]       compareToBuilder0.append(charArray0, charArray1); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testround()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1891), (-1891), (-1891), (-1891), (-1891)); [EOL]       Date date0 = DateUtils.round((Object) mockDate0, 0); [EOL]       assertEquals("Mon Jan 01 00:00:00 GMT 155", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.replaceChars("', has a length less than 2", 'E', 'E'); [EOL]        [EOL]       String string1 = StringUtils.replace("', has a length less than 2", "', has a length less than 2", "', has a length less than 2"); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumericSpace("', has a length less than 2"); [EOL]        [EOL]       String string2 = StringUtils.difference("', has a length less than 2", "', has a length less than 2"); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = "', has a length less than 2"; [EOL]       String string4 = StringUtils.removeStart("", "', has a length less than 2"); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertTrue(string4.equals((Object)string2)); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2"); [EOL]        [EOL]       String string5 = StringUtils.substringAfterLast("', has a length less than 2", "', has a length less than 2"); [EOL]       assertTrue(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("', has a length less than 2"); [EOL]        [EOL]       int int1 = (-76); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("x", (-76), (-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongToHex()  throws Throwable  { [EOL]       String string0 = Conversion.longToHex((byte) (-23), 0, (String) null, (-1), 0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(); [EOL]       strTokenizer0.getContent(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup.MapStrLookup<String> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<String>(hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, "6", "6", '<'); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("6"); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0, 1, 0); [EOL]       assertEquals('<', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("AEhzPmLst|m|:e7J{Z"); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendFieldSeparator(stringBuffer0); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       assertTrue(equalsBuilder0.isEquals()); [EOL]        [EOL]       double[] doubleArray0 = new double[6]; [EOL]       doubleArray0[0] = (-2503.13); [EOL]       doubleArray0[1] = 0.0; [EOL]       doubleArray0[2] = 0.0; [EOL]       doubleArray0[3] = 714.872934; [EOL]       doubleArray0[4] = 0.0; [EOL]       doubleArray0[5] = 1.5; [EOL]       double[] doubleArray1 = new double[5]; [EOL]       doubleArray1[0] = 0.0; [EOL]       doubleArray1[1] = (-2424.3); [EOL]       doubleArray1[2] = 714.872934; [EOL]       doubleArray1[3] = 0.0; [EOL]       doubleArray1[4] = (-1.0); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray1); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(true); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-1432.076F), (-1432.076F)); [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append('T', 'c'); [EOL]       equalsBuilder5.append(false, false); [EOL]       assertFalse(equalsBuilder3.isEquals()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       MutableTriple<Integer, String, Integer> mutableTriple0 = MutableTriple.of(integer0, "(Z`wGbDj=fZ0H", integer0); [EOL]       Integer integer1 = mutableTriple0.getLeft(); [EOL]       assertEquals(0, (int)integer1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testaddContextValue()  throws Throwable  { [EOL]       ContextedException contextedException0 = new ContextedException(); [EOL]       ContextedException contextedException1 = contextedException0.addContextValue("org.apache.commons.lang3.exception.ContextedException", "org.apache.commons.lang3.exception.ContextedException"); [EOL]       String string0 = contextedException1.getMessage(); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Formatter formatter0 = new Formatter(); [EOL]       Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, (-2001), (-2001), (-2212), 'H'); [EOL]       assertSame(formatter1, formatter0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string1 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0); [EOL]       assertEquals(7, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase(charSequenceArray0[2], ""); [EOL]       assertEquals(7, charSequenceArray0.length); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf(charSequenceArray0[5], charSequenceArray0[3]); [EOL]       assertEquals(7, charSequenceArray0.length); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("tA$dgqg-e4)j", '\"'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       int[] intArray0 = new int[3]; [EOL]       intArray0[0] = 10; [EOL]       intArray0[1] = 2976; [EOL]       intArray0[2] = (int) '\"'; [EOL]       String string2 = StringUtils.join(intArray0, 'C'); [EOL]       assertEquals(3, intArray0.length); [EOL]        [EOL]       long[] longArray0 = new long[0]; [EOL]       String string3 = StringUtils.join(longArray0, '3'); [EOL]       assertEquals(0, longArray0.length); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.replacePattern("", (String) null, "Threshold must not be negative"); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       LinkedList<MockSimpleDateFormat> linkedList0 = ObjectUtils.defaultIfNull((LinkedList<MockSimpleDateFormat>) null, (LinkedList<MockSimpleDateFormat>) null); [EOL]       assertNull(linkedList0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststringMatcher()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher((String) null); [EOL]       assertNotNull(strMatcher0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       short[] shortArray0 = new short[4]; [EOL]       short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0); [EOL]       assertEquals(4, shortArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("8z/t]?%'4"); [EOL]       Class<MockThrowable> class0 = MockThrowable.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<?>) class0, 1549); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetComparator()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Integer integer1 = new Integer(0); [EOL]       Range<Integer> range0 = Range.is(integer0); [EOL]       range0.getComparator(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(47, 0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.is((Object) range0, comparator0); [EOL]       Object object0 = range1.getMaximum(); [EOL]       boolean boolean0 = range1.isStartedBy(object0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       Integer[] integerArray0 = new Integer[1]; [EOL]       Integer integer0 = new Integer(116); [EOL]        [EOL]       integerArray0[0] = integer0; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll(integerArray0); [EOL]       assertEquals(28, strBuilder0.size()); [EOL]       assertEquals(28, strBuilder1.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteFirst(strMatcher0); [EOL]       assertEquals(28, strBuilder0.size()); [EOL]       assertEquals(28, strBuilder2.size()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter(); [EOL]       assertEquals(28, strBuilder0.size()); [EOL]       assertEquals(28, strBuilder2.size()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(116); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'H'; [EOL]       charArray0[1] = 'O'; [EOL]       charArray0[2] = 'Y'; [EOL]       charArray0[3] = 'k'; [EOL]       strBuilder0.buffer = charArray0; [EOL]       assertEquals(29, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append(""); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder3.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-113), 1, 2, (-451), 3725); [EOL]       Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1); [EOL]       calendar0.setLenient(false); [EOL]       DateUtils.ceiling(calendar0, 0); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=8,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       short short0 = NumberUtils.max((short) (-561), (short) (-561), (short) (-561)); [EOL]       assertEquals((short) (-561), short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendNewLine(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append((Object) strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder4 = new StrBuilder((String) null); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.deleteFirst(strMatcher0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testready()  throws Throwable  { [EOL]       String string0 = "hZ3CNnc|]e"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.minimizeCapacity(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append((long) 104); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.ensureCapacity(104); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.getTokenList(); [EOL]        [EOL]       List<String> list1 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]        [EOL]       StrBuilder strBuilder6 = new StrBuilder(); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]        [EOL]       int int2 = 101; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append("/t@?VM", (-775), (-3316)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       float float0 = mutableInt0.floatValue(); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetShortCanonicalName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getShortCanonicalName((Object) null, (String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Double double0 = new Double(4681.97); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(127); [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) double0; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, (String) null, objectArray0); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbyteArrayToShort()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[2]; [EOL]       short short0 = Conversion.byteArrayToShort(byteArray0, (byte)51, (byte)51, 0, 0); [EOL]       assertEquals((short)51, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('2'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       strBuilder0.hashCode(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int1 = strBuilder0.lastIndexOf('', 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.stripStart("XF", "5i;(d$6_s%^;sG2`"); [EOL]        [EOL]       String string1 = StringUtils.defaultString("5i;(d$6_s%^;sG2`"); [EOL]       assertFalse(string1.equals((Object)string0));(d$6_s%^;sG2`", string1); [EOL]        [EOL]       long[] longArray0 = new long[7]; [EOL]       longArray0[0] = 1790L; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[2] = 0L; [EOL]       longArray0[3] = 996L; [EOL]       longArray0[4] = (-3436L); [EOL]       longArray0[5] = (-955L); [EOL]       longArray0[6] = (-1154L); [EOL]       String string2 = StringUtils.join(longArray0, 'y', Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testand()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[17]; [EOL]       boolean boolean0 = BooleanUtils.and(booleanArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setArraySeparator((String) null); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaLower('a'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       TreeSet<DecimalFormatSymbols> treeSet0 = new TreeSet<DecimalFormatSymbols>(); [EOL]       TreeSet<DecimalFormatSymbols> treeSet1 = ObjectUtils.clone(treeSet0); [EOL]       assertTrue(treeSet1.equals((Object)treeSet0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.trim(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder6 = strBuilder4.append(6); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("false"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testinitials()  throws Throwable  { [EOL]       String string0 = WordUtils.initials("", (char[]) null); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, (String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       Writer writer0 = strBuilder2.asWriter(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.trim(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder5 = strBuilder3.append(6); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder5.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       charRange0.iterator(); [EOL]       assertEquals('6', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("length must be valid"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, '_'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(".["); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append(strBuilder2, 0, 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '_'; [EOL]       charArray0[1] = '_'; [EOL]       charArray0[2] = '_'; [EOL]       charArray0[3] = '_'; [EOL]       charArray0[4] = '_'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.substring(915, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(767); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       Class<String> class0 = String.class; [EOL]       ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0); [EOL]        [EOL]       Class<StrBuilder> class1 = StrBuilder.class; [EOL]       ServiceLoader<StrBuilder> serviceLoader1 = ServiceLoader.loadInstalled(class1); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) serviceLoader0, "d"); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       int int0 = strBuilder1.capacity(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("$W8BC)fVnoVM,sZ]"); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, "hJd3~IkyQU3Lzn0Z^Hs"); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((-5438)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("%.uP-XC6m9"); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(strBuilder0); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0); [EOL]       assertEquals(21, strBuilder0.size()); [EOL]       assertEquals(21, strBuilder1.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.removeStart(":lRC9;Q#I/x!xtF", ":lRC9;Q#I/x!xtF"); [EOL]        [EOL]       String string1 = StringUtils.chomp("2", ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "2"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "2"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "2"; [EOL]       charSequenceArray0[5] = (CharSequence) "2"; [EOL]       int int1 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]       assertEquals(6, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[2]); [EOL]       assertEquals(6, charSequenceArray0.length); [EOL]        [EOL]       String string2 = StringUtils.removeEnd("2", (String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "2", "4H*M`VvBKe5Oj^M&g;"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(0, 798); [EOL]       int int0 = fraction0.getNumerator(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       StringBuffer stringBuffer1 = stringBuffer0.reverse(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("", stringBuffer1.toString()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0); [EOL]        [EOL]       charArray0[0] = '3'; [EOL]       StrBuilder strBuilder2 = strBuilder0.append(3986.49F); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Object[]) null, "rXB\u0003WVlNWF<}"); [EOL]        [EOL]       boolean boolean0 = strBuilder3.contains((StrMatcher) strMatcher_NoMatcher0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(""); [EOL]        [EOL]       IntStream intStream0 = strBuilder2.codePoints(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.appendln(stringBuffer0); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append(5305); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln('3'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0, (-2104)); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder7.appendln(""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       String string1 = locale0.getDisplayVariant(); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert(1, charArray0, 31, 1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid offset: 31 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]       assertEquals(2, strBuilder0.size()); [EOL]       assertEquals(2, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]       assertEquals(3, strBuilder0.size()); [EOL]       assertEquals(3, strBuilder1.size()); [EOL]       assertEquals(3, strBuilder3.size()); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.clear(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder4.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       String string0 = ")[C$#_(U9,]+>eub7]}"; [EOL]       StrBuilder strBuilder5 = strBuilder0.appendln(false); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder5.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.replaceAll(strMatcher0, ")[C$#_(U9,]+>eub7]}"); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder4.size()); [EOL]       assertEquals(6, strBuilder6.size()); [EOL]        [EOL]       char char0 = 'c'; [EOL]       int int3 = strBuilder0.lastIndexOf('c', 7); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder2.appendSeparator("Solaris"); [EOL]       assertEquals(13, strBuilder0.size()); [EOL]       assertEquals(13, strBuilder2.size()); [EOL]       assertEquals(13, strBuilder7.size()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter(); [EOL]       assertEquals(13, strBuilder0.size()); [EOL]       assertEquals(13, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendFixedWidthPadRight((Object) "java.vm.specification.version", 81, '0'); [EOL]       assertEquals(94, strBuilder8.size()); [EOL]       assertEquals(94, strBuilder0.size()); [EOL]       assertEquals(94, strBuilder4.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContextEntries()  throws Throwable  { [EOL]       DefaultExceptionContext defaultExceptionContext0 = new DefaultExceptionContext(); [EOL]       List<Pair<String, Object>> list0 = defaultExceptionContext0.getContextEntries(); [EOL]       assertTrue(list0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testwrite()  throws Throwable  { [EOL]       int int0 = (-4136); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-4136)); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, (-4136)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((Object) "_D]5>#kw<b6p@SuO"); [EOL]        [EOL]       Writer writer0 = strBuilder1.asWriter(); [EOL]       assertNotNull(writer0); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.replaceAll("", ""); [EOL]        [EOL]       String string0 = strBuilder2.midString((-4136), (-4136)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(true); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.substring((-730), 938); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -730 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", (-1)); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys();2|T ")); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0);2|T ")); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisValidAnnotationMemberType()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       boolean boolean0 = AnnotationUtils.isValidAnnotationMemberType(class0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-3225.013)); [EOL]       Fraction fraction1 = fraction0.TWO_FIFTHS.subtract(fraction0); [EOL]       assertEquals((-3225013), fraction0.getNumerator()); [EOL]       assertEquals(3225413, fraction1.getNumerator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFormattedExceptionMessage()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException("", (Throwable) null, (ExceptionContext) null); [EOL]       String string0 = contextedRuntimeException0.getFormattedExceptionMessage(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeEndText(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append((long) 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln('H'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       Object[] objectArray1 = new Object[0]; [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendAll(objectArray1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteCharAt(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.setLength(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       int int0 = 2; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2, (double) 2); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetWrappedFactory()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       ThreadFactory threadFactory0 = basicThreadFactory0.getWrappedFactory(); [EOL]       assertNotNull(threadFactory0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       strTokenizer0.setTrimmerMatcher((StrMatcher) null); [EOL]       assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-1451)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       Range<String> range1 = Range.between("!R3q", ""); [EOL]       boolean boolean0 = range0.isOverlappedBy(range1); [EOL]       assertFalse(range1.equals((Object)range0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPackageCanonicalName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageCanonicalName("Double"); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       char[] charArray0 = new char[4]; [EOL]       Boolean boolean0 = Boolean.valueOf("Cannot get the toString of a null identity"); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.append(stringBuffer0, "Cannot get the toString of a null identity", charArray0, boolean0); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(718); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((long) 718); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter"; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter", objectArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendSeparator('d', 'Z'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = new StrBuilder(); [EOL]       assertTrue(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]       assertTrue(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       strBuilder4.size = 55; [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.toString(); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_QUARTERS; [EOL]       Fraction fraction1 = fraction0.THREE_QUARTERS.negate(); [EOL]       Fraction fraction2 = fraction1.reduce(); [EOL]       assertEquals((-0.75), fraction2.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(true, true); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.minimizeCapacity(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append('U'); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]       assertEquals(1, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.setTrimmerMatcher(strMatcher_NoMatcher0); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       String string0 = strBuilder0.leftString(2026); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendFixedWidthPadRight((Object) strBuilder_StrBuilderTokenizer1, 2026, '('); [EOL]       assertEquals(2027, strBuilder0.size()); [EOL]       assertEquals(2027, strBuilder1.size()); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]       assertEquals(2027, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.insert(2026, 0.0F); [EOL]       assertEquals(2030, strBuilder0.size()); [EOL]       assertEquals(2030, strBuilder1.size()); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]       assertEquals(2030, strBuilder4.size()); [EOL]       assertEquals(2030, strBuilder5.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.append(0L); [EOL]       assertEquals(2031, strBuilder0.size()); [EOL]       assertEquals(2031, strBuilder1.size()); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]       assertEquals(2031, strBuilder4.size()); [EOL]       assertEquals(2031, strBuilder6.size()); [EOL]        [EOL]       String string1 = strBuilder_StrBuilderTokenizer0.previousToken(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.setCharAt(97, '+'); [EOL]       assertEquals(2031, strBuilder0.size()); [EOL]       assertEquals(2031, strBuilder1.size()); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]       assertEquals(2031, strBuilder4.size()); [EOL]       assertEquals(2031, strBuilder6.size()); [EOL]       assertEquals(2031, strBuilder7.size()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(2031, strBuilder0.size()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertEquals(2031, strBuilder0.size()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) "java.vendor.url"; [EOL]       objectArray0[1] = (Object) "U"; [EOL]       objectArray0[2] = (Object) strBuilder2; [EOL]       objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[4] = (Object) "U"; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer3 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       objectArray0[5] = (Object) strBuilder_StrBuilderTokenizer3; [EOL]       objectArray0[6] = (Object) strBuilder_StrBuilderTokenizer0; [EOL]       StrBuilder strBuilder8 = strBuilder2.appendln("java.vendor.url", objectArray0); [EOL]       assertEquals(2047, strBuilder0.size()); [EOL]       assertEquals(2047, strBuilder1.size()); [EOL]       assertEquals(2047, strBuilder2.size()); [EOL]       assertEquals(2047, strBuilder8.size()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(" -~*ui'"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder8.appendln(stringBuffer0, (-1229), 2026); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(""); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher_NoMatcher0); [EOL]       String string0 = strTokenizer0.next(); [EOL]        [EOL]       StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('D'); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher(strMatcher_CharMatcher0); [EOL]       assertFalse(strTokenizer1.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetVariablePrefixMatcher()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, "3brcv0rwbm5~9 <#", "3brcv0rwbm5~9 <#", '/'); [EOL]       strSubstitutor0.getVariablePrefixMatcher(); [EOL]       assertEquals('/', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(false); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]       assertEquals(5, strBuilder1.size()); [EOL]        [EOL]       int int0 = 32; [EOL]       int int1 = 8; [EOL]       char[] charArray0 = new char[4]; [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln('}'); [EOL]       assertEquals(7, strBuilder0.size()); [EOL]       assertEquals(7, strBuilder1.size()); [EOL]       assertEquals(7, strBuilder3.size()); [EOL]        [EOL]       int int2 = 0; [EOL]       String string0 = strBuilder3.substring(0); [EOL]       assertEquals(7, strBuilder0.size()); [EOL]       assertEquals(7, strBuilder1.size()); [EOL]       assertEquals(7, strBuilder3.size()); [EOL]        [EOL]       int int3 = strBuilder2.indexOf((StrMatcher) null, 8); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       charArray0[0] = '\"'; [EOL]       charArray0[1] = 'b'; [EOL]       char char0 = 'S'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.validateIndex(8); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 8 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testunicodeEscaped()  throws Throwable  { [EOL]       String string0 = CharUtils.unicodeEscaped('\u0100'); [EOL]       assertEquals("\\u0100", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendStart(stringBuffer0, (Object) null); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testready()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln('h'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteCharAt(0); [EOL]        [EOL]       int int0 = StrBuilder.CAPACITY; [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int1 = strBuilder2.lastIndexOf('b', 0); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]       assertTrue(reader0.ready()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((char[]) null); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.append(strBuilder2, 0, 1103); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testabove()  throws Throwable  { [EOL]       char[] charArray0 = new char[3]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.above('\u0000'); [EOL]       numericEntityEscaper0.translate((CharSequence) charBuffer0, (Writer) stringWriter0); [EOL]       assertEquals("\u0000\u0000\u0000", stringWriter0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((long[]) null); [EOL]       assertEquals(629, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testvalidIndex()  throws Throwable  { [EOL]       String string0 = Validate.validIndex("6cG]>I{L|+BPpl", 0, "6cG]>I{L|+BPpl", (Object[]) null); [EOL]       assertEquals("6cG]>I{L|+BPpl", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlookup()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup.MapStrLookup<String> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<String>(hashMap0); [EOL]       String string0 = strLookup_MapStrLookup0.lookup((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testisAsciiAlphanumeric()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('9'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[1] = 1.0F; [EOL]       int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("", strMatcher0, strMatcher0); [EOL]       strTokenizer0.nextToken(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       String string0 = RandomStringUtils.random(0, "fI"); [EOL]        [EOL]       int int0 = 569; [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = 'I'; [EOL]       charArray0[1] = 'y'; [EOL]       charArray0[2] = '\"'; [EOL]       charArray0[3] = 'f'; [EOL]       charArray0[4] = 'c'; [EOL]       MockRandom mockRandom0 = new MockRandom(0); [EOL]       assertNotNull(mockRandom0); [EOL]        [EOL]       IntStream intStream0 = mockRandom0.ints(0L, 0, 569); [EOL]        [EOL]       LongStream longStream0 = mockRandom0.longs(0L); [EOL]        [EOL]       double double0 = mockRandom0.nextDouble(); [EOL]        [EOL]       double double1 = mockRandom0.nextGaussian(); [EOL]        [EOL]       DoubleStream doubleStream0 = mockRandom0.doubles(); [EOL]        [EOL]       LongStream longStream1 = mockRandom0.longs(0L); [EOL]        [EOL]       float float0 = mockRandom0.nextFloat(); [EOL]        [EOL]       String string1 = RandomStringUtils.random(0, 569, 569, true, true, charArray0, (Random) mockRandom0); [EOL]        [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.random(569, 0, 0, true, true); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0); [EOL]       reflectionToStringBuilder0.toString(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testregionMatches()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[1] = '|'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       boolean boolean0 = CharSequenceUtils.regionMatches(charBuffer0, false, 0, charBuffer0, 1, '|'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]       assertEquals(1, stringArray1.length); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]       assertEquals(1, stringArray2.length); [EOL]        [EOL]       String string2 = StringUtils.substring("", 0, 32); [EOL]        [EOL]       float[] floatArray0 = new float[0]; [EOL]       String string3 = StringUtils.join(floatArray0, 'L'); [EOL]       assertEquals(0, floatArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseShortClassName(); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_THIRD; [EOL]       Fraction fraction1 = fraction0.ZERO.pow(3); [EOL]       assertEquals(0.0, fraction1.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeEcmaScript()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeEcmaScript("+g"); [EOL]       assertEquals("+g", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V"); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf("x,OEdUuh6_<", 0); [EOL]        [EOL]       Locale.Category locale_Category0 = Locale.Category.DISPLAY; [EOL]       Locale.Category locale_Category1 = Locale.Category.FORMAT; [EOL]       EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1); [EOL]       assertFalse(locale_Category0.equals((Object)locale_Category1)); [EOL]       assertFalse(locale_Category1.equals((Object)locale_Category0)); [EOL]        [EOL]       Iterator<Locale.Category> iterator0 = enumSet0.iterator(); [EOL]       assertFalse(locale_Category0.equals((Object)locale_Category1)); [EOL]       assertFalse(locale_Category1.equals((Object)locale_Category0)); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<"); [EOL]       assertFalse(locale_Category0.equals((Object)locale_Category1)); [EOL]       assertFalse(locale_Category1.equals((Object)locale_Category0)); [EOL]        [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder3.toStringBuilder(); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendln(0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder4.equals((Object)strBuilder3)); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder5.equals((Object)strBuilder3)); [EOL]        [EOL]       String string1 = strBuilder0.rightString(5); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder3)); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       StringBuilder stringBuilder1 = strBuilder0.toStringBuilder(); [EOL]       assertFalse(stringBuilder1.equals((Object)stringBuilder0)); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder3)); [EOL]        [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[0] = object0; [EOL]       objectArray0[1] = (Object) stringBuilder1; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0)); [EOL]        [EOL]       objectArray0[2] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       objectArray0[4] = (Object) stringBuffer1; [EOL]       objectArray0[5] = (Object) stringBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1)); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer0)); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer1)); [EOL]        [EOL]       objectArray0[6] = (Object) strBuilder_StrBuilderTokenizer2; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder1.insert((-1), 1L); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       double[] doubleArray0 = new double[4]; [EOL]       double[] doubleArray1 = new double[7]; [EOL]       compareToBuilder0.append(doubleArray0, doubleArray1); [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       compareToBuilder0.append(booleanArray0, booleanArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = "m%v5xStXNflN\"<nkY"; [EOL]       stringArray0[1] = "m%v5xStXNflN\"<nkY"; [EOL]       stringArray0[2] = "m%v5xStXNflN\"<nkY"; [EOL]       stringArray0[3] = "m%v5xStXNflN\"<nkY"; [EOL]       stringArray0[4] = "m%v5xStXNflN\"<nkY"; [EOL]       stringArray0[5] = "m%v5xStXNflN\"<nkY"; [EOL]       stringArray0[6] = "m%v5xStXNflN\"<nkY"; [EOL]       stringArray0[7] = "m%v5xStXNflN\"<nkY"; [EOL]       stringArray0[8] = "m%v5xStXNflN\"<nkY"; [EOL]       String string0 = StringUtils.replaceEach("m%v5xStXNflN\"<nkY", stringArray0, stringArray0); [EOL]        [EOL]       String string1 = StringUtils.stripAccents("m%v5xStXNflN\"<nkY"); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.join((Object[]) stringArray0, ')', 0, (-2433)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "m%v5xStXNflN\"<nkY", (CharSequence) "m%v5xStXNflN\"<nkY", (-2433)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhandleCauseUnchecked()  throws Throwable  { [EOL]       ExecutionException executionException0 = mock(ExecutionException.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Throwable) null).when(executionException0).getCause(); [EOL]       ConcurrentUtils.extractCauseUnchecked(executionException0); [EOL]       ExecutionException executionException1 = new ExecutionException("#0K`4yx[{#", (Throwable) null); [EOL]       StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4]; [EOL]       StackTraceElement stackTraceElement0 = new StackTraceElement("org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder", "org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder", "org.apache.commons.lang3.concurrent.ConcurrentUtils", 0); [EOL]       stackTraceElementArray0[0] = stackTraceElement0; [EOL]       StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "", 0); [EOL]       stackTraceElementArray0[1] = stackTraceElement1; [EOL]       StackTraceElement stackTraceElement2 = new StackTraceElement("!yvqM)9R9B+@s*FdB", "!yvqM)9R9B+@s*FdB", "org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder", (-1072)); [EOL]       stackTraceElementArray0[2] = stackTraceElement2; [EOL]       StackTraceElement stackTraceElement3 = new StackTraceElement("XjP`4mI|d1]R6", "org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture", "!yvqM)9R9B+@s*FdB", 2); [EOL]       stackTraceElementArray0[3] = stackTraceElement3; [EOL]       executionException1.setStackTrace(stackTraceElementArray0); [EOL]       ConcurrentUtils.extractCause(executionException1); [EOL]       ExecutionException executionException2 = new ExecutionException((Throwable) null); [EOL]       executionException2.fillInStackTrace(); [EOL]       executionException2.fillInStackTrace(); [EOL]       ConcurrentUtils.handleCauseUnchecked(executionException2); [EOL]       assertNotSame(executionException2, executionException1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContextLabels()  throws Throwable  { [EOL]       DefaultExceptionContext defaultExceptionContext0 = new DefaultExceptionContext(); [EOL]       defaultExceptionContext0.setContextValue((String) null, (Object) null); [EOL]       Set<String> set0 = defaultExceptionContext0.getContextLabels(); [EOL]       assertFalse(set0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.append(stringBuffer0, "{th1.2f$dR", (short[]) null, (Boolean) null); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-1580.7)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append(0L); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder0.midString(0, 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = 0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.delete(1458, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoStringOnOff()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toStringOnOff((Boolean) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.indexOf((float[]) null, (-2004.5336F), (-1246)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       char char0 = 'Q'; [EOL]       Integer integer0 = new Integer((-3878)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) integer0, (-3878), 'H'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       charArray0[0] = 'Q'; [EOL]       int int0 = 5; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-3878), charArray0, (-3878), 5); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -3878 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = "Invalid length: "; [EOL]       StrBuilder strBuilder1 = new StrBuilder("Invalid length: "); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadRight((-3837), (-3837), 'G'); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append(446.287598279); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.clear(); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.replaceFirst(strMatcher0, "WkQ~#i}[72*VY?A$2SN"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       int int0 = 8; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.append(strBuilder5, 8, 8); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('\'', '~'); [EOL]       CharRange charRange1 = CharRange.isNot('M'); [EOL]       boolean boolean0 = charRange1.contains(charRange0); [EOL]       assertEquals('\'', charRange0.getStart()); [EOL]       assertEquals('M', charRange1.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetMiddle()  throws Throwable  { [EOL]       Integer integer0 = new Integer(1); [EOL]       MutableTriple<Integer, Object, Object> mutableTriple0 = MutableTriple.of(integer0, (Object) integer0, (Object) integer0); [EOL]       Object object0 = mutableTriple0.getMiddle(); [EOL]       assertEquals(1, object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf((String) null, 3954); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.trim(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder5 = strBuilder2.appendln((String) null, 0, 2255); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.appendPadding(6, '2'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.insert(137, (Object) strBuilder4); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 137 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-1580.7)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append(0L); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.midString(0, 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = 0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.delete(1458, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(362L); [EOL]       Date date0 = DateUtils.addWeeks(mockDate0, 1868); [EOL]       assertEquals("Thu Oct 20 00:00:00 GMT 2005", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1580); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       char[] charArray1 = strBuilder0.getChars(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetVariablePrefix()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.setVariablePrefix('$'); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = 79; [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((double) 79); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       int int1 = (-2267); [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll('o'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       strBuilder3.buffer = null; [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       String string0 = "nCIF=^XRVL:\\t%AH&"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(767); [EOL]       assertEquals(767, strBuilder0.capacity()); [EOL]        [EOL]       Class<String> class0 = String.class; [EOL]       ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0); [EOL]        [EOL]       Class<StrBuilder> class1 = StrBuilder.class; [EOL]       ServiceLoader<StrBuilder> serviceLoader1 = ServiceLoader.loadInstalled(class1); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) serviceLoader0, "d"); [EOL]       assertEquals(767, strBuilder0.capacity()); [EOL]       assertEquals(767, strBuilder1.capacity()); [EOL]        [EOL]       int int0 = strBuilder1.capacity(); [EOL]       assertEquals(767, strBuilder0.capacity()); [EOL]       assertEquals(767, strBuilder1.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeXml()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeXml(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTSVInstance()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/."); [EOL]       strTokenizer0.isIgnoreEmptyTokens(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(238); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll('s'); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder1.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.size()); [EOL]       assertEquals(2822, strBuilder4.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(2954, strBuilder0.size()); [EOL]       assertEquals(2954, strBuilder4.size()); [EOL]       assertEquals(2954, strBuilder5.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(5777, strBuilder0.size()); [EOL]       assertEquals(5777, strBuilder1.size()); [EOL]       assertEquals(5777, strBuilder6.size()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertEquals(5777, strBuilder0.size()); [EOL]       assertEquals(5777, strBuilder1.size()); [EOL]       assertEquals(5777, strBuilder6.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(5782, strBuilder7.size()); [EOL]       assertEquals(5782, strBuilder0.size()); [EOL]        [EOL]       int int1 = strBuilder6.validateRange(0, 1320); [EOL]       assertEquals(5782, strBuilder0.size()); [EOL]       assertEquals(5782, strBuilder1.size()); [EOL]       assertEquals(5782, strBuilder6.size()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(5800, strBuilder0.size()); [EOL]       assertEquals(5800, strBuilder8.size()); [EOL]       assertEquals(5800, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(8622, strBuilder0.size()); [EOL]       assertEquals(8622, strBuilder1.size()); [EOL]       assertEquals(8622, strBuilder9.size()); [EOL]       assertEquals(8622, strBuilder2.size()); [EOL]       assertEquals(8622, strBuilder3.size()); [EOL]       assertEquals(8622, strBuilder6.size()); [EOL]        [EOL]       String string0 = strBuilder8.getNullText(); [EOL]       assertEquals(8622, strBuilder0.size()); [EOL]       assertEquals(8622, strBuilder8.size()); [EOL]       assertEquals(8622, strBuilder1.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplaceSystemProperties()  throws Throwable  { [EOL]       String string0 = StrSubstitutor.replaceSystemProperties((Object) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       compareToBuilder0.append(1359, 43); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testaddSeconds()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       Date date0 = mockGregorianCalendar0.getGregorianChange(); [EOL]       Date date1 = DateUtils.addSeconds(date0, 4); [EOL]       assertEquals("Fri Oct 15 00:00:04 GMT 1582", date1.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.setSizeEndText("AEhzPmLst|m|:e7J{Z"); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       strBuilder0.size = 6; [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst('#', '#'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder1.toString(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append(6); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder2.equals((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append((String) null, 6, 1077); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals(strBuilder3); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '#'; [EOL]       charArray0[1] = '#'; [EOL]       charArray0[2] = '#'; [EOL]       charArray0[3] = '#'; [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln(0L); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceAll("", "\u0000\u0000\u0000\u0000\u0000\u0000"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       charArray0[4] = '#'; [EOL]       StrBuilder strBuilder6 = strBuilder2.appendln(charArray0, 0, 0); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder6.new StrBuilderReader(); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, 1724, 0); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]       assertNotNull(reader0); [EOL]       assertFalse(reader0.ready()); [EOL]       assertTrue(reader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.ensureCapacity(115); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf((StrMatcher) null); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.subSequence(57, 117); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 117 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisJavaAwtHeadless()  throws Throwable  { [EOL]       boolean boolean0 = SystemUtils.isJavaAwtHeadless(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-2091)); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((-2091), (-2091), 0, 0); [EOL]       Integer integer1 = BooleanUtils.toIntegerObject(boolean0, integer0, integer0, integer0); [EOL]       assertEquals((-2091), (int)integer1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testoutsideOf()  throws Throwable  { [EOL]       NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.outsideOf(Integer.MAX_VALUE, 1691); [EOL]       assertNotNull(numericEntityEscaper0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertTrue(charBuffer1.equals((Object)charBuffer0)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replace(strMatcher0, "D", 1, 1662, 1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-620)); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(1L); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder1.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.markSupported(); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll(iterator0); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder2.length()); [EOL]       assertEquals(5, strBuilder3.length()); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals((Object) null); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteAll('J'); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder2.length()); [EOL]       assertEquals(5, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.append(1L); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]       assertEquals(6, strBuilder1.length()); [EOL]       assertEquals(6, strBuilder5.length()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]       assertEquals(0, charArray0.length); [EOL]        [EOL]       Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder5); [EOL]       assertEquals(12, strBuilder0.length()); [EOL]       assertEquals(12, strBuilder1.length()); [EOL]       assertEquals(12, strBuilder5.length()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write("?NYmW7afS>c]@v"); [EOL]       assertEquals(26, strBuilder0.length()); [EOL]        [EOL]       boolean boolean2 = strBuilder5.isEmpty(); [EOL]       assertEquals(26, strBuilder0.length()); [EOL]       assertEquals(26, strBuilder1.length()); [EOL]       assertEquals(26, strBuilder5.length()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteFirst('\\'); [EOL]       assertEquals(26, strBuilder0.length()); [EOL]       assertEquals(26, strBuilder6.length()); [EOL]       assertEquals(26, strBuilder2.length()); [EOL]       assertEquals(26, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendWithSeparators(iterator0, "u"); [EOL]       assertEquals(26, strBuilder0.length()); [EOL]       assertEquals(26, strBuilder6.length()); [EOL]       assertEquals(26, strBuilder7.length()); [EOL]       assertEquals(26, strBuilder2.length()); [EOL]       assertEquals(26, strBuilder4.length()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(strBuilder2); [EOL]       assertEquals(26, strBuilder0.length()); [EOL]       assertEquals(26, stringBuffer0.length()); [EOL]       assertEquals(26, strBuilder2.length()); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.append(1.0F); [EOL]       assertEquals(26, strBuilder0.length()); [EOL]       assertEquals(29, stringBuffer0.length()); [EOL]       assertEquals(29, stringBuffer1.length()); [EOL]       assertEquals(26, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.append(stringBuffer0); [EOL]       assertEquals(55, strBuilder0.length()); [EOL]       assertEquals(55, strBuilder1.length()); [EOL]       assertEquals(29, stringBuffer0.length()); [EOL]       assertEquals(55, strBuilder8.length()); [EOL]       assertEquals(55, strBuilder2.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.subSequence((-900), (-620)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -900 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRootCause()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("8z/t]?%'4"); [EOL]       String string0 = ExceptionUtils.getRootCauseMessage(mockThrowable0); [EOL]       assertEquals("MockThrowable: 8z/t]?%'4", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseClassName(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-2091073820)); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(integer0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("h@Gb#OU9ny:c[nqu.", standardToStringStyle0); [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("h@Gb#OU9ny:c[nqu.", booleanArray0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       float float0 = IEEE754rUtils.min((-2270.5054F), (-3157.652F), 0.0F); [EOL]       assertEquals((-3157.652F), float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       String string0 = "+[AQj^o1MB"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("+[AQj^o1MB"); [EOL]       assertEquals(42, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = 2860; [EOL]       StrBuilder strBuilder1 = strBuilder0.ensureCapacity(2860); [EOL]       assertEquals(5720, strBuilder0.capacity()); [EOL]       assertEquals(5720, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceAll('+', '6'); [EOL]       assertEquals(5720, strBuilder0.capacity()); [EOL]       assertEquals(5720, strBuilder1.capacity()); [EOL]       assertEquals(5720, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.minimizeCapacity(); [EOL]       assertEquals(10, strBuilder0.capacity()); [EOL]       assertEquals(10, strBuilder1.capacity()); [EOL]       assertEquals(10, strBuilder2.capacity()); [EOL]       assertEquals(10, strBuilder3.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.validateRange(2860, (-32768)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(0.0F); [EOL]       mutableFloat0.increment(); [EOL]       mutableFloat0.getValue(); [EOL]       assertEquals(1.0F, mutableFloat0.getValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisStarted()  throws Throwable  { [EOL]       Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0); [EOL]       boolean boolean0 = callableBackgroundInitializer0.isStarted(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0); [EOL]       assertEquals(0, byteArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd((String) null, (String) null); [EOL]        [EOL]       String string2 = StringUtils.leftPad((String) null, 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]       assertEquals(1, stringArray1.length); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testwrite()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '?'; [EOL]       charArray0[2] = 'U'; [EOL]       charArray0[3] = '4'; [EOL]       StrBuilder strBuilder2 = strBuilder1.insert(2, charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder4 = strBuilder3.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder4.asWriter(); [EOL]       assertNotNull(writer0); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]        [EOL]       char[] charArray1 = new char[0]; [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.trim(); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder7 = strBuilder5.append(6); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray1, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       int int0 = (-1498); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1498)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char char0 = 'Y'; [EOL]       StrMatcher strMatcher0 = StrMatcher.commaMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('Y'); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll("I%EqwV7sG3W", "I%EqwV7sG3W"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int1 = strBuilder0.lastIndexOf(strMatcher0, 116); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'Y'; [EOL]       int int2 = 7; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.validateRange((-738), (-1498)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -738 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       Double double0 = new Double((-30.60225976818994)); [EOL]       MutableLong mutableLong0 = new MutableLong(double0); [EOL]       mutableLong0.add((Number) double0); [EOL]       assertEquals((short) (-60), mutableLong0.shortValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('h'); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll(", Length: 0", ", Length: 0"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer2, 773, '5'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[3] = (Object) strMatcher0; [EOL]       objectArray0[4] = (Object) ", Length: 0"; [EOL]       objectArray0[5] = (Object) strMatcher0; [EOL]       StrBuilder strBuilder3 = strBuilder1.appendSeparator(""); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'h'; [EOL]       charArray0[2] = 'h'; [EOL]       charArray0[3] = 'h'; [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'h'; [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoIntegerObject()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Integer integer1 = BooleanUtils.toIntegerObject(true, integer0, (Integer) null); [EOL]       assertEquals(0, (int)integer1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       int int1 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.right("", 0); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]        [EOL]       String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils"); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0); [EOL]        [EOL]       String string6 = StringUtils.lowerCase("s"); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string1)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]        [EOL]       String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0); [EOL]       assertFalse(string7.equals((Object)string0)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string2)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string1)); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]       assertFalse(string7.equals((Object)string6)); [EOL]        [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = ".ti')kKzb5J(cbBlh"; [EOL]       stringArray0[1] = "s"; [EOL]       stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils"; [EOL]       stringArray0[3] = "s"; [EOL]       stringArray0[4] = "s"; [EOL]       stringArray0[5] = "{}"; [EOL]       stringArray0[6] = "{}"; [EOL]       stringArray0[7] = ""; [EOL]       stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh"; [EOL]       String string8 = StringUtils.getCommonPrefix(stringArray0); [EOL]       assertFalse(string8.equals((Object)string7)); [EOL]       assertTrue(string8.equals((Object)string3)); [EOL]       assertFalse(string8.equals((Object)string2)); [EOL]       assertFalse(string8.equals((Object)string5)); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]       assertFalse(string8.equals((Object)string0)); [EOL]       assertFalse(string8.equals((Object)string1)); [EOL]       assertFalse(string8.equals((Object)string4)); [EOL]        [EOL]       String[] stringArray1 = StringUtils.substringsBetween("Threshold must not be negative", ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh", ""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.substringsBetween("org.apache.commons.lang3.exception.CloneFa", "s", ".ti')kKzb5J(cbBlh"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("h+lKn\"r#L`T", (ToStringStyle) null); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.appendSuper("NKQRC;4m"); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testwrite()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 8); [EOL]        [EOL]       charArray0[0] = '+'; [EOL]       StrBuilder strBuilder1 = strBuilder0.append(charArray0); [EOL]        [EOL]       charArray0[1] = 'd'; [EOL]       charArray0[2] = '8'; [EOL]       charArray0[3] = '='; [EOL]       charArray0[4] = 'H'; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       Writer writer0 = strBuilder2.asWriter(); [EOL]       assertNotNull(writer0); [EOL]        [EOL]       boolean boolean0 = strBuilder0.endsWith((String) null); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append(strBuilder3, 2438, 2438); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       int int0 = (-334); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-334)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-334), 117, 'P'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf('P'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(117); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert((-334), false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -334 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('.', 'L'); [EOL]       CharRange charRange1 = CharRange.is('.'); [EOL]       boolean boolean0 = charRange0.equals(charRange1); [EOL]       assertFalse(charRange1.isNegated()); [EOL]       assertTrue(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("", ", element2="); [EOL]       boolean boolean0 = range0.contains("k.v4"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       String string0 = "A"; [EOL]       String string1 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer"; [EOL]       int int0 = 34; [EOL]       boolean boolean0 = false; [EOL]       StrBuilder strBuilder1 = new StrBuilder("A"); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       char char0 = strBuilder3.charAt(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.append((CharSequence) strBuilder2, 34, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.stripAll((String[]) null, "TT"); [EOL]        [EOL]       String string0 = StringUtils.substringAfter("TT", "TT"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'E'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.substringBeforeLast("", ""); [EOL]        [EOL]       String string2 = StringUtils.repeat("", 116); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens(""); [EOL]       assertEquals(0, stringArray1.length); [EOL]        [EOL]       String string3 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string4 = StringUtils.stripStart("pG$0h;W-R>", "TT");W-R>", string4); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("", ",FQU3=\"q$yCb$a\"_=Cm", 122); [EOL]       assertEquals(0, stringArray2.length); [EOL]        [EOL]       String[] stringArray3 = StringUtils.substringsBetween("LS", "Cannot store ", "xQD3IhI"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) "pG$0h;W-R>"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "LS", charArray0); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumeric("xQD3IhI"); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) ""); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[4]; [EOL]       String string5 = StringUtils.reverseDelimited("", ']'); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "xQD3IhI"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) "pG$0h;W-R>"; [EOL]       int int2 = StringUtils.lastIndexOfAny("pG$0h;W-R>", charSequenceArray0); [EOL]       assertEquals(4, charSequenceArray0.length); [EOL]        [EOL]       int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       boolean boolean4 = StringUtils.isWhitespace("TT"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("2g"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = (-1287); [EOL]       char[] charArray0 = new char[7]; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher("2g"); [EOL]        [EOL]       boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       charArray0[1] = '='; [EOL]       charArray0[2] = '$'; [EOL]       charArray0[3] = 'W'; [EOL]       charArray0[4] = 'X'; [EOL]       charArray0[5] = 'j'; [EOL]       charArray0[6] = 'Q'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars((-1287), (-1287), charArray0, (-1287)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1287 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)2); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappendSuper()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(37); [EOL]       double[] doubleArray0 = new double[3]; [EOL]       hashCodeBuilder1.append((double) (-1)); [EOL]       doubleArray0[0] = (double) (-2563); [EOL]       doubleArray0[1] = (double) (-2563); [EOL]       doubleArray0[2] = (double) (-1); [EOL]       hashCodeBuilder0.append(doubleArray0); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       short[] shortArray0 = new short[1]; [EOL]       ArrayUtils.reverse(shortArray0); [EOL]       assertArrayEquals(new short[] {(short)0}, shortArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("AEhzPmLst|m|:e7J{Z"); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendFieldSeparator(stringBuffer0); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('Y'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("L,!4&lfs}", "L,!4&lfs}"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       int int0 = strBuilder0.length(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigitMsb0_4bits()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       booleanArray0[1] = true; [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0); [EOL]       assertEquals('4', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDateInstance()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getDefault(); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0); [EOL]       String string0 = fastDateFormat0.format(1L); [EOL]       assertEquals("Jan 1, 1970", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("$i%f"); [EOL]       strTokenizer0.nextToken(); [EOL]       strTokenizer0.setDelimiterChar('S'); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       int int0 = BooleanUtils.toInteger((Boolean) null, 76, 3468, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.trim(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder6 = strBuilder4.append(6); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = 79; [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((double) 79); [EOL]       assertEquals(4, strBuilder0.length()); [EOL]       assertEquals(4, strBuilder1.length()); [EOL]        [EOL]       int int1 = (-2267); [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder0); [EOL]       assertEquals(56, strBuilder0.length()); [EOL]       assertEquals(56, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll('o'); [EOL]       assertEquals(53, strBuilder0.length()); [EOL]       assertEquals(53, strBuilder2.length()); [EOL]       assertEquals(53, strBuilder3.length()); [EOL]        [EOL]       strBuilder3.buffer = null; [EOL]       assertEquals(53, strBuilder0.length()); [EOL]       assertEquals(53, strBuilder2.length()); [EOL]       assertEquals(53, strBuilder3.length()); [EOL]        [EOL]       String string0 = "nCIF=^XRVL:\\t%AH&"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-1), (short) (-1)); [EOL]       assertTrue(equalsBuilder1.isEquals()); [EOL]        [EOL]       equalsBuilder1.append(0.0, (-2440.69764)); [EOL]       assertFalse(equalsBuilder0.isEquals()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction("3/4"); [EOL]       assertEquals(0.75F, fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1935.9095027)); [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals((-1935.9095F), fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('5'); [EOL]       assertTrue(strTokenizer1.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt((-2587)); [EOL]       int int0 = mutableInt0.compareTo(mutableInt0); [EOL]       assertEquals((-2587), (int)mutableInt0.toInteger()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdecrement()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       mutableDouble0.getValue(); [EOL]       assertEquals((-1), mutableDouble0.intValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       char[] charArray0 = new char[18]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]       assertEquals(18, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       assertEquals(18, strBuilder3.size()); [EOL]       assertEquals(18, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]       assertEquals(45, strBuilder0.size()); [EOL]       assertEquals(45, strBuilder4.size()); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]       assertEquals(45, strBuilder0.size()); [EOL]       assertEquals(45, strBuilder4.size()); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]       assertEquals(18, strBuilder3.size()); [EOL]       assertEquals(18, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]       assertEquals(24, strBuilder3.size()); [EOL]       assertEquals(24, strBuilder5.size()); [EOL]       assertEquals(24, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]       assertEquals(24, strBuilder3.size()); [EOL]       assertEquals(24, strBuilder6.size()); [EOL]       assertEquals(24, strBuilder2.size()); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertEquals(0, set0.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertEquals(45, strBuilder0.size()); [EOL]       assertEquals(45, strBuilder4.size()); [EOL]       assertEquals(0, set0.size()); [EOL]       assertEquals(45, strBuilder7.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("", "p!,").when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       long[] longArray0 = new long[11]; [EOL]       compareToBuilder0.append((long[]) null, longArray0); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[0] = object0; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) null; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) strBuilder0; [EOL]       objectArray0[5] = (Object) strBuilder0; [EOL]       objectArray0[6] = (Object) null; [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "length must be valid"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendWithSeparators(objectArray0, (String) null); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((CharSequence) strBuilder0, 31, 31); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]       assertTrue(reader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(1L); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.ASCII_ALPHA_LOWER; [EOL]       String string0 = charSet0.toString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       int[] intArray0 = new int[0]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0); [EOL]       assertEquals(1, booleanArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[6]; [EOL]       int int0 = ArrayUtils.indexOf(charArray0, 'L'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Iterable<?>) null, (String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher((String) null); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('L'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Iterable<?>) null, ""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("r8T0ER3M!z7l6zL5!"); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((double) 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       String string0 = strBuilder4.build(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.deleteFirst((String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "os.arch"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.isEmpty(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals(strBuilder4); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       String string1 = strBuilder1.getNullText(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendSeparator(", Length: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.insert(0, false); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder8.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'L'; [EOL]       charArray0[1] = 'L'; [EOL]       charArray0[2] = 'L'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.append(charArray0, 1898, 1898); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: 1898 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null, "g,SXP", "w#4xU.0t'5b#", (String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmatchesPattern()  throws Throwable  { [EOL]       SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6]; [EOL]       Validate.matchesPattern((CharSequence) "", "", "", (Object[]) sQLFeatureNotSupportedExceptionArray0); [EOL]       assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder4.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(2954, strBuilder0.length()); [EOL]       assertEquals(2954, strBuilder4.length()); [EOL]       assertEquals(2954, strBuilder5.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(5777, strBuilder0.length()); [EOL]       assertEquals(5777, strBuilder1.length()); [EOL]       assertEquals(5777, strBuilder6.length()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertEquals(5777, strBuilder0.length()); [EOL]       assertEquals(5777, strBuilder1.length()); [EOL]       assertEquals(5777, strBuilder6.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(5782, strBuilder7.length()); [EOL]       assertEquals(5782, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(5800, strBuilder0.length()); [EOL]       assertEquals(5800, strBuilder8.length()); [EOL]       assertEquals(5800, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(8622, strBuilder0.length()); [EOL]       assertEquals(8622, strBuilder9.length()); [EOL]       assertEquals(8622, strBuilder1.length()); [EOL]       assertEquals(8622, strBuilder2.length()); [EOL]       assertEquals(8622, strBuilder3.length()); [EOL]       assertEquals(8622, strBuilder6.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(charArray0, 0, 116); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid length: 116 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0); [EOL]       assertNotSame(shortArray1, shortArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported"); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('i'); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer1.forEachRemaining(consumer0); [EOL]       strTokenizer1.previousToken(); [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]       strTokenizer0.setTrimmerMatcher(strMatcher_TrimMatcher0); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("F47@g0~|IH&t"); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       char[] charArray1 = new char[8]; [EOL]       assertFalse(charArray1.equals((Object)charArray0)); [EOL]        [EOL]       charArray1[0] = 'n'; [EOL]       charArray1[1] = 'n'; [EOL]       charArray1[2] = 'S'; [EOL]       charArray1[3] = 'n'; [EOL]       charArray1[4] = 'S'; [EOL]       charArray1[5] = 'S'; [EOL]       charArray1[6] = 'S'; [EOL]       charArray1[7] = 'S'; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1); [EOL]       assertFalse(charArray1.equals((Object)charArray0)); [EOL]       assertFalse(strMatcher2.equals((Object)strMatcher1)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-1), 207, 'S'); [EOL]        [EOL]       charArray0[1] = 'S'; [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]       assertFalse(strMatcher3.equals((Object)strMatcher2)); [EOL]       assertFalse(strMatcher3.equals((Object)strMatcher1)); [EOL]       assertFalse(charArray0.equals((Object)charArray1)); [EOL]        [EOL]       StrMatcher strMatcher4 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, 0); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) null); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       boolean boolean0 = ObjectUtils.CONST(true); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll("2YZaq+Yp"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'U'; [EOL]       charArray0[1] = 'E'; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintArrayToLong()  throws Throwable  { [EOL]       int[] intArray0 = new int[9]; [EOL]       intArray0[0] = 16; [EOL]       long long0 = Conversion.intArrayToLong(intArray0, 0, (byte) (-112), (-1852), 1); [EOL]       assertEquals((-68719476480L), long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoChar()  throws Throwable  { [EOL]       char char0 = CharUtils.toChar("The String must not be empty"); [EOL]       assertEquals('T', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("LINUX"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.chars(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((String) null, 1, 1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "nCIF=^XRVL:\t%AH&"); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder2.append((CharSequence) stringBuilder0, 2, 2); [EOL]        [EOL]       int int0 = strBuilder1.lastIndexOf('^'); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder4.insert((int) '#', false); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '$'; [EOL]       StrBuilder strBuilder10 = strBuilder7.append('^'); [EOL]        [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher(']'); [EOL]        [EOL]       boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0); [EOL]        [EOL]       StrBuilder strBuilder11 = strBuilder3.deleteCharAt(2); [EOL]        [EOL]       StrBuilder strBuilder12 = strBuilder11.replaceFirst((StrMatcher) strMatcher_CharSetMatcher0, "j"); [EOL]        [EOL]       char[] charArray1 = strBuilder7.toCharArray(); [EOL]       assertFalse(charArray1.equals((Object)charArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]        [EOL]       float[] floatArray0 = new float[7]; [EOL]       floatArray0[0] = 3863.3088F; [EOL]       floatArray0[1] = 0.0F; [EOL]       floatArray0[2] = 0.0F; [EOL]       floatArray0[3] = (-1268.2902F); [EOL]       floatArray0[4] = (-3025.2256F); [EOL]       floatArray0[5] = 0.0F; [EOL]       floatArray0[6] = 885.884F; [EOL]       float[] floatArray1 = new float[7]; [EOL]       floatArray1[0] = 885.884F; [EOL]       floatArray1[1] = 3863.3088F; [EOL]       floatArray1[2] = 0.0F; [EOL]       floatArray1[3] = 0.0F; [EOL]       floatArray1[4] = (-3025.2256F); [EOL]       floatArray1[5] = (-3025.2256F); [EOL]       floatArray1[6] = 3863.3088F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       char[] charArray0 = new char[0]; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, false); [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-4493); [EOL]       shortArray0[1] = (short)1200; [EOL]       shortArray0[2] = (short)430; [EOL]       shortArray0[3] = (short)543; [EOL]       shortArray0[4] = (short)4401; [EOL]       shortArray0[5] = (short)3602; [EOL]       shortArray0[6] = (short) (-1); [EOL]       shortArray0[7] = (short)0; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(shortArray0, shortArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((float) (short)543, 3024.4634F); [EOL]       long[] longArray0 = new long[2]; [EOL]       longArray0[0] = (long) (short)4401; [EOL]       longArray0[1] = (long) (short) (-1); [EOL]       equalsBuilder5.append(longArray0, longArray0); [EOL]       assertFalse(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdaemon()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.daemon(true); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       MockThread mockThread0 = new MockThread(""); [EOL]       Thread thread0 = basicThreadFactory0.newThread(mockThread0); [EOL]       assertTrue(thread0.isDaemon()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '?'; [EOL]       charArray0[2] = 'U'; [EOL]       charArray0[3] = '4'; [EOL]       StrBuilder strBuilder2 = strBuilder1.insert(2, charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder4 = strBuilder3.insert(0, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder4.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray1 = new char[0]; [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.trim(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder7 = strBuilder5.append(6); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray1, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append('V'); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST((short) (-1480)); [EOL]       assertEquals((short) (-1480), short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("F47@g0~|IH&t"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       char[] charArray1 = new char[8]; [EOL]        [EOL]       charArray1[0] = 'n'; [EOL]       charArray1[1] = 'n'; [EOL]       charArray1[2] = 'S'; [EOL]       charArray1[3] = 'n'; [EOL]       charArray1[4] = 'S'; [EOL]       charArray1[5] = 'S'; [EOL]       charArray1[6] = 'S'; [EOL]       charArray1[7] = 'S'; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-1), 207, 'S'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       charArray0[1] = 'S'; [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher4 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(575); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln((-1956.771F)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendFixedWidthPadLeft((-634), Integer.MAX_VALUE, 'P'); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 32 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(919); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("+7zRuHp;`0", 919); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("<#"); [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("<#", timeZone0, locale0); [EOL]       Date date0 = fastDateParser0.parse("<#"); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(73, (-1)); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(73); [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[4] = true; [EOL]       hashCodeBuilder1.append(booleanArray0); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.strip(""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 48); [EOL]        [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       byteArray0[0] = (byte) (-3); [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[3] = (byte)89; [EOL]       byteArray0[4] = (byte) (-85); [EOL]       byteArray0[5] = (byte) (-17); [EOL]       byteArray0[6] = (byte)26; [EOL]       byteArray0[7] = (byte)2; [EOL]       byteArray0[8] = (byte) (-3); [EOL]       String string1 = StringUtils.join(byteArray0, 'u', 48, 0); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ';'); [EOL]        [EOL]       String string2 = StringUtils.replacePattern("", "}2NKtV<0;W;H!b/jjV", ""); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.chomp(""); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]       assertTrue(string3.equals((Object)string0)); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]        [EOL]       Locale locale0 = new Locale("", "Cannot store "); [EOL]        [EOL]       String string4 = StringUtils.lowerCase("", locale0); [EOL]       assertTrue(string4.equals((Object)string0)); [EOL]       assertTrue(string4.equals((Object)string2)); [EOL]       assertTrue(string4.equals((Object)string1)); [EOL]       assertTrue(string4.equals((Object)string3)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[0]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1502), (-127)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("AEhzPmLst|m|:e7J{Z"); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendFieldSeparator(stringBuffer0); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-811), (-811)); [EOL]       hashCodeBuilder0.append((boolean[]) null); [EOL]       assertEquals(657721, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = "ARM45"; [EOL]       String string1 = StringUtils.substringBeforeLast("BnJbN*", "ARM45"); [EOL]        [EOL]       String string2 = StringUtils.trimToEmpty(""); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "BnJbN*", (CharSequence) ""); [EOL]        [EOL]       String string3 = StringUtils.swapCase("BnJbN*"); [EOL]        [EOL]       PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(); [EOL]        [EOL]       HashSet<String> hashSet0 = new HashSet<String>(priorityQueue0); [EOL]       assertTrue(hashSet0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = hashSet0.add("BnJbN*"); [EOL]       assertFalse(hashSet0.isEmpty()); [EOL]        [EOL]       String string4 = StringUtils.join((Iterable<?>) hashSet0, 's'); [EOL]       assertFalse(hashSet0.isEmpty()); [EOL]        [EOL]       String string5 = StringUtils.chomp("", "bNjBn*"); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "", 0); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) "java.lang.String@0000000001"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(objectArray0, 'x', 0, 57); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction((-1), (-1)); [EOL]       Fraction fraction1 = Fraction.ONE_QUARTER; [EOL]       boolean boolean0 = fraction0.equals(fraction1); [EOL]       assertFalse(fraction1.equals((Object)fraction0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(160, strBuilder0.capacity()); [EOL]       assertEquals(160, strBuilder1.capacity()); [EOL]       assertEquals(160, strBuilder2.capacity()); [EOL]       assertEquals(160, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]       assertEquals(5644, strBuilder5.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(11552, strBuilder0.capacity()); [EOL]       assertEquals(11552, strBuilder1.capacity()); [EOL]       assertEquals(11552, strBuilder6.capacity()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertEquals(11552, strBuilder0.capacity()); [EOL]       assertEquals(11552, strBuilder1.capacity()); [EOL]       assertEquals(11552, strBuilder6.capacity()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(11552, strBuilder7.capacity()); [EOL]       assertEquals(11552, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(11552, strBuilder0.capacity()); [EOL]       assertEquals(11552, strBuilder8.capacity()); [EOL]       assertEquals(11552, strBuilder1.capacity()); [EOL]        [EOL]       strBuilder8.buffer = charArray0; [EOL]       assertEquals(1, strBuilder0.capacity()); [EOL]       assertEquals(1, strBuilder8.capacity()); [EOL]       assertEquals(1, strBuilder1.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder6.append(strBuilder3, 0, 2822); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = null; [EOL]       String string1 = StringUtils.mid((String) null, 0, 1805); [EOL]       assertNull(string1); [EOL]        [EOL]       int[] intArray0 = new int[7]; [EOL]       intArray0[0] = 1805; [EOL]       intArray0[1] = 0; [EOL]       intArray0[2] = 0; [EOL]       intArray0[3] = 1805; [EOL]       intArray0[4] = 1805; [EOL]       intArray0[5] = 1805; [EOL]       intArray0[6] = 1805; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(intArray0, '.', (-502), 0); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -502 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseFieldNames(); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       IdentityHashMap<HashMap, ChoiceFormat> identityHashMap0 = ObjectUtils.clone((IdentityHashMap<HashMap, ChoiceFormat>) null); [EOL]       assertNull(identityHashMap0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbyteArrayToInt()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       int int0 = Conversion.byteArrayToInt(byteArray0, (-9), (-9), (-9), (-9)); [EOL]       assertEquals((-9), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (float) 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder1.capacity(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder2 = strBuilder1.append((CharSequence) strBuilder0, 0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append(strBuilder3); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       char char0 = '|'; [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceAll('A', '|'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.validateRange(32, 32); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       byte byte0 = NumberUtils.max((byte) (-92), (byte) (-44), (byte) (-44)); [EOL]       assertEquals((byte) (-44), byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>> mutablePair0 = new MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>>(); [EOL]       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", ""); [EOL]       ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0); [EOL]       MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>> mutablePair1 = MutablePair.of(abstractMap_SimpleImmutableEntry0, immutablePair0); [EOL]       int int0 = mutablePair0.compareTo((Pair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>>) mutablePair1); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       Buffer buffer0 = charBuffer0.flip(); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) 104); [EOL]        [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendWithSeparators((Iterable<?>) treeSet0, "hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.ensureCapacity(104); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 121, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 5); [EOL]       Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0); [EOL]       assertNull(comparable0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(0L); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSimpleName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getSimpleName((Object) null, (String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'I'; [EOL]       charArray0[1] = 'e'; [EOL]       charArray0[2] = 'M'; [EOL]       charArray0[3] = 'I'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_CharSetMatcher0, (String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad("", 97); [EOL]        [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "                                                                                                 ", (CharSequence) "                                                                                                 "); [EOL]        [EOL]       int int0 = StringUtils.length("                                                                                                 "); [EOL]        [EOL]       String string1 = StringUtils.removePattern("QJ]luiw#W`4@9lmGn,", "                                                                                                 "); [EOL]        [EOL]       ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(); [EOL]       assertFalse(arrayDeque0.contains("                                                                                                 ")); [EOL]        [EOL]       Object object0 = new Object(); [EOL]        [EOL]       arrayDeque0.push(object0); [EOL]       assertTrue(arrayDeque0.contains(object0)); [EOL]       assertFalse(arrayDeque0.contains("                                                                                                 ")); [EOL]        [EOL]       String string2 = StringUtils.join((Iterable<?>) arrayDeque0, 'A'); [EOL]       assertTrue(arrayDeque0.contains(object0)); [EOL]       assertFalse(arrayDeque0.contains("                                                                                                 ")); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("p{InCombiningDiacriticalMarks}+", "QJ]luiw#W`4@9lmGn,"); [EOL]        [EOL]       String string3 = StringUtils.overlay("", "2^6=6", 326, 97); [EOL]        [EOL]       double[] doubleArray0 = new double[0]; [EOL]       String string4 = StringUtils.join(doubleArray0, ','); [EOL]        [EOL]       boolean boolean0 = StringUtils.isWhitespace("java.lang.Object@0000000001"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphaSpace("2^6=6"); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = ','; [EOL]       charArray0[1] = ','; [EOL]       charArray0[2] = '\''; [EOL]       charArray0[3] = 'A'; [EOL]       boolean boolean2 = StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0); [EOL]        [EOL]       String string5 = StringUtils.left(", Length: ", (-1506)); [EOL]        [EOL]       String string6 = StringUtils.right("2^6=6", 326); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.removePattern("", "(En}rfs3k]m[>Eo?Q"); [EOL]         fail("Expecting exception: PatternSyntaxException"); [EOL]        [EOL]       } catch(PatternSyntaxException e) { [EOL]          // [EOL]          // Unclosed character class near index 16 [EOL]          // (En}rfs3k]m[>Eo?Q [EOL]          //                 ^ [EOL]          // [EOL]          verifyException("java.util.regex.Pattern", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPattern()  throws Throwable  { [EOL]       HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>(); [EOL]       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(":=|2,+.;gT[`kr", (Locale) null, hashMap0); [EOL]       extendedMessageFormat0.applyPattern("=YO+[0mpmH'ja"); [EOL]       assertEquals("=YO+[0mpmHja", extendedMessageFormat0.toPattern()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       char[] charArray0 = new char[18]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(32); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[9]; [EOL]       objectArray0[0] = (Object) null; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       objectArray0[4] = (Object) strBuilder1; [EOL]       objectArray0[5] = (Object) strBuilder1; [EOL]       objectArray0[6] = (Object) strBuilder1; [EOL]       objectArray0[7] = (Object) null; [EOL]       objectArray0[8] = (Object) strBuilder1; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln((String) null, objectArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEnableSubstitutionInVariables()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]       StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefixMatcher(strMatcher0); [EOL]       strSubstitutor1.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.replace("Variable prefix matcher must not be null!"); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("\"NaI"); [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("<#", timeZone0, locale0); [EOL]       FastDateParser fastDateParser1 = new FastDateParser("<#", timeZone0, locale0); [EOL]       boolean boolean0 = fastDateParser0.equals(fastDateParser1); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0); [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetEnableSubstitutionInVariables()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.setVariableSuffix(":]GB6Un80r?+"); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcall()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null, (Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPackageCanonicalName()  throws Throwable  { [EOL]       Class<ClassUtils> class0 = ClassUtils.class; [EOL]       String string0 = ClassUtils.getPackageCanonicalName(class0); [EOL]       assertEquals("org.apache.commons.lang3", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.setSummaryObjectEndText("Windows 9"); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       String string0 = "4n0aI"; [EOL]       String string1 = StringUtils.rightPad("4n0aI", 127, "Array and element cannot both be null"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) "4n0aIArray and element cannot both be nullArray and element cannot both be nullArray and element cannot both be nullArray and e"; [EOL]       String string2 = " vs "; [EOL]       String string3 = StringUtils.substring(" vs ", (-2779)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) " vs "; [EOL]       int[] intArray0 = new int[4]; [EOL]       intArray0[0] = (-2779); [EOL]       intArray0[1] = 127; [EOL]       intArray0[2] = (-2779); [EOL]       intArray0[3] = 127; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(intArray0, '[', (-1674), (-1127)); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -1674 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOfType()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) null, class0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       Locale locale0 = Locale.CANADA_FRENCH; [EOL]       HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>(); [EOL]       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("m& mHZ;'N'wM", locale0, hashMap0); [EOL]       extendedMessageFormat0.hashCode(); [EOL]       assertEquals("m& mHZ;NwM", extendedMessageFormat0.toPattern()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       int[] intArray0 = new int[0]; [EOL]       EqualsBuilder equalsBuilder1 = new EqualsBuilder(); [EOL]       long[] longArray0 = new long[1]; [EOL]       longArray0[0] = (-1L); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((float) (-1L), (float) (-1L)); [EOL]       assertTrue(equalsBuilder3.build()); [EOL]        [EOL]       Object[] objectArray0 = new Object[9]; [EOL]       objectArray0[0] = (Object) equalsBuilder0; [EOL]       objectArray0[1] = (Object) equalsBuilder1; [EOL]       objectArray0[2] = (Object) equalsBuilder2; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       double[] doubleArray0 = new double[7]; [EOL]       doubleArray0[0] = (double) (-1L); [EOL]       doubleArray0[1] = (double) (-1L); [EOL]       doubleArray0[2] = (double) (-1L); [EOL]       doubleArray0[3] = (double) (-1L); [EOL]       doubleArray0[4] = (double) (-1L); [EOL]       doubleArray0[5] = (double) (-1L); [EOL]       doubleArray0[6] = (double) (-1L); [EOL]       equalsBuilder0.append((double[]) null, doubleArray0); [EOL]       objectArray0[4] = (Object) equalsBuilder2; [EOL]       objectArray0[5] = (Object) equalsBuilder0; [EOL]       objectArray0[6] = (Object) equalsBuilder2; [EOL]       Object object0 = new Object(); [EOL]       objectArray0[7] = object0; [EOL]       objectArray0[8] = (Object) equalsBuilder3; [EOL]       Object[] objectArray1 = new Object[2]; [EOL]       objectArray1[0] = object0; [EOL]       objectArray1[1] = (Object) equalsBuilder3; [EOL]       equalsBuilder3.append(objectArray0, objectArray1); [EOL]       float[] floatArray0 = new float[9]; [EOL]       floatArray0[0] = (float) (-1L); [EOL]       floatArray0[1] = (float) (-1L); [EOL]       floatArray0[2] = (float) (-1L); [EOL]       floatArray0[3] = (float) (-1L); [EOL]       floatArray0[4] = 0.0F; [EOL]       floatArray0[5] = (float) (-1L); [EOL]       floatArray0[6] = (float) (-1L); [EOL]       floatArray0[7] = (float) (-1L); [EOL]       floatArray0[8] = (float) (-1L); [EOL]       equalsBuilder2.append(floatArray0, floatArray0); [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       equalsBuilder3.append(booleanArray0, booleanArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) (short)532); [EOL]       assertArrayEquals(new double[] {532.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(1719.82282); [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       assertEquals((-1719.8229F), fraction1.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(""); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.insert(0, false); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = ':'; [EOL]       charArray0[1] = '.'; [EOL]       charArray0[2] = 'f'; [EOL]       charArray0[3] = '#'; [EOL]       StringBuilder stringBuilder3 = stringBuilder2.insert(0, charArray0); [EOL]        [EOL]       StringBuilder stringBuilder4 = stringBuilder3.appendCodePoint(0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(stringBuilder4, 0, 326); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappendEnd()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       toStringStyle0.setFieldSeparatorAtEnd(true); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "<"); [EOL]       Object object0 = new Object(); [EOL]       toStringStyle0.appendEnd(stringBuffer0, object0); [EOL]       assertEquals(1, stringBuffer0.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(""); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceFirst("5p&H0$B\".@l3|+@o", ""); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder2.length()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(4); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln(stringBuffer0); [EOL]       assertEquals(1, strBuilder1.length()); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]       assertEquals(1, strBuilder3.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = ObjectUtils.firstNonNull(objectArray0); [EOL]       Object object1 = ObjectUtils.defaultIfNull(object0, (Object) "org.apache.commons.lang3.ObjectUtils"); [EOL]       assertEquals("org.apache.commons.lang3.ObjectUtils", object1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       long long0 = ObjectUtils.CONST(0L); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0); [EOL]       int[] intArray0 = new int[0]; [EOL]       boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0); [EOL]       assertEquals(0, booleanArray2.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder((Object) null, toStringStyle0); [EOL]       char[] charArray0 = new char[6]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("java.vm.specification.name", charArray0, true); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetVariableResolver()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "$!$](1CnP-5;", 'J'); [EOL]       StrLookup<?> strLookup0 = strSubstitutor0.getVariableResolver(); [EOL]       strSubstitutor0.setVariableResolver(strLookup0); [EOL]       assertEquals('J', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       Object object0 = new Object(); [EOL]       boolean boolean0 = charRange0.equals(object0); [EOL]       assertEquals('6', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder0.toStringBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int0 = 102; [EOL]       StrBuilder strBuilder1 = strBuilder0.append(102); [EOL]       assertEquals(3, strBuilder0.size()); [EOL]       assertEquals(3, strBuilder1.size()); [EOL]        [EOL]       char char0 = 'q'; [EOL]       StrBuilder strBuilder2 = strBuilder1.append((double) 117); [EOL]       assertEquals(8, strBuilder0.size()); [EOL]       assertEquals(8, strBuilder1.size()); [EOL]       assertEquals(8, strBuilder2.size()); [EOL]        [EOL]       String string0 = strBuilder2.leftString(102); [EOL]       assertEquals(8, strBuilder0.size()); [EOL]       assertEquals(8, strBuilder1.size()); [EOL]       assertEquals(8, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendSeparator('q', 117); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]       assertEquals(9, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.append(stringBuilder0); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]       assertEquals(9, strBuilder1.size()); [EOL]       assertEquals(9, strBuilder4.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.appendln(strBuilder3, 117, 1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiPrintable('\u001C'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       String string0 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char char0 = '\"'; [EOL]       strBuilder0.size = (-914); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendSeparator('\"', 'p'); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHexDigit()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigit(11); [EOL]       assertEquals('b', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertEquals(41, strBuilder0.capacity()); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]       assertEquals(212, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]       assertEquals(212, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]       assertEquals(212, strBuilder2.capacity()); [EOL]       assertEquals(212, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]       assertEquals(212, strBuilder1.capacity()); [EOL]       assertEquals(212, strBuilder4.capacity()); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]       assertEquals(212, strBuilder2.capacity()); [EOL]       assertEquals(212, strBuilder5.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("M?]bESD_=n"); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, 0); [EOL]        [EOL]       int int1 = strBuilder0.indexOf(strMatcher0); [EOL]        [EOL]       int int2 = (-65); [EOL]       String string0 = strBuilder0.midString(62, (-65)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((-2266.992F)); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-1), 62); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       IDKey iDKey0 = new IDKey(hashCodeBuilder0); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((-185), (-185), (Object) iDKey0, true); [EOL]       assertEquals(17, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[4] = 1.0F; [EOL]       float float0 = IEEE754rUtils.max(floatArray0); [EOL]       assertEquals(1.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(36); [EOL]       ImmutableTriple<Object, Integer, String> immutableTriple0 = ImmutableTriple.of((Object) "", integer0, (String) null); [EOL]       Object object0 = immutableTriple0.getLeft(); [EOL]       assertEquals("", object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(1073, (long) 1073); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1073 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFalse()  throws Throwable  { [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(); [EOL]       boolean boolean0 = mutableBoolean0.isFalse(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("kfk"); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer0.forEachRemaining(consumer0); [EOL]       int int0 = strTokenizer0.previousIndex(); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0.0F, 0.0F); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ZERO; [EOL]       double double0 = fraction0.doubleValue(); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprimitivesToWrappers()  throws Throwable  { [EOL]       Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0); [EOL]       Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0); [EOL]       assertEquals(0, classArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.stripAccents((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null); [EOL]        [EOL]       String string1 = StringUtils.removeEnd((String) null, "%"); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsWhitespace((CharSequence) null); [EOL]        [EOL]       String string2 = StringUtils.substring("4q57|=FQji9Xaa?i", 0, 591); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "4q57|=FQji9Xaa?i", (CharSequence) "4q57|=FQji9Xaa?i"); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.upperCase((String) null); [EOL]        [EOL]       String string4 = StringUtils.difference("4q57|=FQji9Xaa?i", "4q57|=FQji9Xaa?i"); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       String string5 = StringUtils.chop((String) null); [EOL]        [EOL]       boolean boolean4 = StringUtils.isAlphaSpace((CharSequence) null); [EOL]        [EOL]       boolean boolean5 = StringUtils.isEmpty((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = new String[6]; [EOL]       stringArray0[0] = null; [EOL]       stringArray0[1] = null; [EOL]       stringArray0[2] = ""; [EOL]       stringArray0[3] = null; [EOL]       stringArray0[4] = null; [EOL]       stringArray0[5] = "4q57|=FQji9Xaa?i"; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(3163); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(""); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3417.2957F)); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder2.capacity()); [EOL]        [EOL]       int int0 = strBuilder2.indexOf("3+r3jcbdAXt1x", 3163); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendSeparator('s'); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder3.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 's'; [EOL]       charArray0[1] = 'H'; [EOL]       ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>(); [EOL]        [EOL]       ArrayList<Object> arrayList1 = new ArrayList<Object>(arrayList0); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList1.listIterator(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendAll((Iterator<?>) listIterator0); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder4.capacity()); [EOL]        [EOL]       charArray0[2] = 's'; [EOL]       charArray0[3] = 's'; [EOL]       charArray0[4] = 's'; [EOL]       charArray0[5] = 's'; [EOL]       charArray0[6] = 's'; [EOL]       StrBuilder strBuilder5 = strBuilder1.append(charArray0); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder5.capacity()); [EOL]       assertEquals(3163, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln("aHPcrO", 5, 0); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder6.capacity()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder5, 0, 's'); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder5.capacity()); [EOL]       assertEquals(3163, strBuilder1.capacity()); [EOL]       assertEquals(3163, strBuilder7.capacity()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.append(stringBuffer0, 3062, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContextEntries()  throws Throwable  { [EOL]       DefaultExceptionContext defaultExceptionContext0 = new DefaultExceptionContext(); [EOL]       DefaultExceptionContext defaultExceptionContext1 = defaultExceptionContext0.setContextValue((String) null, (Object) null); [EOL]       List<Pair<String, Object>> list0 = defaultExceptionContext1.getContextEntries(); [EOL]       assertFalse(list0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbyteValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte((byte)0); [EOL]       byte byte0 = mutableByte0.byteValue(); [EOL]       assertEquals((byte)0, byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'u'; [EOL]       charArray0[2] = 'B'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       strTokenizer0.next(); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0); [EOL]       assertTrue(strTokenizer1.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder1.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.size()); [EOL]       assertEquals(2822, strBuilder4.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(3005, strBuilder0.size()); [EOL]       assertEquals(3005, strBuilder4.size()); [EOL]       assertEquals(3005, strBuilder5.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(5828, strBuilder0.size()); [EOL]       assertEquals(5828, strBuilder1.size()); [EOL]       assertEquals(5828, strBuilder6.size()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertEquals(5828, strBuilder0.size()); [EOL]       assertEquals(5828, strBuilder1.size()); [EOL]       assertEquals(5828, strBuilder6.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(5833, strBuilder7.size()); [EOL]       assertEquals(5833, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(5851, strBuilder0.size()); [EOL]       assertEquals(5851, strBuilder8.size()); [EOL]       assertEquals(5851, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(8673, strBuilder0.size()); [EOL]       assertEquals(8673, strBuilder9.size()); [EOL]       assertEquals(8673, strBuilder1.size()); [EOL]       assertEquals(8673, strBuilder2.size()); [EOL]       assertEquals(8673, strBuilder3.size()); [EOL]       assertEquals(8673, strBuilder6.size()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder5.new StrBuilderReader(); [EOL]       assertEquals(8673, strBuilder0.size()); [EOL]       assertEquals(8673, strBuilder4.size()); [EOL]       assertEquals(8673, strBuilder5.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, (-2133), (-915)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       long long0 = NumberUtils.max(373L, 0L, (-891L)); [EOL]       assertEquals(373L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testready()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       char[] charArray0 = new char[18]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = 79; [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int1 = (-2267); [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln((Object) strBuilder1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.deleteAll('o'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 79, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported"); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('i'); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer1.forEachRemaining(consumer0); [EOL]       strTokenizer0.previousToken(); [EOL]       strTokenizer1.setIgnoreEmptyTokens(true); [EOL]       assertEquals(1, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = '`'; [EOL]       charArray0[1] = 'b'; [EOL]       charArray0[2] = '`'; [EOL]       charArray0[3] = '\"'; [EOL]       charArray0[4] = '!'; [EOL]       charArray0[5] = '6'; [EOL]       charArray0[6] = ']'; [EOL]       charArray0[7] = '5'; [EOL]       charArray0[8] = '6'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, 2924, (-1)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("F47@g0~|IH&t"); [EOL]       assertEquals(44, strBuilder0.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       char[] charArray1 = new char[8]; [EOL]        [EOL]       charArray1[0] = 'n'; [EOL]       charArray1[1] = 'n'; [EOL]       charArray1[2] = 'S'; [EOL]       charArray1[3] = 'n'; [EOL]       charArray1[4] = 'S'; [EOL]       charArray1[5] = 'S'; [EOL]       charArray1[6] = 'S'; [EOL]       charArray1[7] = 'S'; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-1), 207, 'S'); [EOL]       assertEquals(438, strBuilder0.capacity()); [EOL]       assertEquals(438, strBuilder1.capacity()); [EOL]        [EOL]       charArray0[1] = 'S'; [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher4 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, 0); [EOL]       assertEquals(438, strBuilder0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) null); [EOL]       assertEquals(438, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       String string0 = StringUtils.strip("xlj[0BAT3@1"); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) "xlj[0BAT3@1"; [EOL]       String string1 = StringUtils.removeStart("xlj[0BAT3@1", "&r"); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "xlj[0BAT3@1"; [EOL]       String string2 = StringUtils.leftPad("xlj[0BAT3@1", 8192, "}^M"); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) string2; [EOL]       String string3 = StringUtils.replaceChars("xlj[0BAT3@1", (String) null, "xlj[0BAT3@1"); [EOL]        [EOL]       charSequenceArray0[3] = (CharSequence) "xlj[0BAT3@1"; [EOL]       String string4 = StringUtils.stripToNull("Minimum abbreviation width is 4"); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width is 4"; [EOL]       String string5 = StringUtils.EMPTY; [EOL]        [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       String string6 = StringUtils.difference("", (String) null); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string7 = StringUtils.substringBefore("", "Index: "); [EOL]        [EOL]       charSequenceArray0[7] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoChar()  throws Throwable  { [EOL]       Character character0 = new Character('3'); [EOL]       char char0 = CharUtils.toChar(character0); [EOL]       assertEquals('3', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(1972, 1972); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('f'); [EOL]       assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-4569442781688233984L), (-4569442781688233984L)); [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       byteArray0[0] = (byte)125; [EOL]       byteArray0[1] = (byte)1; [EOL]       byteArray0[2] = (byte) (-38); [EOL]       byteArray0[3] = (byte)107; [EOL]       byteArray0[4] = (byte) (-72); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0); [EOL]       long[] longArray0 = new long[0]; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0); [EOL]       assertTrue(equalsBuilder3.build()); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = (int) (byte)107; [EOL]       intArray0[1] = (int) (byte) (-38); [EOL]       intArray0[2] = (int) (byte) (-72); [EOL]       intArray0[3] = (int) (byte)1; [EOL]       intArray0[4] = (int) (byte)107; [EOL]       intArray0[5] = (int) (byte) (-38); [EOL]       intArray0[6] = (int) (byte) (-38); [EOL]       intArray0[7] = (int) (byte)125; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(intArray0, (int[]) null); [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) 107; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(objectArray0, objectArray0); [EOL]       equalsBuilder5.append(objectArray0, objectArray0); [EOL]       assertFalse(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[6]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCharSet()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.ASCII_ALPHA_LOWER; [EOL]       CharRange[] charRangeArray0 = charSet0.getCharRanges(); [EOL]       assertEquals(1, charRangeArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.above(1113); [EOL]       boolean boolean0 = numericEntityEscaper0.translate(1113, (Writer) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertEquals(3, stringArray0.length); [EOL]       assertEquals(3, stringArray1.length); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null); [EOL]        [EOL]       String string4 = StringUtils.left("", (-4855)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append('S', 'K'); [EOL]       compareToBuilder0.appendSuper(8); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigitMsb0_4bits()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = true; [EOL]       booleanArray0[3] = true; [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0); [EOL]       assertEquals('7', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(37); [EOL]       double[] doubleArray0 = new double[3]; [EOL]       hashCodeBuilder1.append((double) (-1)); [EOL]       doubleArray0[0] = (double) (-2563); [EOL]       doubleArray0[1] = (double) (-2563); [EOL]       doubleArray0[2] = (double) (-1); [EOL]       hashCodeBuilder0.append(doubleArray0); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '$'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1774), charArray0, 2269, 2269); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1774 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       char[] charArray0 = new char[3]; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]       int int0 = strMatcher_CharSetMatcher0.isMatch(charArray0, 0, (-1), (-1)); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHexDigit()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigit(1); [EOL]       assertEquals('1', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, 1784L); [EOL]       assertEquals(4, strBuilder0.size()); [EOL]       assertEquals(4, strBuilder1.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToByteArray()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       byte[] byteArray1 = Conversion.intToByteArray(1273, (short)0, byteArray0, (short)0, (short) (-43)); [EOL]       assertEquals(0, byteArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = "org.apache.commons.lang3.text.StrBuilder"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder[] strBuilderArray0 = new StrBuilder[0]; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll(strBuilderArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char char0 = '2'; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator('2'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder2.toStringBuilder(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append(stringBuffer0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       strBuilder0.hashCode(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder", (Object[]) strBuilderArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char char1 = ''; [EOL]       int int1 = 0; [EOL]       int int2 = strBuilder1.lastIndexOf('', 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.insert(108, (long) 41); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 108 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       byte byte0 = NumberUtils.min((byte)0, (byte)1, (byte) (-57)); [EOL]       assertEquals((byte) (-57), byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdecrement()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short)0); [EOL]       mutableShort0.decrement(); [EOL]       mutableShort0.add((Number) mutableShort0); [EOL]       assertEquals((-2), mutableShort0.intValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testand()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[2]; [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("vjm@8I}9pL-9$^D", "vjm@8I}9pL-9$^D", "", "Wx/fR7^T5S\" >9P["); [EOL]       booleanArray0[0] = boolean0; [EOL]       Boolean boolean1 = Boolean.valueOf("vjm@8I}9pL-9$^D"); [EOL]       booleanArray0[1] = boolean1; [EOL]       Boolean boolean2 = BooleanUtils.and(booleanArray0); [EOL]       assertFalse(boolean2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutableObject<Object> mutableObject0 = new MutableObject<Object>(); [EOL]       Integer integer0 = new Integer((-61)); [EOL]       MutableObject<Integer> mutableObject1 = new MutableObject<Integer>(integer0); [EOL]       mutableObject0.setValue(mutableObject1); [EOL]       MutableObject<MutableObject<Integer>> mutableObject2 = new MutableObject<MutableObject<Integer>>(mutableObject1); [EOL]       boolean boolean0 = mutableObject2.equals(mutableObject0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""); [EOL]       CompositeFormat compositeFormat0 = new CompositeFormat(mockSimpleDateFormat0, mockSimpleDateFormat0); [EOL]       ParsePosition parsePosition0 = new ParsePosition(2068); [EOL]       Object object0 = compositeFormat0.parseObject("o2`", parsePosition0); [EOL]       NumberFormat numberFormat0 = NumberFormat.getNumberInstance(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]       FieldPosition fieldPosition0 = new FieldPosition((-994)); [EOL]       StringBuffer stringBuffer1 = numberFormat0.format((-1.0), stringBuffer0, fieldPosition0); [EOL]       StringBuffer stringBuffer2 = compositeFormat0.format(object0, stringBuffer0, fieldPosition0); [EOL]       assertSame(stringBuffer2, stringBuffer1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-113), 1, 2, (-451), 3725); [EOL]       long long0 = DateUtils.getFragmentInMinutes((Calendar) mockGregorianCalendar0, 13); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62401465735000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=9,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=213,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=31,SECOND=5,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = ObjectUtils.toString((Object) null, ""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "Dy~{jBj&qu!T}=0k", "remove() is unsupported"); [EOL]       String string0 = strSubstitutor0.replace((Object) null); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported"); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer0.forEachRemaining(consumer0); [EOL]       strTokenizer0.setIgnoreEmptyTokens(true); [EOL]       assertEquals(2, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder5.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, (-2133), (-915)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_QUARTER; [EOL]       int int0 = fraction0.getNumerator(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("yes"); [EOL]       Boolean[] booleanArray0 = new Boolean[4]; [EOL]       booleanArray0[0] = boolean0; [EOL]       booleanArray0[1] = boolean0; [EOL]       booleanArray0[2] = boolean0; [EOL]       booleanArray0[3] = boolean0; [EOL]       Boolean boolean1 = BooleanUtils.and(booleanArray0); [EOL]       assertTrue(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("{}"); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('F'); [EOL]       assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterType("Index: "); [EOL]        [EOL]       String string0 = StringUtils.remove("Index: ", "Index: "); [EOL]        [EOL]       String string1 = StringUtils.defaultIfBlank("", "Index: "); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String[] stringArray1 = null; [EOL]       String string2 = StringUtils.join((String[]) null); [EOL]        [EOL]       String string3 = StringUtils.stripStart("", ""); [EOL]       assertTrue(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNumericSpace(""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Minimum abbreviation width is 4", (-3860)); [EOL]       assertFalse(stringArray2.equals((Object)stringArray0)); [EOL]        [EOL]       String[] stringArray3 = StringUtils.splitByCharacterTypeCamelCase("}8*Qa~s|Xr#26@KMUh"); [EOL]       assertFalse(stringArray3.equals((Object)stringArray0)); [EOL]       assertFalse(stringArray3.equals((Object)stringArray2)); [EOL]        [EOL]       String string4 = "7Q|jY>Y "; [EOL]       String string5 = StringUtils.substring("7Q|jY>Y ", 256, (-3860)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertTrue(string5.equals((Object)string0)); [EOL]       assertTrue(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]        [EOL]       String string6 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       String string7 = "\\u00"; [EOL]       String[] stringArray4 = StringUtils.split("Index: ", string7); [EOL]       assertFalse(string7.equals((Object)string1)); [EOL]       assertFalse(string7.equals((Object)string0)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]       assertFalse(stringArray4.equals((Object)stringArray0)); [EOL]       assertFalse(stringArray4.equals((Object)stringArray3)); [EOL]       assertFalse(stringArray4.equals((Object)stringArray2)); [EOL]        [EOL]       String string8 = StringUtils.left("7Q|jY>Y ", (-3860)); [EOL]       assertFalse(string8.equals((Object)string1)); [EOL]       assertFalse(string8.equals((Object)string4)); [EOL]       assertTrue(string8.equals((Object)string0)); [EOL]       assertTrue(string8.equals((Object)string3)); [EOL]       assertFalse(string8.equals((Object)string7)); [EOL]        [EOL]       int[] intArray0 = new int[0]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(intArray0, 'j', 0, 256); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.setSummaryObjectEndText("Windows 9"); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetMatchingAccessibleConstructor()  throws Throwable  { [EOL]       Class<Annotation> class0 = Annotation.class; [EOL]       Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0); [EOL]       Constructor<Annotation> constructor0 = ConstructorUtils.getMatchingAccessibleConstructor(class0, (Class<?>[]) classArray0); [EOL]       assertNull(constructor0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetClass()  throws Throwable  { [EOL]       ClassLoader classLoader0 = ClassLoader.getSystemClassLoader(); [EOL]       Class<?> class0 = ClassUtils.getClass(classLoader0, "org.apache.commons.lang3.JavaVersion"); [EOL]       assertFalse(class0.isInterface()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testvalidIndex()  throws Throwable  { [EOL]       String string0 = Validate.validIndex("D0yCkn", 1); [EOL]       assertEquals("D0yCkn", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testinitialize()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null, (Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       Properties properties0 = new Properties(); [EOL]       String string0 = StrSubstitutor.replace((Object) null, properties0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[0] = object0; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) null; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) strBuilder0; [EOL]       objectArray0[5] = (Object) strBuilder0; [EOL]       objectArray0[6] = (Object) null; [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "length must be valid"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendWithSeparators(objectArray0, (String) null); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((CharSequence) strBuilder0, 31, 31); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]       assertTrue(reader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(1L); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       float float0 = ObjectUtils.CONST((-560.4F)); [EOL]       assertEquals((-560.4F), float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendNewLine(); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append((Object) strBuilder1); [EOL]       assertEquals(102, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(102, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = new StrBuilder((String) null); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher(); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.deleteFirst(strMatcher0); [EOL]       assertEquals(102, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(102, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]       assertEquals(102, strBuilder5.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong((-1L)); [EOL]       mutableLong0.hashCode(); [EOL]       assertEquals((-1.0), mutableLong0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 9, '>'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteAll('F'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append('F'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strBuilder_StrBuilderTokenizer0.getContent(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.replaceFirst((String) null, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(9); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.appendPadding((-414), '='); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.append(">>>>>>>>>F"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertEquals(57, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(57, strBuilder0.length()); [EOL]        [EOL]       String string1 = strBuilder_StrBuilderTokenizer0.nextToken(); [EOL]       assertEquals(57, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertEquals(57, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((Object) strBuilder_StrBuilderTokenizer1); [EOL]       assertEquals(129, strBuilder0.length()); [EOL]       assertEquals(129, strBuilder1.length()); [EOL]        [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder2 = strBuilder1.append((char[]) null, 7, 7); [EOL]       assertEquals(129, strBuilder0.length()); [EOL]       assertEquals(129, strBuilder1.length()); [EOL]       assertEquals(129, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendSeparator("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertEquals(186, strBuilder0.length()); [EOL]       assertEquals(186, strBuilder1.length()); [EOL]       assertEquals(186, strBuilder3.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-2599), (float) (-2599)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -2599 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEnableSubstitutionInVariables()  throws Throwable  { [EOL]       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, "ZFU$pUC", "ZFU$pUC"); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.setVariablePrefix("ZFU$pUC"); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("(?: s|[s&&[^ ]])s*", (String) null, (String) null, 2); [EOL]        [EOL]       String string1 = StringUtils.chop(""); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllLowerCase(""); [EOL]        [EOL]       short[] shortArray0 = new short[2]; [EOL]       shortArray0[0] = (short)947; [EOL]       shortArray0[1] = (short)7; [EOL]       String string2 = StringUtils.join(shortArray0, 'j'); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.center("org.apache.commons.lang3.CharSequenceUtils", 4, "oK@B}4"); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       String string4 = StringUtils.abbreviate("", 127); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertTrue(string4.equals((Object)string1)); [EOL]        [EOL]       long[] longArray0 = new long[1]; [EOL]       longArray0[0] = (long) 4; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(longArray0, 'j', (-1089), (int) (short)947); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -1089 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), (-1), '/'); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder2.length()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals(2, charBuffer0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(2, charBuffer0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher("q=e;yKvV#~sM4D<2"); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) (-1)); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder1.length()); [EOL]       assertEquals(2, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.ensureCapacity((-1)); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder1.length()); [EOL]       assertEquals(2, strBuilder3.length()); [EOL]       assertEquals(2, strBuilder4.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));yKvV#~sM4D<2")); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]       assertEquals(2, strBuilder5.length()); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder1.length()); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(charArray1); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder6.length()); [EOL]       assertEquals(2, charArray1.length); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 101, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((-5438)); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = 102; [EOL]       StrBuilder strBuilder0 = new StrBuilder(102); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.chars(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder_StrBuilderWriter0.append('H'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'H'; [EOL]       charArray0[1] = 'H'; [EOL]       charArray0[2] = 'H'; [EOL]       charArray0[3] = 'H'; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((float) 102); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder0, 102, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -103 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder8.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder9.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder0.appendFixedWidthPadRight(2808, 0, '\\'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder10.isEmpty()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith("Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-2524.258622), (-2524.258622)); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("1so6^[^z!mYS2"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder("1so6^[^z!mYS2"); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(strBuilder2); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendFixedWidthPadRight((-364), (-364), ';'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendln(strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testregister()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('['); [EOL]       short[] shortArray0 = new short[7]; [EOL]       shortArray0[0] = (short)37; [EOL]       shortArray0[1] = (short) (-1872); [EOL]       shortArray0[2] = (short)2; [EOL]       HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder1, true); [EOL]       shortArray0[3] = (short)2; [EOL]       shortArray0[4] = (short) (-132); [EOL]       HashCodeBuilder.getRegistry(); [EOL]       shortArray0[5] = (short) (-1654); [EOL]       shortArray0[6] = (short)778; [EOL]       hashCodeBuilder1.append(shortArray0); [EOL]       HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((int[]) null); [EOL]       IDKey iDKey0 = new IDKey(hashCodeBuilder2); [EOL]       HashCodeBuilder.register(iDKey0); [EOL]       Integer integer0 = hashCodeBuilder2.build(); [EOL]       assertEquals((-847924507), (int)integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = (-2195); [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-2195)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-2195)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.deleteCharAt((-2195)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -2195 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = CharSequenceUtils.indexOf("", (-1), 2); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (double) 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       MockThread mockThread0 = new MockThread(""); [EOL]       Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Thread thread0 = basicThreadFactory0.newThread(mockThread0); [EOL]       assertEquals(0, thread0.countStackFrames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappendSuper()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(4); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append(0); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder1.append((-771.0)); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'k'; [EOL]       charArray0[1] = '$'; [EOL]       charArray0[2] = '?'; [EOL]       charArray0[3] = 'N'; [EOL]       StringBuilder stringBuilder3 = stringBuilder2.append(charArray0); [EOL]        [EOL]       StringBuilder stringBuilder4 = stringBuilder3.insert(2, charArray0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuilder4); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write("'fe:RqN$"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((StringBuffer) null, (-1729), (-1729)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.setNewLineText("'fe:RqN$"); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.subSequence((-1729), (-3524)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1729 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(351L); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding((-2463), 'u'); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       short[] shortArray0 = new short[3]; [EOL]       shortArray0[0] = (short) (-2666); [EOL]       shortArray0[1] = (short)0; [EOL]       shortArray0[2] = (short) (-5390); [EOL]       String string0 = StringUtils.join(shortArray0, 'Z'); [EOL]        [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[0] = "-2666Z0Z-5390"; [EOL]       stringArray0[1] = "-2666Z0Z-5390"; [EOL]       stringArray0[2] = "t4{@"; [EOL]       stringArray0[3] = "ZzL/mxS_"; [EOL]       stringArray0[4] = "-2666Z0Z-5390"; [EOL]       String string1 = StringUtils.replaceEach("-2666Z0Z-5390", stringArray0, stringArray0); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>(); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(treeSet0); [EOL]        [EOL]       Iterator<Object> iterator0 = arrayList0.iterator(); [EOL]        [EOL]       String string2 = StringUtils.join(iterator0, "t4{@"); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = 'Z'; [EOL]       charArray0[1] = 'Z'; [EOL]       charArray0[2] = 'Z'; [EOL]       charArray0[3] = 'Z'; [EOL]       charArray0[4] = 'Z'; [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) "-2666Z0Z-5390", charArray0); [EOL]        [EOL]       String string3 = StringUtils.substringAfterLast("", "q68\"_A=sl"); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       String string4 = StringUtils.join(charArray0, 'Z', (int) (short) (-5390), (int) (short) (-5390)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertTrue(string4.equals((Object)string3)); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "t4{@", (-2173), 256); [EOL]        [EOL]       String string5 = StringUtils.replaceChars("_b!D3>[~%coiw&'x", "", "Arguments cannot both be null"); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       char[] charArray0 = new char[6]; [EOL]       Long[] longArray0 = new Long[1]; [EOL]       Long long0 = new Long(0L); [EOL]       longArray0[0] = long0; [EOL]       long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) charArray0[2]); [EOL]       assertEquals(1, longArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextToken()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("$i%f"); [EOL]       strTokenizer0.nextToken(); [EOL]       strTokenizer0.setDelimiterChar('S'); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprimitiveToWrapper()  throws Throwable  { [EOL]       Class<Double> class0 = Double.TYPE; [EOL]       Class<?> class1 = ClassUtils.primitiveToWrapper(class0); [EOL]       assertEquals(17, class1.getModifiers()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0); [EOL]        [EOL]       int int1 = 924; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft(0, 924, 'y'); [EOL]        [EOL]       boolean boolean0 = strBuilder0.contains((String) null); [EOL]        [EOL]       char char0 = '8'; [EOL]       int int2 = strBuilder0.indexOf('8'); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder((String) null); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       StringBuffer stringBuffer0 = null; [EOL]       try { [EOL]         stringBuffer0 = new StringBuffer((CharSequence) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviate((String) null, 10, 10); [EOL]        [EOL]       String string1 = StringUtils.defaultString("</[=a%spkSb/6M"); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "</[=a%spkSb/6M"); [EOL]        [EOL]       int int0 = StringUtils.length("</[=a%spkSb/6M"); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       String string2 = StringUtils.right("", 10); [EOL]        [EOL]       String string3 = StringUtils.reverse("</[=a%spkSb/6M"); [EOL]        [EOL]       double[] doubleArray0 = new double[6]; [EOL]       doubleArray0[0] = (-1458.16836053); [EOL]       doubleArray0[1] = (double) (-1); [EOL]       doubleArray0[2] = (double) 10; [EOL]       doubleArray0[3] = (double) 10; [EOL]       doubleArray0[4] = 0.0; [EOL]       doubleArray0[5] = (-779.41); [EOL]       String string4 = StringUtils.join(doubleArray0, 'm', 10, 0); [EOL]       assertEquals(6, doubleArray0.length); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = (-1457); [EOL]       intArray0[1] = 14; [EOL]       intArray0[2] = (-1); [EOL]       intArray0[3] = (-1); [EOL]       intArray0[4] = 10; [EOL]       intArray0[5] = (int) 'm'; [EOL]       intArray0[6] = 14; [EOL]       intArray0[7] = 10; [EOL]       String string5 = StringUtils.join(intArray0, 'r'); [EOL]       assertEquals(8, intArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.get("1.2"); [EOL]       assertEquals(JavaVersion.JAVA_1_2, javaVersion0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexToLong()  throws Throwable  { [EOL]       long long0 = Conversion.hexToLong("CHQE\n8;\"", (-1142), 0L, 726, (-1142)); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('5'); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(40); [EOL]       Triple<String, Integer, Object> triple0 = Triple.of("org.apache.commons.lang3.exception.CloneFailedException", integer0, (Object) integer0); [EOL]       ImmutableTriple<MutableTriple<String, Object, Object>, String, Object> immutableTriple0 = ImmutableTriple.of((MutableTriple<String, Object, Object>) null, "org.apache.commons.lang3.exception.CloneFailedException", (Object) triple0); [EOL]       MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>("org.apache.commons.lang3.exception.CloneFailedException", immutableTriple0, "org.apache.commons.lang3.builder.CompareToBuilder"); [EOL]       MutableTriple<String, Integer, Triple<Object, Object, String>> mutableTriple1 = MutableTriple.of("org.apache.commons.lang3.builder.CompareToBuilder", integer0, (Triple<Object, Object, String>) mutableTriple0); [EOL]       boolean boolean0 = mutableTriple1.equals((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder0.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       int int0 = 102; [EOL]       StrBuilder strBuilder1 = strBuilder0.append(102); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char char0 = 'q'; [EOL]       StrBuilder strBuilder2 = strBuilder1.append((double) 117); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder2.leftString(102); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendSeparator('q', 117); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.append(stringBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.appendln(strBuilder3, 117, 1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBetween("b#7v\"Z6i?umpQU", "b#7v\"Z6i?umpQU"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       charSequenceArray0[0] = (CharSequence) null; [EOL]       String string1 = "The character must not be null"; [EOL]       int int0 = 229; [EOL]       String string2 = StringUtils.abbreviate("The character must not be null", 229); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "The character must not be null"; [EOL]       charSequenceArray0[2] = (CharSequence) null; [EOL]       int int1 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0); [EOL]       assertEquals(3, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsWhitespace(charSequenceArray0[0]); [EOL]       assertEquals(3, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumericSpace("The character must not be null"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("", 229, (-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("&uiM4\"5g,@ppG"); [EOL]       assertEquals(45, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder("line.separator"); [EOL]       assertEquals(46, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]       assertEquals(45, strBuilder0.capacity()); [EOL]       assertEquals(46, strBuilder1.capacity()); [EOL]       assertEquals(45, strBuilder2.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       objectArray0[0] = (Object) "oIj {5P}vL!>"; [EOL]       objectArray0[1] = (Object) "oIj {5P}vL!>"; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[2] = object0; [EOL]       objectArray0[3] = (Object) "&uiM4\"5g,@ppG"; [EOL]       objectArray0[4] = (Object) strBuilder0; [EOL]       objectArray0[5] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln("oIj {5P}vL!>", objectArray0); [EOL]       assertEquals(46, strBuilder1.capacity()); [EOL]       assertEquals(46, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.replaceFirst("'l+&r7", "line.separator"); [EOL]       assertEquals(45, strBuilder0.capacity()); [EOL]       assertEquals(46, strBuilder1.capacity()); [EOL]       assertEquals(45, strBuilder2.capacity()); [EOL]       assertEquals(45, strBuilder4.capacity()); [EOL]        [EOL]       int int0 = (-3301); [EOL]       StringBuilder stringBuilder0 = null; [EOL]       try { [EOL]         stringBuilder0 = new StringBuilder((-3301)); [EOL]         fail("Expecting exception: NegativeArraySizeException"); [EOL]        [EOL]       } catch(NegativeArraySizeException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(117); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.reverse(); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter(); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((char[]) null, 117, (-3048)); [EOL]        [EOL]       Object[] objectArray0 = new Object[9]; [EOL]       objectArray0[0] = (Object) strBuilder3; [EOL]       objectArray0[1] = (Object) strBuilder3; [EOL]       objectArray0[2] = (Object) "Invalid startIndex: "; [EOL]       objectArray0[3] = (Object) strMatcher0; [EOL]       StrBuilder strBuilder4 = new StrBuilder(117); [EOL]       assertTrue(strBuilder4.equals((Object)strBuilder1)); [EOL]       assertTrue(strBuilder4.equals((Object)strBuilder3)); [EOL]       assertTrue(strBuilder4.equals((Object)strBuilder0)); [EOL]       assertTrue(strBuilder4.equals((Object)strBuilder2)); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]       assertTrue(strBuilder4.equals((Object)strBuilder1)); [EOL]       assertTrue(strBuilder4.equals((Object)strBuilder3)); [EOL]       assertTrue(strBuilder4.equals((Object)strBuilder0)); [EOL]       assertTrue(strBuilder4.equals((Object)strBuilder2)); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertTrue(strBuilder4.equals((Object)strBuilder1)); [EOL]       assertTrue(strBuilder4.equals((Object)strBuilder3)); [EOL]       assertTrue(strBuilder4.equals((Object)strBuilder0)); [EOL]       assertTrue(strBuilder4.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0)); [EOL]        [EOL]       objectArray0[4] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[5] = object0; [EOL]       objectArray0[6] = (Object) "Invalid startIndex: "; [EOL]       objectArray0[7] = (Object) strBuilder_StrBuilderWriter0; [EOL]       objectArray0[8] = (Object) strMatcher0; [EOL]       StrBuilder strBuilder5 = strBuilder2.appendln("Invalid startIndex: ", objectArray0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder4)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder4)); [EOL]       assertFalse(strBuilder5.equals((Object)strBuilder4)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStackFrames()  throws Throwable  { [EOL]       String[] stringArray0 = ExceptionUtils.getStackFrames("[Hf_?)Sx5uV90XU.OG\""); [EOL]       assertEquals(1, stringArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(0); [EOL]       mutableInt0.add(3990); [EOL]       int int0 = mutableInt0.intValue(); [EOL]       assertEquals(3990, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPattern()  throws Throwable  { [EOL]       Locale locale0 = Locale.ENGLISH; [EOL]       HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>(); [EOL]       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("@=^AN`J?nWy:O{4}", locale0, hashMap0); [EOL]       extendedMessageFormat0.applyPattern("@=^AN`J?nWy:O{4}"); [EOL]       assertEquals("@=^AN`J?nWy:O{4}", extendedMessageFormat0.toPattern()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln("Op@VD%uv8O6;z[\"gC"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator('a', 6); [EOL]        [EOL]       TreeSet<String> treeSet0 = new TreeSet<String>();z[\"gC")); [EOL]        [EOL]       TreeSet<String> treeSet1 = new TreeSet<String>((SortedSet<String>) treeSet0);z[\"gC"));z[\"gC")); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterable<?>) treeSet1, "Op@VD%uv8O6;z[\"gC");z[\"gC"));z[\"gC")); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.mark(115); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       int int0 = (-1726); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1726), 'b'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1726 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       String string0 = "hZ3CNnc|]e"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.minimizeCapacity(); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]       assertEquals(10, strBuilder1.size()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]       assertEquals(114, strBuilder0.size()); [EOL]       assertEquals(114, strBuilder2.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll(strMatcher0); [EOL]       assertEquals(114, strBuilder0.size()); [EOL]       assertEquals(114, strBuilder2.size()); [EOL]       assertEquals(114, strBuilder3.size()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(114, strBuilder0.size()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertEquals(114, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append((long) 104); [EOL]       assertEquals(117, strBuilder0.size()); [EOL]       assertEquals(117, strBuilder2.size()); [EOL]       assertEquals(117, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.ensureCapacity(104); [EOL]       assertEquals(117, strBuilder0.size()); [EOL]       assertEquals(117, strBuilder2.size()); [EOL]       assertEquals(117, strBuilder4.size()); [EOL]       assertEquals(117, strBuilder5.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(117, strBuilder0.size()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.getTokenList(); [EOL]       assertEquals(1, list0.size()); [EOL]       assertEquals(117, strBuilder0.size()); [EOL]        [EOL]       List<String> list1 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]       assertEquals(117, strBuilder0.size()); [EOL]       assertEquals(0, list1.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder6.size()); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]       assertEquals(120, strBuilder0.size()); [EOL]       assertEquals(120, strBuilder7.size()); [EOL]        [EOL]       int int2 = 101; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append("/t@?VM", (-775), (-3316)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       int int0 = (-302); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.setLength((-302)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -302 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[6]; [EOL]       byteArray0[0] = (byte) (-1); [EOL]       boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1)); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFormattedExceptionMessage()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(""); [EOL]       String string0 = contextedRuntimeException0.getFormattedExceptionMessage("Exception Context:\n"); [EOL]       assertEquals("Exception Context:\n", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       char[] charArray0 = new char[5]; [EOL]       ArrayUtils.reverse(charArray0); [EOL]       assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-1451)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       String string0 = range0.toString("(x 0oq-IW,yyw#h*Sl"); [EOL]       assertEquals("(x 0oq-IW,yyw#h*Sl", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = 31; [EOL]       strBuilder_StrBuilderWriter0.write(31); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("", (-1), (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n"); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, ""); [EOL]       assertTrue(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string6)); [EOL]       assertFalse(string4.equals((Object)string5)); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]       assertFalse(string7.equals((Object)string6)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string2)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '^'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-719); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[3] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]       assertFalse(string8.equals((Object)string7)); [EOL]       assertFalse(string8.equals((Object)string2)); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]       assertFalse(string8.equals((Object)string4)); [EOL]       assertFalse(string8.equals((Object)string5)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]       assertEquals(1, stringArray1.length); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       String string4 = StringUtils.defaultIfEmpty((String) null, ":;6z");6z", string4); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOfIgnoreCase()  throws Throwable  { [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "|{s@(4`4p", (CharSequence) "|{s@(4`4p", 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int1 = strBuilder6.validateRange(0, 1320); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder8.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder9.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       String string0 = strBuilder8.getNullText(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder8.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Short[] shortArray0 = new Short[2]; [EOL]       Short short0 = new Short((short)20); [EOL]       shortArray0[0] = short0; [EOL]       shortArray0[1] = shortArray0[0]; [EOL]       short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0); [EOL]       assertArrayEquals(new short[] {(short)20, (short)20}, shortArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '['; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("LINUX"); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.chars(); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((String) null, 1, 1); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(3217L); [EOL]       Double double0 = new Double(0.0); [EOL]       mutableLong0.setValue((Number) double0); [EOL]       mutableLong0.add(3217L); [EOL]       mutableLong0.getValue(); [EOL]       assertEquals(3217L, (long)mutableLong0.toLong()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTaskCount()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.getActiveExecutor(); [EOL]       ExecutorService executorService0 = callableBackgroundInitializer0.getActiveExecutor(); [EOL]       Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Object> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Object>(callable1, executorService0); [EOL]       callableBackgroundInitializer1.isStarted(); [EOL]       Callable<Callable<Delayed>> callable2 = (Callable<Callable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Callable<Delayed>> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Callable<Delayed>>(callable2); [EOL]       ExecutorService executorService1 = callableBackgroundInitializer2.getExternalExecutor(); [EOL]       assertNull(executorService1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoFloat()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.subtract((-1.7143645F)); [EOL]       mutableFloat0.toFloat(); [EOL]       assertEquals(1.7143645286560059, mutableFloat0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]       assertEquals(18, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]       assertEquals(36, strBuilder0.size()); [EOL]       assertEquals(36, strBuilder2.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       assertEquals(54, strBuilder0.size()); [EOL]       assertEquals(54, strBuilder3.size()); [EOL]       assertEquals(54, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder4.size()); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder4.size()); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]       assertEquals(86, strBuilder0.size()); [EOL]       assertEquals(86, strBuilder3.size()); [EOL]       assertEquals(86, strBuilder5.size()); [EOL]       assertEquals(86, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]       assertEquals(93, strBuilder0.size()); [EOL]       assertEquals(93, strBuilder3.size()); [EOL]       assertEquals(93, strBuilder6.size()); [EOL]       assertEquals(93, strBuilder2.size()); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       String string1 = locale0.getDisplayVariant(); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertEquals(0, set0.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertEquals(93, strBuilder0.size()); [EOL]       assertEquals(93, strBuilder4.size()); [EOL]       assertEquals(0, set0.size()); [EOL]       assertEquals(93, strBuilder7.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert(1, charArray0, 31, 1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid offset: 31 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlanguagesByCountry()  throws Throwable  { [EOL]       List<Locale> list0 = LocaleUtils.languagesByCountry(""); [EOL]       assertFalse(list0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln("Op@VD%uv8O6;z[\"gC"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator('a', 6); [EOL]        [EOL]       TreeSet<String> treeSet0 = new TreeSet<String>(); [EOL]       assertFalse(treeSet0.contains("Op@VD%uv8O6;z[\"gC")); [EOL]        [EOL]       TreeSet<String> treeSet1 = new TreeSet<String>((SortedSet<String>) treeSet0); [EOL]       assertFalse(treeSet0.contains("Op@VD%uv8O6;z[\"gC")); [EOL]       assertFalse(treeSet1.contains("Op@VD%uv8O6;z[\"gC")); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterable<?>) treeSet1, "Op@VD%uv8O6;z[\"gC"); [EOL]       assertFalse(treeSet0.contains("Op@VD%uv8O6;z[\"gC")); [EOL]       assertFalse(treeSet1.contains("Op@VD%uv8O6;z[\"gC")); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       strBuilder_StrBuilderReader0.mark(115); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]        [EOL]       int int0 = (-1726); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1726), 'b'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1726 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1354); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setQuoteMatcher(strMatcher0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append('E'); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.charAt(2193); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2193 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = 276.59881; [EOL]       String[] stringArray0 = new String[4]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = "^2b *9$Dg"; [EOL]       ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0); [EOL]       CompositeFormat compositeFormat0 = new CompositeFormat(choiceFormat0, choiceFormat0); [EOL]       String string0 = compositeFormat0.reformat("^2b *9$Dg"); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(0, 798); [EOL]       int int0 = fraction0.getNumerator(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Iterable<?>) null, (String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher((String) null); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('L'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Iterable<?>) null, ""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("r8T0ER3M!z7l6zL5!"); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((double) 0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       String string0 = strBuilder4.build(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.deleteFirst((String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder5.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "os.arch"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder6.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.isEmpty(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals(strBuilder4); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       String string1 = strBuilder1.getNullText(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendSeparator(", Length: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder7.capacity()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.insert(0, false); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder8.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'L'; [EOL]       charArray0[1] = 'L'; [EOL]       charArray0[2] = 'L'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.append(charArray0, 1898, 1898); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: 1898 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[5]; [EOL]       Short short0 = new Short((short) (-1362)); [EOL]       Object[] objectArray1 = ArrayUtils.add(objectArray0, (Object) short0); [EOL]       assertEquals(6, objectArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       String string0 = StringUtils.mid("-", (-385), (-385)); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "|qO{l0uUU|R8lUrfn"; [EOL]       long[] longArray0 = new long[9]; [EOL]       longArray0[0] = (long) (-385); [EOL]       longArray0[1] = (long) (-385); [EOL]       longArray0[2] = (long) (-385); [EOL]       longArray0[3] = (long) (-385); [EOL]       longArray0[4] = 3213L; [EOL]       longArray0[5] = (long) (-385); [EOL]       longArray0[6] = (long) (-385); [EOL]       longArray0[7] = (long) (-385); [EOL]       String string1 = StringUtils.join(longArray0, 'D'); [EOL]       assertEquals(9, longArray0.length); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) "-385D-385D-385D-385D3213D-385D-385D-385D0"; [EOL]       charSequenceArray0[7] = (CharSequence) "|qO{l0uUU|R8lUrfn"; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetMiddle()  throws Throwable  { [EOL]       ImmutableTriple<Object, String, String> immutableTriple0 = ImmutableTriple.of((Object) null, "c(j,I&N$orhDD/xljLT", "c(j,I&N$orhDD/xljLT"); [EOL]       String string0 = immutableTriple0.getMiddle(); [EOL]       assertEquals("c(j,I&N$orhDD/xljLT", string0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0); [EOL]       assertNotSame(intArray1, intArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetAllSuperclasses()  throws Throwable  { [EOL]       List<Class<?>> list0 = ClassUtils.getAllSuperclasses((Class<?>) null); [EOL]       assertNull(list0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = ", '"; [EOL]       String string1 = StringUtils.trimToEmpty(", '"); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = "Search and Replace array lengths don't match: "; [EOL]       char char0 = '{'; [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ", '{'); [EOL]        [EOL]       int int0 = 0; [EOL]       int int1 = StringUtils.indexOf((CharSequence) ", '", 0); [EOL]        [EOL]       Locale locale0 = Locale.FRENCH; [EOL]        [EOL]       Locale locale1 = (Locale)locale0.clone(); [EOL]       assertTrue(locale1.equals((Object)locale0)); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertTrue(locale0.equals((Object)locale1)); [EOL]        [EOL]       String string3 = StringUtils.upperCase("g1p(?Y6E\"bQ0_G", locale0); [EOL]       assertTrue(locale0.equals((Object)locale1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       long[] longArray0 = new long[5]; [EOL]       longArray0[0] = (long) '{'; [EOL]       longArray0[1] = (long) (-1); [EOL]       longArray0[2] = (long) (-1); [EOL]       longArray0[3] = (long) 0; [EOL]       longArray0[4] = (long) (-1); [EOL]       String string4 = StringUtils.join(longArray0, '{'); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]        [EOL]       String string5 = StringUtils.replaceChars("G1P(?Y6E\"BQ0_G", "g1p(?Y6E\"bQ0_G", ", '"); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("Search and Replace array lengths don't match: ", (-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisInfinite()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble("0"); [EOL]       assertFalse(mutableDouble0.isInfinite()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), (-1), '/'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher("q=e;yKvV#~sM4D<2"); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) (-1)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.ensureCapacity((-1)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));yKvV#~sM4D<2")); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]       assertTrue(list0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(charArray1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 101, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("AEhzPmLst|m|:e7J{Z"); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendFieldSeparator(stringBuffer0); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt((-2587)); [EOL]       MutableInt mutableInt1 = new MutableInt(mutableInt0); [EOL]       mutableInt1.subtract((Number) mutableInt0); [EOL]       boolean boolean0 = mutableInt1.equals(mutableInt0); [EOL]       assertEquals(0L, mutableInt1.longValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short)0); [EOL]       mutableShort0.increment(); [EOL]       short short0 = mutableShort0.shortValue(); [EOL]       assertEquals(1.0, mutableShort0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.replace(0, 0, (String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll('a'); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendSeparator('a'); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       char char0 = '0'; [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll('0', '0'); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       int int1 = (-604); [EOL]       int int2 = (-611); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.substring((-604), (-611)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -604 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 1359); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisPackageAccess()  throws Throwable  { [EOL]       boolean boolean0 = MemberUtils.isPackageAccess(0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertEquals(9, strBuilder0.length()); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]       assertEquals(106, strBuilder0.length()); [EOL]       assertEquals(106, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("SzpQ!4 ;U"); [EOL]       assertEquals(115, strBuilder0.length()); [EOL]       assertEquals(115, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]       assertEquals(119, strBuilder0.length()); [EOL]       assertEquals(119, strBuilder2.length()); [EOL]       assertEquals(119, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.append('`'); [EOL]       assertEquals(120, strBuilder0.length()); [EOL]       assertEquals(120, strBuilder2.length()); [EOL]       assertEquals(120, strBuilder3.length()); [EOL]       assertEquals(120, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceFirst("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]       assertEquals(120, strBuilder0.length()); [EOL]       assertEquals(120, strBuilder1.length()); [EOL]       assertEquals(120, strBuilder5.length()); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertEquals(120, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder2.replaceAll("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]       assertEquals(120, strBuilder0.length()); [EOL]       assertEquals(120, strBuilder2.length()); [EOL]       assertEquals(120, strBuilder6.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testwrite()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNotNull(writer0); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf((String) null, 3954); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.trim(); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder6 = strBuilder4.append(6); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       String string0 = WordUtils.capitalizeFully((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chomp(" ", " "); [EOL]        [EOL]       StringUtils.equalsIgnoreCase("", " "); [EOL]       String string1 = StringUtils.center(" ", 2340, 'd'); [EOL]       StringUtils.stripEnd("", "e"); [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) ""); [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]       StringUtils.contains((CharSequence) " ", 2340); [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, "", (-1)); [EOL]       StringUtils.join((Object[]) stringArray0, "", 1663, (-1)); [EOL]       String string2 = StringUtils.SPACE; [EOL]       String string3 = StringUtils.stripToEmpty("e"); [EOL]        [EOL]       String string4 = StringUtils.remove("e", "\n"); [EOL]        [EOL]       CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "e", (CharSequence) ""); [EOL]        [EOL]       StringUtils.getLevenshteinDistance((CharSequence) "e", (CharSequence) "e"); [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0, ""); [EOL]       assertEquals(2, stringArray1.length); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "", 1663, (-1)); [EOL]        [EOL]       StringUtils.difference("", ""); [EOL]       String string5 = StringUtils.reverse(" "); [EOL]        [EOL]       StringUtils.startsWith("\n", ""); [EOL]       StringUtils.endsWith(" ", ""); [EOL]       StringUtils.isNumericSpace(""); [EOL]       StringUtils.substringAfterLast("e", " "); [EOL]       StringUtils.swapCase((String) null); [EOL]       float[] floatArray0 = new float[7]; [EOL]       floatArray0[0] = (float) 0; [EOL]       floatArray0[1] = (float) 'd'; [EOL]       floatArray0[2] = (float) 2340; [EOL]       floatArray0[3] = (float) 0; [EOL]       floatArray0[4] = (float) 0; [EOL]       floatArray0[5] = (-982.0F); [EOL]       floatArray0[6] = (float) 1663; [EOL]       String string6 = StringUtils.join(floatArray0, 'd', 4516, 0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       Short short0 = new Short((short) (-1)); [EOL]       mutableFloat0.setValue((Number) short0); [EOL]       long long0 = mutableFloat0.longValue(); [EOL]       assertEquals((-1L), long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetTrimmerMatcher()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("Invalid offset: ", "Invalid offset: "); [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("Invalid offset: "); [EOL]       strTokenizer0.setQuoteMatcher(strMatcher0); [EOL]       strTokenizer0.setTrimmerMatcher(strMatcher0); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('%'); [EOL]       String[] stringArray0 = strTokenizer1.getTokenArray(); [EOL]       assertEquals(0, stringArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       byteArray0[0] = (byte) (-32); [EOL]       byteArray0[1] = (byte)105; [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[3] = (byte) (-1); [EOL]       byteArray0[4] = (byte) (-21); [EOL]       byte[] byteArray1 = new byte[4]; [EOL]       byteArray1[0] = (byte)0; [EOL]       byteArray1[1] = (byte)0; [EOL]       byteArray1[2] = (byte) (-21); [EOL]       byteArray1[3] = (byte)0; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1); [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = true; [EOL]       booleanArray0[3] = true; [EOL]       booleanArray0[4] = true; [EOL]       booleanArray0[5] = false; [EOL]       booleanArray0[6] = true; [EOL]       booleanArray0[7] = true; [EOL]       booleanArray0[8] = true; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(booleanArray0, booleanArray0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder1.append((short)947, (short)0); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder0.append((byte) (-1), (byte)105); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder2.append((Object) equalsBuilder3, (Object) equalsBuilder4); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append((byte) (-21), (byte)41); [EOL]       double[] doubleArray0 = new double[6]; [EOL]       doubleArray0[0] = (double) (short)0; [EOL]       doubleArray0[1] = (double) (byte) (-21); [EOL]       doubleArray0[2] = (double) (byte) (-1); [EOL]       doubleArray0[3] = (double) (byte)0; [EOL]       doubleArray0[4] = (double) (byte)0; [EOL]       doubleArray0[5] = (double) (byte) (-21); [EOL]       EqualsBuilder equalsBuilder7 = equalsBuilder6.append(doubleArray0, doubleArray0); [EOL]       equalsBuilder7.reset(); [EOL]       assertTrue(equalsBuilder1.isEquals()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln('h'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteCharAt(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       int int0 = strBuilder2.capacity(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int1 = strBuilder2.lastIndexOf('b', 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((char[]) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[18]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals("n:qv{0F`Yb3&H^f*N2", charBuffer0.toString()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals("n:qv{0F`Yb3&H^f*N2", charBuffer0.toString()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertEquals("", charBuffer1.toString()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[8]; [EOL]       Float float0 = new Float((-1444.746F)); [EOL]       floatArray0[0] = float0; [EOL]       float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1484.0985F)); [EOL]       assertArrayEquals(new float[] {(-1444.746F), (-1484.0985F), (-1484.0985F), (-1484.0985F), (-1484.0985F), (-1484.0985F), (-1484.0985F), (-1484.0985F)}, floatArray1, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testwrap()  throws Throwable  { [EOL]       String string0 = WordUtils.wrap("wil!RZ_<1#D", (-1125), (String) null, true); [EOL]       assertEquals("w\ni\nl\n!\nR\nZ\n_\n<\n1\n#\nD", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       String string0 = strBuilder4.leftString(2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       int int0 = strBuilder4.indexOf(strMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 10, 2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int1 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder8.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 10, 2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder9.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       String[] stringArray0 = new String[2]; [EOL]       String string0 = CharSetUtils.delete("org.apache.commons.lang3.CharSetUtils", stringArray0); [EOL]       assertEquals("org.apache.commons.lang3.CharSetUtils", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("NIa|", ""); [EOL]        [EOL]       String string1 = StringUtils.join((long[]) null, '_'); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("NIa|", (CharSequence) null); [EOL]        [EOL]       String string2 = StringUtils.chop(""); [EOL]        [EOL]       String string3 = StringUtils.substring((String) null, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]        [EOL]       String string4 = StringUtils.chomp("Array element "); [EOL]        [EOL]       String string5 = StringUtils.repeat("The Character must not be null", 4517); [EOL]        [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short)0; [EOL]       String string6 = StringUtils.join(shortArray0, '_', Integer.MAX_VALUE, (int) (short)0); [EOL]       assertEquals(1, shortArray0.length); [EOL]        [EOL]       ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>(); [EOL]        [EOL]       Iterator<CharBuffer> iterator0 = arrayDeque0.descendingIterator(); [EOL]        [EOL]       String string7 = StringUtils.join(iterator0, '_'); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '_'; [EOL]       charArray0[1] = '_'; [EOL]       charArray0[2] = '_'; [EOL]       charArray0[3] = '_'; [EOL]       charArray0[4] = '_'; [EOL]       String string8 = StringUtils.join(charArray0, '_', (-1752), (-3540)); [EOL]       assertEquals(5, charArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("8z/t]?%'4"); [EOL]       Class<MockThrowable> class0 = MockThrowable.class; [EOL]       MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0); [EOL]       int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable1, (Class<?>) class0, 1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]        [EOL]       standardToStringStyle0.setFieldNameValueSeparator((String) null); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRootCauseMessage()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("d.m'y", (Throwable) null); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("gtL/yR.sN1O", mockThrowable0); [EOL]       MockThrowable mockThrowable2 = new MockThrowable(mockThrowable1); [EOL]       String string0 = ExceptionUtils.getRootCauseMessage(mockThrowable2); [EOL]       assertEquals("MockThrowable: d.m'y", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[2]; [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       booleanArray0[0] = boolean0; [EOL]       booleanArray0[1] = boolean0; [EOL]       boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0); [EOL]       assertEquals(2, booleanArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(3163); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3417.2957F)); [EOL]        [EOL]       int int0 = strBuilder2.indexOf("3+r3jcbdAXt1x", 3163); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendSeparator('s'); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 's'; [EOL]       charArray0[1] = 'H'; [EOL]       ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>(); [EOL]        [EOL]       ArrayList<Object> arrayList1 = new ArrayList<Object>(arrayList0); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList1.listIterator(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendAll((Iterator<?>) listIterator0); [EOL]        [EOL]       charArray0[2] = 's'; [EOL]       charArray0[3] = 's'; [EOL]       charArray0[4] = 's'; [EOL]       charArray0[5] = 's'; [EOL]       charArray0[6] = 's'; [EOL]       StrBuilder strBuilder5 = strBuilder1.append(charArray0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln("aHPcrO", 5, 0); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder5, 0, 's'); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.append(stringBuffer0, 3062, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       String string0 = "htoXU5/8-3A+"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("htoXU5/8-3A+"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.reverse(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char char0 = 'X'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln('X'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       int int0 = 8; [EOL]       StrBuilder strBuilder3 = strBuilder1.setLength(8); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(8); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(charArray0, 0, 3125); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid length: 3125 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[7]; [EOL]       doubleArray0[6] = (-657.78872673); [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-657.78872673), 1993); [EOL]       assertEquals(6, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       Object[] objectArray1 = new Object[3]; [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       compareToBuilder0.append(objectArray0, objectArray1, comparator0); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)0); [EOL]       MutableLong mutableLong0 = new MutableLong((Number) byte0); [EOL]       mutableLong0.increment(); [EOL]       mutableLong0.toLong(); [EOL]       assertEquals(1, mutableLong0.intValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoLocale()  throws Throwable  { [EOL]       Locale locale0 = LocaleUtils.toLocale((String) null); [EOL]       assertNull(locale0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('Z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE); [EOL]       assertEquals(1, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-10), (-1035)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("%4D8,", comparator0); [EOL]       Range<String> range1 = Range.is("%4D8,"); [EOL]       boolean boolean0 = range0.isBeforeRange(range1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.setSizeEndText("AEhzPmLst|m|:e7J{Z"); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray0); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(2374, 0, 2374); [EOL]       Fraction fraction1 = Fraction.getReducedFraction(0, 2374); [EOL]       Fraction fraction2 = fraction0.ONE_HALF.multiplyBy(fraction1); [EOL]       assertEquals(5635876, fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       char char0 = 'Q'; [EOL]       Integer integer0 = new Integer((-3878)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) integer0, (-3878), 'H'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       charArray0[0] = 'Q'; [EOL]       int int0 = 5; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-3878), charArray0, (-3878), 5); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -3878 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testready()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replace(strMatcher0, "D", 1, 1662, 1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       long[] longArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_INT_ARRAY); [EOL]       assertEquals(0, longArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator"); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string3 = StringUtils.replacePattern("", "", ""); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string4 = StringUtils.deleteWhitespace("null comparator"); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       String string5 = StringUtils.getCommonPrefix((String[]) null); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertTrue(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAlphanumericSpace(""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       float[] floatArray0 = new float[9]; [EOL]       int[] intArray0 = new int[1]; [EOL]       float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0); [EOL]       assertEquals(8, floatArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[2]; [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("vjm@8I}9pL-9$^D", "vjm@8I}9pL-9$^D", "", "Wx/fR7^T5S\" >9P["); [EOL]       booleanArray0[0] = boolean0; [EOL]       Boolean boolean1 = Boolean.valueOf("vjm@8I}9pL-9$^D"); [EOL]       booleanArray0[1] = boolean1; [EOL]       Boolean boolean2 = BooleanUtils.and(booleanArray0); [EOL]       assertFalse(boolean2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       long long0 = NumberUtils.max((-1393L), 866L, 866L); [EOL]       assertEquals(866L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder4.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(2954, strBuilder0.length()); [EOL]       assertEquals(2954, strBuilder4.length()); [EOL]       assertEquals(2954, strBuilder5.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(5777, strBuilder0.length()); [EOL]       assertEquals(5777, strBuilder1.length()); [EOL]       assertEquals(5777, strBuilder6.length()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertEquals(5777, strBuilder0.length()); [EOL]       assertEquals(5777, strBuilder1.length()); [EOL]       assertEquals(5777, strBuilder6.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(5782, strBuilder7.length()); [EOL]       assertEquals(5782, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(5800, strBuilder0.length()); [EOL]       assertEquals(5800, strBuilder8.length()); [EOL]       assertEquals(5800, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(8622, strBuilder0.length()); [EOL]       assertEquals(8622, strBuilder9.length()); [EOL]       assertEquals(8622, strBuilder1.length()); [EOL]       assertEquals(8622, strBuilder2.length()); [EOL]       assertEquals(8622, strBuilder3.length()); [EOL]       assertEquals(8622, strBuilder6.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       CharSequence charSequence0 = strBuilder1.subSequence(2796, 2822); [EOL]       assertEquals(8622, strBuilder0.length()); [EOL]       assertEquals(8622, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder1.appendFixedWidthPadLeft(2802, 2802, '\\'); [EOL]       assertEquals(11424, strBuilder0.length()); [EOL]       assertEquals(11424, strBuilder1.length()); [EOL]       assertEquals(11424, strBuilder10.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEndedBy()  throws Throwable  { [EOL]       Integer integer0 = new Integer(1); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) integer0, (Object) "", comparator0); [EOL]       boolean boolean0 = range0.isEndedBy("Elements in a range must not be null: element1="); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.append((short[]) null); [EOL]       assertEquals((-37), (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(false); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       int int0 = 32; [EOL]       int int1 = 8; [EOL]       char[] charArray0 = new char[4]; [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln('}'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       int int2 = 0; [EOL]       String string0 = strBuilder3.substring(0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       int int3 = strBuilder2.indexOf((StrMatcher) null, 8); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       charArray0[0] = '\"'; [EOL]       charArray0[1] = 'b'; [EOL]       char char0 = 'S'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.validateIndex(8); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 8 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.trim(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoLong()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.increment(); [EOL]       MutableLong mutableLong1 = new MutableLong("0"); [EOL]       boolean boolean0 = mutableLong0.equals(mutableLong1); [EOL]       assertEquals(1L, (long)mutableLong0.toLong()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("", 'e'); [EOL]        [EOL]       Class<Integer> class0 = Integer.class; [EOL]       ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0); [EOL]       assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString()); [EOL]        [EOL]       String string0 = StringUtils.join((Iterable<?>) serviceLoader0, ""); [EOL]       assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString()); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWithIgnoreCase("", ""); [EOL]        [EOL]       String string1 = StringUtils.join((Object[]) stringArray1, "vaf0N@H/E9XUtm"); [EOL]        [EOL]       String string2 = StringUtils.replaceChars("vaf0N@H/E9XUtm", "", ""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.stripAll(stringArray1); [EOL]        [EOL]       String string3 = StringUtils.replace("", "", "vaf0N@H/E9XUtm"); [EOL]        [EOL]       String string4 = StringUtils.substring((String) null, 10, 0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.toBoolean(0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmapLookup()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       hashMap0.put("", ""); [EOL]       String string0 = strLookup0.lookup(""); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       int int0 = (-1498); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1498)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       char char0 = 'Y'; [EOL]       StrMatcher strMatcher0 = StrMatcher.commaMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('Y'); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll("I%EqwV7sG3W", "I%EqwV7sG3W"); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       int int1 = strBuilder0.lastIndexOf(strMatcher0, 116); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'Y'; [EOL]       int int2 = 7; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.validateRange((-738), (-1498)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -738 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder((String) null); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'i'; [EOL]       charArray0[1] = '~'; [EOL]       charArray0[2] = 'i'; [EOL]       charArray0[3] = 'i'; [EOL]       charArray0[4] = 'i'; [EOL]       charArray0[5] = 'i'; [EOL]       charArray0[6] = 'i'; [EOL]       charArray0[7] = 'i'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteAll((StrMatcher) strMatcher_CharSetMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, 0, 'i'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((double) 0); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       int int0 = strBuilder4.lastIndexOf('l', 103); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.appendAll((Iterable<?>) null); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendSeparator((String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnotEmpty()  throws Throwable  { [EOL]       String string0 = Validate.notEmpty("%l/:M!w6lC%KQ+NIc="); [EOL]       assertEquals("%l/:M!w6lC%KQ+NIc=", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]        [EOL]       standardToStringStyle0.setNullText(""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('j', 'y'); [EOL]       boolean boolean0 = charRange0.contains('j'); [EOL]       assertEquals('y', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("T0]6[>UOMVX"); [EOL]       assertEquals(11, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNewLineText("Invalid startIndex: "); [EOL]       assertEquals(11, strBuilder0.length()); [EOL]       assertEquals(11, strBuilder1.length()); [EOL]        [EOL]       int int0 = 554; [EOL]       int int1 = (-1164); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append("T0]6[>UOMVX", 554, (-1164)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       float[] floatArray0 = new float[9]; [EOL]       floatArray0[5] = Float.NaN; [EOL]       float float0 = NumberUtils.min(floatArray0); [EOL]       assertEquals(Float.NaN, float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       String string0 = "htoXU5/8-3A+"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("htoXU5/8-3A+"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.reverse(); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]        [EOL]       char char0 = 'X'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln('X'); [EOL]        [EOL]       int int0 = 8; [EOL]       StrBuilder strBuilder3 = strBuilder1.setLength(8); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(8); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(charArray0, 0, 3125); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid length: 3125 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       int int0 = ObjectUtils.CONST(1960); [EOL]       assertEquals(1960, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 8); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       charArray0[0] = '+'; [EOL]       StrBuilder strBuilder1 = strBuilder0.append(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       charArray0[1] = 'd'; [EOL]       charArray0[2] = '8'; [EOL]       charArray0[3] = '='; [EOL]       charArray0[4] = 'H'; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(124, strBuilder0.capacity()); [EOL]       assertEquals(124, strBuilder2.capacity()); [EOL]       assertEquals(124, strBuilder3.capacity()); [EOL]        [EOL]       Writer writer0 = strBuilder2.asWriter(); [EOL]       assertEquals(124, strBuilder0.capacity()); [EOL]       assertEquals(124, strBuilder2.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.endsWith((String) null); [EOL]       assertEquals(124, strBuilder0.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append(strBuilder3, 2438, 2438); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testunescapeHtml3()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeHtml3("_uKyBnE~p"); [EOL]       assertEquals("_uKyBnE~p", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       Integer integer0 = new Integer(2382); [EOL]       MutableTriple<Integer, Integer, String> mutableTriple0 = new MutableTriple<Integer, Integer, String>(integer0, integer0, ""); [EOL]       Integer integer1 = new Integer(41); [EOL]       ImmutableTriple<Integer, Integer, String> immutableTriple0 = ImmutableTriple.of(integer1, integer1, ""); [EOL]       int int0 = mutableTriple0.compareTo((Triple<Integer, Integer, String>) immutableTriple0); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       assertEquals((-1.0F), fraction1.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsqueeze()  throws Throwable  { [EOL]       String[] stringArray0 = new String[11]; [EOL]       String string0 = CharSetUtils.squeeze(stringArray0[1], stringArray0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1354); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setQuoteMatcher(strMatcher0); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]       assertEquals(1354, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append('E'); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]       assertEquals(1354, strBuilder1.capacity()); [EOL]       assertEquals(1354, strBuilder2.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.charAt(2193); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2193 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Float float0 = new Float(167.82865430967); [EOL]       MutableInt mutableInt0 = new MutableInt(float0); [EOL]       boolean boolean0 = ObjectUtils.equals((Object) mutableInt0, (Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7"); [EOL]       StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 1913, 1913); [EOL]       StringUtils.normalizeSpace("The character must not be null"); [EOL]       String string1 = StringUtils.deleteWhitespace("The character must not be null"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Thecharactermustnotbenull", (CharSequence) "The character must not be null"); [EOL]        [EOL]       double[] doubleArray0 = new double[7]; [EOL]       doubleArray0[0] = (double) 5; [EOL]       doubleArray0[1] = (double) 5; [EOL]       doubleArray0[2] = (double) 1913; [EOL]       doubleArray0[3] = (double) 1913; [EOL]       doubleArray0[4] = (double) 5; [EOL]       doubleArray0[5] = (double) 5; [EOL]       doubleArray0[6] = (double) 5; [EOL]       String string2 = StringUtils.join(doubleArray0, 'X'); [EOL]        [EOL]       StringUtils.left("Thecharactermustnotbenull", (-2027)); [EOL]       StringUtils.startsWith("Thecharactermustnotbenull", "5.0X5.0X1913.0X1913.0X5.0X5.0X5.0"); [EOL]       boolean boolean0 = StringUtils.isNumeric("The character must not be null"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split(""); [EOL]        [EOL]       String string3 = StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 1913); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       String string4 = StringUtils.abbreviate("V", 5); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replace(strMatcher0, "D", 1, 1662, 1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, (-1)); [EOL]       assertNotSame(booleanArray0, booleanArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[7]; [EOL]       doubleArray0[1] = Double.NaN; [EOL]       double double0 = NumberUtils.max(doubleArray0); [EOL]       assertEquals(Double.NaN, double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.stripToEmpty("-2+AJhSn#?.RX,#(^c="); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("-2+AJhSn#?.RX,#(^c=", "-2+AJhSn#?.RX,#(^c="); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = arrayList0.iterator(); [EOL]        [EOL]       String string1 = StringUtils.join(iterator0, ""); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String[] stringArray0 = new String[0]; [EOL]       String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0); [EOL]        [EOL]       boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '|'; [EOL]       charArray0[1] = 'S'; [EOL]       charArray0[2] = '1'; [EOL]       charArray0[3] = 'l'; [EOL]       charArray0[4] = 'E'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "", charArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToShort()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[3]; [EOL]       short short0 = Conversion.binaryToShort(booleanArray0, (byte)122, (short)2527, 820, 0); [EOL]       assertEquals((short)2527, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendNewLine(); [EOL]        [EOL]       boolean boolean0 = strBuilder3.equals((Object) strBuilder0); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = ':'; [EOL]       String string0 = strBuilder0.substring(0, 0); [EOL]        [EOL]       charArray0[1] = ')'; [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int2 = strBuilder2.indexOf("=.j", 1810); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendNull(); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null); [EOL]       assertNull(shortArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprimitivesToWrappers()  throws Throwable  { [EOL]       Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6); [EOL]       Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0); [EOL]       boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToInt()  throws Throwable  { [EOL]       int int0 = Conversion.hexDigitMsb0ToInt('7'); [EOL]       assertEquals(14, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisBeforeRange()  throws Throwable  { [EOL]       Range<String> range0 = Range.is(""); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(4004).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator0); [EOL]       boolean boolean0 = range1.isBeforeRange((Range<Object>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testparseObject()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("\"NaI"); [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("<#", timeZone0, locale0); [EOL]       Object object0 = fastDateParser0.parseObject("<#"); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(718); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((long) 718); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter"; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter", objectArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendSeparator('d', 'Z'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = new StrBuilder(); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       strBuilder4.size = 55; [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.toString(); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       IDKey iDKey0 = new IDKey(hashCodeBuilder0); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((-185), (-185), (Object) iDKey0, true); [EOL]       assertEquals(17, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals(1, charBuffer0.capacity()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(1, charBuffer0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(50, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(50, strBuilder2.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertEquals(0, charBuffer1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       assertEquals(108, strBuilder0.capacity()); [EOL]       assertEquals(108, strBuilder3.capacity()); [EOL]       assertEquals(108, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]       assertEquals(108, strBuilder0.capacity()); [EOL]       assertEquals(108, strBuilder4.capacity()); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]       assertEquals(108, strBuilder0.capacity()); [EOL]       assertEquals(108, strBuilder4.capacity()); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]       assertEquals(108, strBuilder0.capacity()); [EOL]       assertEquals(108, strBuilder3.capacity()); [EOL]       assertEquals(108, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]       assertEquals(108, strBuilder0.capacity()); [EOL]       assertEquals(108, strBuilder3.capacity()); [EOL]       assertEquals(108, strBuilder5.capacity()); [EOL]       assertEquals(108, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]       assertEquals(108, strBuilder0.capacity()); [EOL]       assertEquals(108, strBuilder3.capacity()); [EOL]       assertEquals(108, strBuilder6.capacity()); [EOL]       assertEquals(108, strBuilder2.capacity()); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       String string1 = locale0.getDisplayVariant(); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertEquals(108, strBuilder0.capacity()); [EOL]       assertEquals(108, strBuilder4.capacity()); [EOL]       assertEquals(108, strBuilder7.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert(1, charArray0, 31, 1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid offset: 31 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("Z|&zc}e&+;", "Z|&zc}e&+;", "', is neither of type Map.Entry nor an Array", 5021); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'm'; [EOL]       charArray0[3] = 'M'; [EOL]       charArray0[4] = 'M'; [EOL]       charArray0[5] = '.'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0); [EOL]        [EOL]       String string1 = StringUtils.overlay("Z|&zc}e&+;", "', is neither of type Map.Entry nor an Array", 3156, 3156); [EOL]       assertFalse(string1.equals((Object)string0));', is neither of type Map.Entry nor an Array", string1); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Z|&zc}e&+;', is neither of type Map.Entry nor an Array", 3156); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[1] = (CharSequence) "Z|&zc}e&+;', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[2] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[3] = (CharSequence) "Z|&zc}e&+;"; [EOL]       String string2 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-3453)); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[5] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "Z|&zc}e&+;', is neither of type Map.Entry nor an Array", charSequenceArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(""); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null); [EOL]       assertFalse(strTokenizer1.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoCharacterObject()  throws Throwable  { [EOL]       Character character0 = CharUtils.toCharacterObject('N'); [EOL]       char char0 = CharUtils.toChar(character0, 'N'); [EOL]       assertEquals('N', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-463.38F), (-1.0F)); [EOL]       long[] longArray0 = new long[9]; [EOL]       compareToBuilder1.append((long[]) null, longArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Character[] characterArray0 = new Character[0]; [EOL]       Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0); [EOL]       assertNotSame(characterArray1, characterArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       CharSequence charSequence0 = null; [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, 0, 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "&,1fs'G.F7", 0); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = '!'; [EOL]       charArray0[1] = '8'; [EOL]       charArray0[2] = '9'; [EOL]       charArray0[3] = '('; [EOL]       charArray0[4] = ';'; [EOL]       charArray0[5] = 'B'; [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);', 'B'}, charArray0); [EOL]        [EOL]       String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null); [EOL]        [EOL]       String string1 = StringUtils.stripToNull("&,1fs'G.F7"); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "&,1fs'G.F7"); [EOL]        [EOL]       String string2 = StringUtils.substring("", 0); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.repeat("&,1fs'G.F7", 2138); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]        [EOL]       boolean boolean1 = StringUtils.startsWithIgnoreCase("&,1fs'G.F7", (CharSequence) null); [EOL]        [EOL]       String string4 = StringUtils.trim(""); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertTrue(string4.equals((Object)string2)); [EOL]        [EOL]       String string5 = ""; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("", 0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-1580.7)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append(0L); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.midString(0, 0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = 0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.delete(1458, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(true); [EOL]       HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append((short) (-1)); [EOL]       hashCodeBuilder0.append(0.0F); [EOL]       long[] longArray0 = new long[8]; [EOL]       longArray0[0] = (-152L); [EOL]       longArray0[1] = (long) (short) (-1); [EOL]       longArray0[2] = (long) (short) (-1); [EOL]       longArray0[3] = (long) (short) (-1); [EOL]       longArray0[4] = (-1L); [EOL]       longArray0[5] = (long) (short) (-1); [EOL]       longArray0[6] = (long) Integer.MAX_VALUE; [EOL]       longArray0[7] = (long) Integer.MAX_VALUE; [EOL]       HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(longArray0); [EOL]       HashCodeBuilder.reflectionHashCode(Integer.MAX_VALUE, Integer.MAX_VALUE, (Object) hashCodeBuilder3); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder1, true); [EOL]       //  // Unstable assertion: assertEquals(952405261, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertEquals(3, stringArray0.length); [EOL]       assertEquals(3, stringArray1.length); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       // Undeclared exception! [EOL]       StringUtils.rightPad("Minimum abbreviation width with offset is 7", 32767, "=~%A6;?UjK"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(880); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(); [EOL]       assertEquals(0, arrayDeque0.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll((Iterable<?>) arrayDeque0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, arrayDeque0.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       int int0 = strBuilder0.size(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = '~'; [EOL]       charArray0[1] = '%'; [EOL]       charArray0[2] = 'n'; [EOL]       charArray0[3] = 'm'; [EOL]       charArray0[4] = 'K'; [EOL]       charArray0[5] = '0'; [EOL]       charArray0[6] = 't'; [EOL]       charArray0[7] = '%'; [EOL]       charArray0[8] = 'J'; [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(charArray0); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]       assertEquals(10, strBuilder3.size()); [EOL]        [EOL]       int int1 = strBuilder2.indexOf('$', 0); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]       assertEquals(0, arrayDeque0.size()); [EOL]       assertEquals(10, strBuilder2.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaUpper('A'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'U'; [EOL]       char[] charArray1 = new char[6]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray1); [EOL]       float[] floatArray0 = new float[0]; [EOL]       compareToBuilder1.append(floatArray0, floatArray0); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(""); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder0.asWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(strBuilder1, 3005, 115); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplaceChars()  throws Throwable  { [EOL]       String string0 = StringUtils.replaceChars((String) null, 'b', ','); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       double double0 = NumberUtils.min(0.0, 784.9377, 784.9377); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1)); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.spaceMatcher(); [EOL]        [EOL]       String string0 = "iVO"; [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher("iVO"); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher("x~DPyO[EG\"4:"); [EOL]        [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher("iVO"); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(0); [EOL]        [EOL]       StrMatcher strMatcher4 = StrMatcher.spaceMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceFirst(strMatcher4, (String) null); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1), "%;$c19wXmzsg6Q"); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testformatDurationISO()  throws Throwable  { [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token((Object) null, 0); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.getValue(); [EOL]       durationFormatUtils_Token0.equals((Object) null); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[9]; [EOL]       durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_TokenArray0[8] = durationFormatUtils_Token0; [EOL]       DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, durationFormatUtils_Token0); [EOL]       String string0 = (String)DurationFormatUtils.s; [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("s"); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       String string1 = DurationFormatUtils.formatDurationISO(0); [EOL]       DurationFormatUtils.formatDurationHMS(0L); [EOL]       DurationFormatUtils.formatDuration(0L, "0java.lang.StringBuilder@000000003300java.lang.StringBuilder@000000003400java.lang.StringBuilder@0000000035000", false); [EOL]       System.setCurrentTimeMillis(1L); [EOL]       String string2 = DurationFormatUtils.formatDurationISO((-1036L)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]       standardToStringStyle0.appendDetail(stringBuffer0, "r#1|H@M0", stringBuffer0); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(2382); [EOL]       MutableTriple<Integer, Integer, String> mutableTriple0 = new MutableTriple<Integer, Integer, String>(integer0, integer0, ""); [EOL]       Integer integer1 = new Integer(41); [EOL]       ImmutableTriple<Integer, Integer, String> immutableTriple0 = ImmutableTriple.of(integer1, integer1, ""); [EOL]       int int0 = mutableTriple0.compareTo((Triple<Integer, Integer, String>) immutableTriple0); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAssignable()  throws Throwable  { [EOL]       Class<Long> class0 = Long.TYPE; [EOL]       Class<Boolean> class1 = Boolean.TYPE; [EOL]       boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiControl('\uDC42'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testinitialize()  throws Throwable  { [EOL]       ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool(); [EOL]       MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0); [EOL]       MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize(); [EOL]       Set<String> set0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.initializerNames(); [EOL]       assertTrue(set0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInt()  throws Throwable  { [EOL]       int int0 = NumberUtils.toInt((String) null); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.mid("", 64, 64); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) ""; [EOL]       String string1 = StringUtils.substringAfter("r", ""); [EOL]        [EOL]       charSequenceArray0[8] = (CharSequence) "r"; [EOL]       boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0); [EOL]       assertEquals(9, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean1 = StringUtils.equals(charSequenceArray0[1], (CharSequence) ""); [EOL]       assertEquals(9, charSequenceArray0.length); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = 64; [EOL]       intArray0[1] = 64; [EOL]       intArray0[2] = 64; [EOL]       intArray0[3] = 64; [EOL]       intArray0[4] = 64; [EOL]       intArray0[5] = 64; [EOL]       intArray0[6] = 64; [EOL]       intArray0[7] = 1076; [EOL]       String string2 = StringUtils.join(intArray0, 'q', 0, (-385)); [EOL]       assertEquals(8, intArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(2862, (-466)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("", comparator0); [EOL]       int int0 = range0.elementCompareTo(""); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisValidAnnotationMemberType()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       boolean boolean0 = AnnotationUtils.isValidAnnotationMemberType(class0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder2.asWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.trim(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder5 = strBuilder3.append(6); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappendDetail()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       LinkedList<Byte> linkedList0 = new LinkedList<Byte>(); [EOL]       toStringStyle0.appendDetail(stringBuffer0, "org.apache.commons.lang3.builder.ToStringStyle", linkedList0); [EOL]       assertEquals(0, linkedList0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(")l(BL"); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       long long0 = NumberUtils.max((-1634L), (-1634L), (-502L)); [EOL]       assertEquals((-502L), long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaUpper('Z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       Character[] characterArray0 = ArrayUtils.clone((Character[]) null); [EOL]       assertNull(characterArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhandleCause()  throws Throwable  { [EOL]       ExecutionException executionException0 = new ExecutionException((Throwable) null); [EOL]       MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder"); [EOL]       executionException0.printStackTrace((PrintStream) mockPrintStream0); [EOL]       ConcurrentUtils.handleCauseUnchecked(executionException0); [EOL]       assertNull(executionException0.getMessage()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testshortToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('C'); [EOL]       boolean[] booleanArray1 = Conversion.shortToBinary((short) (-314), (short) (-314), booleanArray0, (-1), (-1)); [EOL]       assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testputIfAbsent()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0); [EOL]       TimeUnit timeUnit0 = TimeUnit.DAYS; [EOL]       concurrentUtils_ConstantFuture0.get((long) 0, timeUnit0); [EOL]       ConcurrentHashMap<Error, String> concurrentHashMap0 = new ConcurrentHashMap<Error, String>(0); [EOL]       MockError mockError0 = new MockError(":IC?TWffvYqDnT"); [EOL]       ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, String>) concurrentHashMap0, (Error) mockError0, "Kh*+5b4@&oFsn"); [EOL]       ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Error>) null); [EOL]       ConcurrentUtils.initialize((ConcurrentInitializer<Error>) null); [EOL]       ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>((Object) null); [EOL]       concurrentUtils_ConstantFuture1.get(); [EOL]       ConcurrentSkipListMap<RuntimeException, Delayed> concurrentSkipListMap0 = new ConcurrentSkipListMap<RuntimeException, Delayed>(); [EOL]       ExecutionException executionException0 = new ExecutionException("Naming pattern must not be null!", (Throwable) null); [EOL]       ConcurrentUtils.extractCauseUnchecked(executionException0); [EOL]       Delayed delayed0 = ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<RuntimeException, Delayed>) concurrentSkipListMap0, (RuntimeException) null, (ConcurrentInitializer<Delayed>) null); [EOL]       assertNull(delayed0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisInnerClass()  throws Throwable  { [EOL]       Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 3); [EOL]       boolean boolean0 = ClassUtils.isInnerClass(classArray0[0]); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststop()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       System.setCurrentTimeMillis(3391L); [EOL]       long long0 = stopWatch0.getNanoTime(); [EOL]       assertEquals((-1392409277929000L), long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.reset(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder1.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.size()); [EOL]       assertEquals(2822, strBuilder4.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(2954, strBuilder0.size()); [EOL]       assertEquals(2954, strBuilder4.size()); [EOL]       assertEquals(2954, strBuilder5.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(5777, strBuilder0.size()); [EOL]       assertEquals(5777, strBuilder1.size()); [EOL]       assertEquals(5777, strBuilder6.size()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertEquals(5777, strBuilder0.size()); [EOL]       assertEquals(5777, strBuilder1.size()); [EOL]       assertEquals(5777, strBuilder6.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(5782, strBuilder7.size()); [EOL]       assertEquals(5782, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(5800, strBuilder0.size()); [EOL]       assertEquals(5800, strBuilder8.size()); [EOL]       assertEquals(5800, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(8622, strBuilder0.size()); [EOL]       assertEquals(8622, strBuilder9.size()); [EOL]       assertEquals(8622, strBuilder1.size()); [EOL]       assertEquals(8622, strBuilder2.size()); [EOL]       assertEquals(8622, strBuilder3.size()); [EOL]       assertEquals(8622, strBuilder6.size()); [EOL]        [EOL]       CharSequence charSequence0 = strBuilder1.subSequence(2796, 2822); [EOL]       assertEquals(8622, strBuilder0.size()); [EOL]       assertEquals(8622, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder1.appendFixedWidthPadLeft(2802, 2802, '\\'); [EOL]       assertEquals(11424, strBuilder0.size()); [EOL]       assertEquals(11424, strBuilder1.size()); [EOL]       assertEquals(11424, strBuilder10.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[5]; [EOL]       int int0 = ArrayUtils.indexOf(intArray0, 0, (-1)); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendSeparator('`'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.insert(97, (long) 2817); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.appendln(stringBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (float) '`'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(718); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((long) 718); [EOL]       assertEquals(4, strBuilder0.size()); [EOL]       assertEquals(4, strBuilder1.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter"; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter", objectArray0); [EOL]       assertEquals(62, strBuilder0.size()); [EOL]       assertEquals(62, strBuilder1.size()); [EOL]       assertEquals(62, strBuilder2.size()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertEquals(62, strBuilder0.size()); [EOL]       assertEquals(62, strBuilder1.size()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertEquals(62, strBuilder0.size()); [EOL]       assertEquals(62, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendSeparator('d', 'Z'); [EOL]       assertEquals(63, strBuilder0.size()); [EOL]       assertEquals(63, strBuilder1.size()); [EOL]       assertEquals(63, strBuilder2.size()); [EOL]       assertEquals(63, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder4.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]       assertEquals(0, strBuilder4.size()); [EOL]        [EOL]       strBuilder4.size = 55; [EOL]       assertEquals(55, strBuilder4.size()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.toString(); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("v"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       int int0 = 169; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator("v", 169); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'O'; [EOL]       char char0 = '+'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars(554, (-1433), charArray0, 554); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1433 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("\"NaI"); [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("<#", timeZone0, locale0); [EOL]       Object object0 = fastDateParser0.parseObject("<#"); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1)); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper((-1)); [EOL]       hashCodeBuilder1.append(true); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]       assertEquals(0, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       String string0 = ReflectionToStringBuilder.toString(object0, toStringStyle0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoStringYesNo()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toStringYesNo(true); [EOL]       assertEquals("yes", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0, stringBuffer0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append(object0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{"); [EOL]       toStringStyle0.appendEnd(stringBuffer0, standardToStringStyle0); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[3]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(102); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(102, 102, '?'); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendAll(iterator0); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>(); [EOL]        [EOL]       boolean boolean0 = treeSet0.retainAll(arrayList0); [EOL]        [EOL]       charArray0[0] = '?'; [EOL]       charArray0[1] = '?'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder1.indexOf((StrMatcher) strMatcher_CharSetMatcher0); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher((char[]) null); [EOL]        [EOL]       boolean boolean1 = strBuilder2.contains(strMatcher0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean2 = strBuilder_StrBuilderReader0.markSupported(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadRight((Object) iterator0, 102, '?'); [EOL]        [EOL]       strBuilder_StrBuilderReader0.mark(63); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendSeparator("{8UA", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFragmentInSeconds()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       long long0 = DateUtils.getFragmentInSeconds((Calendar) mockGregorianCalendar0, 5); [EOL]       assertEquals(73281L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad(",@ZB0lHp2{", 122); [EOL]        [EOL]       String string1 = StringUtils.substringBeforeLast("", "[\tu"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 's'; [EOL]       charArray0[1] = '{'; [EOL]       charArray0[2] = '+'; [EOL]       charArray0[3] = 'I'; [EOL]       String string2 = StringUtils.join(charArray0, 's'); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumeric(",@ZB0lHp2{                                                                                                                "); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("SrIO", ",@ZB0lHp2{"); [EOL]        [EOL]       String string3 = StringUtils.rightPad("SrIO", 122); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]        [EOL]       int[] intArray0 = new int[1]; [EOL]       intArray0[0] = (int) 'I'; [EOL]       String string4 = StringUtils.join(intArray0, 's'); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens("ss{s+sI", "ss{s+sI", 256); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       String string5 = StringUtils.prependIfMissingIgnoreCase("v", "SrIO                                                                                                                      ", stringArray1); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(65); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText("0H+6+X"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.getChars((char[]) null); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]        [EOL]       String string2 = strBuilder1.leftString((-2254)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = strBuilder3.contains('`'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported"); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer0.forEachRemaining(consumer0); [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]       strTokenizer0.setTrimmerMatcher(strMatcher_TrimMatcher0); [EOL]       assertEquals(2, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSameLocalTime()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       mockGregorianCalendar0.set((-1), 637, 0, 0, 0, 5); [EOL]       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(); [EOL]       boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setArraySeparator((String) null); [EOL]       String string0 = standardToStringStyle0.getArraySeparator(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ","); [EOL]       standardToStringStyle0.appendToString(stringBuffer0, ""); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.lowerCase("ghZ]CWmR;Q]$V");q]$v", string0); [EOL]        [EOL]       String string1 = StringUtils.substringBetween("", "Search and Replace array lengths don't match: "); [EOL]        [EOL]       String string2 = StringUtils.appendIfMissing("Strings must not be null", (CharSequence) null, (CharSequence[]) null); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       int int0 = 0; [EOL]       String string0 = strBuilder0.midString(0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       LinkedList<Object> linkedList0 = new LinkedList<Object>(); [EOL]        [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       linkedList0.sort(comparator0); [EOL]        [EOL]       ListIterator<Object> listIterator0 = linkedList0.listIterator(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) listIterator0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int1 = 2; [EOL]       boolean boolean0 = linkedList0.add((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.setCharAt(2, 'l'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoIntValue()  throws Throwable  { [EOL]       int int0 = CharUtils.toIntValue((Character) null, 97); [EOL]       assertEquals(97, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(85, 85, 3832, 85); [EOL]       Boolean boolean1 = BooleanUtils.negate(boolean0); [EOL]       assertFalse(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       JavaUnicodeEscaper javaUnicodeEscaper0 = JavaUnicodeEscaper.between((-2857), Integer.MAX_VALUE); [EOL]       assertNotNull(javaUnicodeEscaper0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       int int1 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]       assertEquals(2, charSequenceArray0.length); [EOL]        [EOL]       String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13); [EOL]        [EOL]       String string3 = StringUtils.right("", 0); [EOL]        [EOL]       String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13); [EOL]        [EOL]       String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils"); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0); [EOL]       assertEquals(2, charSequenceArray0.length); [EOL]        [EOL]       String string6 = StringUtils.lowerCase("s"); [EOL]        [EOL]       String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0); [EOL]        [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = ".ti')kKzb5J(cbBlh"; [EOL]       stringArray0[1] = "s"; [EOL]       stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils"; [EOL]       stringArray0[3] = "s"; [EOL]       stringArray0[4] = "s"; [EOL]       stringArray0[5] = "{}"; [EOL]       stringArray0[6] = "{}"; [EOL]       stringArray0[7] = ""; [EOL]       stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh"; [EOL]       String string8 = StringUtils.getCommonPrefix(stringArray0); [EOL]       assertEquals(9, stringArray0.length); [EOL]        [EOL]       boolean boolean1 = StringUtils.startsWithAny("{}", charSequenceArray0); [EOL]       assertEquals(2, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testshortArrayToLong()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       long long0 = Conversion.shortArrayToLong(shortArray0, 0, (-1302L), 0, 3242); [EOL]       assertEquals((-1302L), long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(strBuilder0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       Integer integer0 = new Integer(10); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append((Object) integer0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'U'; [EOL]       charArray0[1] = 'C'; [EOL]       charArray0[2] = 'r'; [EOL]       charArray0[3] = 'g'; [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'p'; [EOL]       charArray0[6] = '('; [EOL]       charArray0[7] = 'P'; [EOL]       charArray0[8] = '@'; [EOL]       StringBuilder stringBuilder2 = stringBuilder1.append(charArray0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StringBuilder stringBuilder3 = stringBuilder2.insert(10, (float) 10); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.append(stringBuilder3, 10, 10); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between(object0, object0, comparator0); [EOL]       boolean boolean0 = range0.equals((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "", byteArray0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testLocale()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("\"NaI"); [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("<#", timeZone0, locale0); [EOL]       Locale locale1 = fastDateParser0.getLocale(); [EOL]       assertEquals("zho", locale1.getISO3Language()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupportKd", 'C', 'C'); [EOL]       int int0 = strTokenizer0.nextIndex(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("43Eh>Xb3,/"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[0]; [EOL]       double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort(); [EOL]       boolean boolean0 = mutableShort0.equals(mutableShort0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StrSubstitutor.replaceSystemProperties((Object) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(2134); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) null, ""); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]       assertEquals(2134, strBuilder1.capacity()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(""); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteFirst((StrMatcher) null); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]       assertEquals(2134, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendAll((Iterator<?>) null); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]       assertEquals(2134, strBuilder2.capacity()); [EOL]       assertEquals(2134, strBuilder3.capacity()); [EOL]        [EOL]       CharSequence charSequence0 = strBuilder2.subSequence(0, 0); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]       assertEquals(2134, strBuilder2.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testoutsideOf()  throws Throwable  { [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.outsideOf(0, 0); [EOL]       boolean boolean0 = unicodeEscaper0.translate(0, (Writer) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       strTokenizer0.next(); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = "OS/2"; [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("OS/2"); [EOL]        [EOL]       String string1 = "java.awt.printerjob"; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher("java.awt.printerjob"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) strMatcher_StringMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert(5, (Object) "OS/2"); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 5 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       OctalUnescaper octalUnescaper0 = new OctalUnescaper(); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '\\'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = octalUnescaper0.translate((CharSequence) charBuffer0, 0, (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = '6'; [EOL]       charArray0[1] = '6'; [EOL]       charArray0[2] = 'I'; [EOL]       charArray0[3] = 'n'; [EOL]       charArray0[4] = '3'; [EOL]       charArray0[5] = 'E'; [EOL]       charArray0[6] = '@'; [EOL]       char[] charArray1 = strBuilder0.getChars(charArray0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(7, charArray0.length); [EOL]       assertEquals(7, charArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.left("F*ih6'Wv@Hv&-.Ni:q", (-2178)); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("", "F*ih6'Wv@Hv&-.Ni:q"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace((CharSequence) null); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsWhitespace(""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split((String) null, ""); [EOL]        [EOL]       String string1 = StringUtils.stripStart("", (String) null); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       int int0 = StringUtils.countMatches((CharSequence) null, ""); [EOL]        [EOL]       String string2 = StringUtils.stripToNull(""); [EOL]        [EOL]       String string3 = StringUtils.defaultString("", (String) null); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertTrue(string3.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setContentEnd((String) null); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       Double double0 = mutableDouble0.getValue(); [EOL]       assertEquals(0.0, (double)double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("2g"); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]        [EOL]       int int0 = (-1287); [EOL]       char[] charArray0 = new char[7]; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]       assertEquals(7, charArray0.length); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0); [EOL]       assertEquals(7, charArray0.length); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher("2g"); [EOL]        [EOL]       boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(7, charArray0.length); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       charArray0[1] = '='; [EOL]       charArray0[2] = '$'; [EOL]       charArray0[3] = 'W'; [EOL]       charArray0[4] = 'X'; [EOL]       charArray0[5] = 'j'; [EOL]       charArray0[6] = 'Q'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars((-1287), (-1287), charArray0, (-1287)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1287 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((long) 0); [EOL]        [EOL]       Reader reader0 = strBuilder1.asReader(); [EOL]       assertTrue(reader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       boolean boolean0 = arrayList0.add((Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterator<?>) listIterator0, ""); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.minimizeCapacity(); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) ""; [EOL]       objectArray0[1] = (Object) ""; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]        [EOL]       objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       StrBuilder strBuilder5 = strBuilder0.appendWithSeparators(objectArray0, "\u0005~t3<ZfA9n`W0/IY"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSameDay()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-113), 1, 2, (-451), 3725); [EOL]       Locale locale0 = Locale.JAPANESE; [EOL]       Calendar calendar0 = MockCalendar.getInstance(locale0); [EOL]       boolean boolean0 = DateUtils.isSameDay(calendar0, (Calendar) mockGregorianCalendar0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetVariableSuffix()  throws Throwable  { [EOL]       HashMap<String, Locale.Category> hashMap0 = new HashMap<String, Locale.Category>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Locale.Category>) hashMap0); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.setVariableSuffix('X'); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = StringUtils.removePattern("m%I&V4M", "org.apache.commons.lang3.CharUtils"); [EOL]        [EOL]       String string1 = StringUtils.chomp("m%I&V4M", "m%I&V4M"); [EOL]        [EOL]       String string2 = StringUtils.substringAfter("", "fOXsK42LD`NC@(D>vyX"); [EOL]        [EOL]       String string3 = StringUtils.join((short[]) null, 'I'); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(""); [EOL]        [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "m%I&V4M"); [EOL]        [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       assertEquals("zh", locale0.toString()); [EOL]        [EOL]       String string4 = StringUtils.lowerCase("", locale0); [EOL]       assertEquals("zh", locale0.toString()); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "", (-3190)); [EOL]        [EOL]       String string5 = StringUtils.stripEnd("", ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, ""); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsIgnoreCase("", ""); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'I'; [EOL]       charArray0[1] = 'I'; [EOL]       charArray0[2] = 'I'; [EOL]       charArray0[3] = 'I'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CharBuffer.wrap(charArray0, (-1), (-3190)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.nio.CharBuffer", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEnableSubstitutionInVariables()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.setVariableSuffix(":]GB6Un80r?+"); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       StrLookup<String> strLookup0 = StrLookup.systemPropertiesLookup(); [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'A'); [EOL]       StrBuilder strBuilder0 = new StrBuilder(" has no clone method"); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0); [EOL]       assertEquals('A', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(160, strBuilder0.capacity()); [EOL]       assertEquals(160, strBuilder1.capacity()); [EOL]       assertEquals(160, strBuilder2.capacity()); [EOL]       assertEquals(160, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]       assertEquals(5644, strBuilder5.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]       assertEquals(11654, strBuilder6.capacity()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]       assertEquals(11654, strBuilder6.capacity()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(11654, strBuilder7.capacity()); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder8.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder9.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]       assertEquals(11654, strBuilder2.capacity()); [EOL]       assertEquals(11654, strBuilder3.capacity()); [EOL]       assertEquals(11654, strBuilder6.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder5.new StrBuilderReader(); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder4.capacity()); [EOL]       assertEquals(11654, strBuilder5.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, (-2133), (-915)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = 0; [EOL]       String string0 = strBuilder0.midString(0, 0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       LinkedList<Object> linkedList0 = new LinkedList<Object>(); [EOL]        [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       linkedList0.sort(comparator0); [EOL]        [EOL]       ListIterator<Object> listIterator0 = linkedList0.listIterator(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) listIterator0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       int int1 = 2; [EOL]       boolean boolean0 = linkedList0.add((Object) strBuilder0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.setCharAt(2, 'l'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtruncatedEquals()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       Date date0 = mockGregorianCalendar0.getGregorianChange(); [EOL]       boolean boolean0 = DateUtils.truncatedEquals(date0, date0, 5); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: "); [EOL]       assertEquals(52, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll('\''); [EOL]       assertEquals(52, strBuilder0.capacity()); [EOL]       assertEquals(52, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteFirst("Rz4WmT&"); [EOL]       assertEquals(52, strBuilder0.capacity()); [EOL]       assertEquals(52, strBuilder2.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("FXDeiw%p~"); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]        [EOL]       char char0 = '\"'; [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '\"'; [EOL]       charArray0[1] = '\"'; [EOL]       charArray0[2] = '\"'; [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]        [EOL]       charArray0[3] = '\"'; [EOL]       charArray0[4] = '\"'; [EOL]       StrBuilder strBuilder1 = strBuilder0.append(charArray0); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder1.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer(); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder1.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder1.size()); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[2] = (Object) "FXDeiw%p~"; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[3] = object0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append("FXDeiw%p~", objectArray0); [EOL]         fail("Expecting exception: UnknownFormatConversionException"); [EOL]        [EOL]       } catch(UnknownFormatConversionException e) { [EOL]          // [EOL]          // Conversion = 'p' [EOL]          // [EOL]          verifyException("java.util.Formatter$FormatSpecifier", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToByteArray()  throws Throwable  { [EOL]       byte[] byteArray0 = Conversion.intToByteArray((short)53, (-1), (byte[]) null, (short) (-1144), (-1573)); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testinitials()  throws Throwable  { [EOL]       String string0 = WordUtils.initials("}>r dv1#", (char[]) null); [EOL]       assertEquals("}d", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.upperCase(""); [EOL]        [EOL]       String string1 = StringUtils.difference("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = "\\u"; [EOL]       String string3 = StringUtils.chop(string2); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[0]; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string4 = StringUtils.substringAfterLast("", (String) null); [EOL]       assertTrue(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertTrue(string4.equals((Object)string1)); [EOL]        [EOL]       String string5 = StringUtils.join((Object[]) charSequenceArray0, 'F', 591, 0); [EOL]       assertTrue(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertTrue(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]        [EOL]       Class<String> class0 = String.class; [EOL]       ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0); [EOL]        [EOL]       Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       serviceLoader0.forEach(consumer0); [EOL]        [EOL]       String string6 = StringUtils.join((Iterable<?>) serviceLoader0, 'F'); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertTrue(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertTrue(string6.equals((Object)string0)); [EOL]        [EOL]       String string7 = StringUtils.removeEndIgnoreCase("", (String) null); [EOL]       assertTrue(string7.equals((Object)string6)); [EOL]       assertFalse(string7.equals((Object)string2)); [EOL]       assertTrue(string7.equals((Object)string1)); [EOL]       assertTrue(string7.equals((Object)string0)); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]       assertTrue(string7.equals((Object)string4)); [EOL]       assertTrue(string7.equals((Object)string5)); [EOL]        [EOL]       String string8 = StringUtils.center(" is not in the range '0' - '9'", 0, 'F'); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]       assertFalse(string8.equals((Object)string1)); [EOL]       assertFalse(string8.equals((Object)string3)); [EOL]       assertFalse(string8.equals((Object)string4)); [EOL]       assertFalse(string8.equals((Object)string0)); [EOL]       assertFalse(string8.equals((Object)string5)); [EOL]       assertFalse(string8.equals((Object)string2)); [EOL]       assertFalse(string8.equals((Object)string7)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 591); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseShortClassName(); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("~dYL7CZ`YIZ7"); [EOL]       assertEquals(44, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(44, strBuilder0.capacity()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.close(); [EOL]       assertEquals(44, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertEquals(9, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 66, '\"'); [EOL]       assertEquals(75, strBuilder0.length()); [EOL]       assertEquals(75, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteAll("SzpQ!4 ;U"); [EOL]       assertEquals(66, strBuilder0.length()); [EOL]       assertEquals(66, strBuilder2.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSameInstant()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(362L); [EOL]       boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '?'; [EOL]       charArray0[2] = 'U'; [EOL]       charArray0[3] = '4'; [EOL]       StrBuilder strBuilder2 = strBuilder1.insert(2, charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder4 = strBuilder3.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       Writer writer0 = strBuilder4.asWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray1 = new char[0]; [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.trim(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder7 = strBuilder5.append(6); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray1, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[6]; [EOL]       int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2015), (int) (short)2); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       compareToBuilder0.append((byte[]) null, byteArray0); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((long) 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       Reader reader0 = strBuilder1.asReader(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       boolean boolean0 = arrayList0.add((Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterator<?>) listIterator0, ""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.minimizeCapacity(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) ""; [EOL]       objectArray0[1] = (Object) ""; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       StrBuilder strBuilder5 = strBuilder0.appendWithSeparators(objectArray0, "\u0005~t3<ZfA9n`W0/IY"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(18, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(18, strBuilder0.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertEquals(18, strBuilder0.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals(1, charBuffer0.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(18, strBuilder0.length()); [EOL]       assertEquals(0, charBuffer0.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertEquals(18, strBuilder0.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(18, strBuilder0.length()); [EOL]       assertEquals(18, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]       assertEquals(36, strBuilder0.length()); [EOL]       assertEquals(36, strBuilder2.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertEquals(0, charBuffer1.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       assertEquals(54, strBuilder3.length()); [EOL]       assertEquals(54, strBuilder0.length()); [EOL]       assertEquals(54, strBuilder2.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder4.length()); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder4.length()); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]       assertEquals(86, strBuilder3.length()); [EOL]       assertEquals(86, strBuilder0.length()); [EOL]       assertEquals(86, strBuilder5.length()); [EOL]       assertEquals(86, strBuilder2.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertEquals(86, strBuilder0.length()); [EOL]       assertEquals(86, strBuilder4.length()); [EOL]       assertEquals(86, strBuilder6.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replace(strMatcher0, "D", 1, 1662, 1); [EOL]       assertEquals(86, strBuilder0.length()); [EOL]       assertEquals(86, strBuilder7.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("EEE, dd MMM yyyy HH:mm:ss Z"); [EOL]       Locale locale0 = Locale.PRC; [EOL]       String string0 = DateFormatUtils.format(1L, "EEE, dd MMM yyyy HH:mm:ss Z", timeZone0, locale0); [EOL]       assertEquals("\u661F\u671F\u56DB, 01 \u4E00\u6708 1970 00:00:00 +0000", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST((short)1); [EOL]       assertEquals((short)1, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(0); [EOL]       assertTrue(strBuilder1.equals((Object)strBuilder0)); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(1.0); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder0)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(strBuilder1); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder2)); [EOL]        [EOL]       boolean boolean0 = strBuilder3.equalsIgnoreCase(strBuilder2); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder2)); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder0)); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = '?'; [EOL]       charArray0[1] = 'Q'; [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       objectArray0[0] = (Object) strBuilder2; [EOL]       objectArray0[1] = (Object) '?'; [EOL]       objectArray0[2] = (Object) strBuilder1; [EOL]       objectArray0[3] = (Object) " ^rGa"; [EOL]       objectArray0[4] = (Object) " ^rGa"; [EOL]       objectArray0[5] = (Object) strBuilder3; [EOL]       StrBuilder strBuilder4 = strBuilder2.appendln(" ^rGa", objectArray0); [EOL]       assertFalse(strBuilder4.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder4.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder0)); [EOL]        [EOL]       charArray0[2] = 'I'; [EOL]       charArray0[3] = '*'; [EOL]       charArray0[4] = '+'; [EOL]       charArray0[5] = 'o'; [EOL]       charArray0[6] = '*'; [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("X>2Y%"); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "org.apache.commons.lang3.builder.ToStringStyle", (byte)76); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.THREE_QUARTERS; [EOL]       boolean boolean0 = fraction0.equals(fraction0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(""); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder1); [EOL]       assertEquals(52, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]       assertEquals(52, strBuilder2.size()); [EOL]        [EOL]       Writer writer0 = strBuilder0.asWriter(); [EOL]       assertEquals(52, strBuilder0.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(strBuilder1, 3005, 115); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRootCauseStackTrace()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("", mockThrowable0); [EOL]       mockThrowable0.initCause(mockThrowable1); [EOL]       String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace(mockThrowable1); [EOL]       assertEquals(2, stringArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.removeStartIgnoreCase(":lRC9;Q#I/x!xtF:lRC9;Q#I/x!xtF", ":lRC9;Q#I/x!xtF:lRC9;Q#I/x!xtF"); [EOL]        [EOL]       String string1 = StringUtils.substringBefore("", "m%I&V4Mm%I&V4M"); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "m%I&V4Mm%I&V4M", (CharSequence) ":lRC9;Q#I/x!xtF:lRC9;Q#I/x!xtF"); [EOL]        [EOL]       String string2 = StringUtils.removeStart("", "_iVq9-<w--D+?HoA~d"); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0); [EOL]        [EOL]       String string3 = StringUtils.chop("dc Z@(J7|7wU"); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '4'; [EOL]       charArray0[1] = 'o'; [EOL]       charArray0[2] = '<'; [EOL]       charArray0[3] = '&'; [EOL]       charArray0[4] = ' '; [EOL]       String string4 = StringUtils.join(charArray0, '4'); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTimeInstance()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("CGnq5w2>W6Y47X"); [EOL]       Locale locale0 = Locale.SIMPLIFIED_CHINESE; [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0); [EOL]       String string0 = fastDateFormat0.getPattern(); [EOL]       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, ""); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln('h'); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder2.length()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteCharAt(0); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]       assertEquals(1, strBuilder3.length()); [EOL]        [EOL]       int int1 = strBuilder3.capacity(); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]       assertEquals(1, strBuilder3.length()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious(); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.subSequence(44, 6); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 6 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("/UzT$c0PraLRBN}"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '9'; [EOL]       charArray0[1] = '%'; [EOL]       charArray0[2] = ':'; [EOL]       charArray0[3] = 'y'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(charArray0, 458, 458); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: 458 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, true); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte) (-54), (byte) (-54)); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       objectArray0[0] = (Object) equalsBuilder1; [EOL]       objectArray0[1] = (Object) equalsBuilder1; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0); [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'U'; [EOL]       charArray0[1] = 'v'; [EOL]       charArray0[2] = ';'; [EOL]       charArray0[3] = 'O'; [EOL]       charArray0[4] = '5'; [EOL]       charArray0[5] = 'i'; [EOL]       char[] charArray1 = new char[6]; [EOL]       charArray1[0] = ';'; [EOL]       charArray1[1] = 'i'; [EOL]       charArray1[2] = 'O'; [EOL]       charArray1[3] = ';'; [EOL]       charArray1[4] = 'i'; [EOL]       charArray1[5] = 'v'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray1); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append('S', 'C'); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append((int) (byte) (-54), (-1995)); [EOL]       assertSame(equalsBuilder6, equalsBuilder2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V"); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0); [EOL]        [EOL]       int int1 = strBuilder0.indexOf("x,OEdUuh6_<", 0); [EOL]        [EOL]       Locale.Category locale_Category0 = Locale.Category.DISPLAY; [EOL]       Locale.Category locale_Category1 = Locale.Category.FORMAT; [EOL]       EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1); [EOL]       assertFalse(locale_Category0.equals((Object)locale_Category1)); [EOL]       assertFalse(locale_Category1.equals((Object)locale_Category0)); [EOL]        [EOL]       Iterator<Locale.Category> iterator0 = enumSet0.iterator(); [EOL]       assertFalse(locale_Category0.equals((Object)locale_Category1)); [EOL]       assertFalse(locale_Category1.equals((Object)locale_Category0)); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<"); [EOL]       assertFalse(locale_Category0.equals((Object)locale_Category1)); [EOL]       assertFalse(locale_Category1.equals((Object)locale_Category0)); [EOL]        [EOL]       String string0 = ""; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-1), ""); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       char[] charArray0 = new char[6]; [EOL]       char[] charArray1 = new char[6]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray1); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendNull(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder1.toStringBuffer(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder1.isEmpty(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testor()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       Boolean[] booleanArray1 = new Boolean[2]; [EOL]       booleanArray1[0] = (Boolean) booleanArray0[0]; [EOL]       booleanArray1[1] = (Boolean) true; [EOL]       Boolean boolean0 = BooleanUtils.or(booleanArray1); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (-2690.0); [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2690.0), 2536); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("6H96d8Y[BQHa,"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText("e2CwGXskc[ISvOj.7"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) "e2CwGXskc[ISvOj.7"; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln("6H96d8Y[BQHa,", objectArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder2.indexOf("", (-1613)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(""); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceFirst("5p&H0$B\".@l3|+@o", ""); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(4); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln(stringBuffer0); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("AEhzPmLst|m|:e7J{Z"); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendFieldSeparator(stringBuffer0); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsqueeze()  throws Throwable  { [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[1] = " IF0"; [EOL]       String string0 = CharSetUtils.squeeze(" IF0", stringArray0); [EOL]       assertEquals(" IF0", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPackageCanonicalName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageCanonicalName((Object) null, ""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("J"); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("J", mockThrowable0); [EOL]       Class<String> class0 = String.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable1, (Class<?>) class0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-297.21217), (int) (byte)10); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testshortToByteArray()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byte[] byteArray1 = Conversion.shortToByteArray((short)0, 102, byteArray0, 1, 0); [EOL]       assertSame(byteArray0, byteArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(919); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("+7zRuHp;`0", 919); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = '6'; [EOL]       charArray0[1] = '6'; [EOL]       charArray0[2] = 'I'; [EOL]       charArray0[3] = 'n'; [EOL]       charArray0[4] = '3'; [EOL]       charArray0[5] = 'E'; [EOL]       charArray0[6] = '@'; [EOL]       char[] charArray1 = strBuilder0.getChars(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ","); [EOL]       standardToStringStyle0.appendToString(stringBuffer0, ""); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.appendSuper(37); [EOL]       hashCodeBuilder0.append((short)0); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       byteArray0[0] = (byte) (-32); [EOL]       byteArray0[1] = (byte)105; [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[3] = (byte) (-1); [EOL]       byteArray0[4] = (byte) (-21); [EOL]       byte[] byteArray1 = new byte[4]; [EOL]       byteArray1[0] = (byte)0; [EOL]       byteArray1[1] = (byte)0; [EOL]       byteArray1[2] = (byte) (-21); [EOL]       byteArray1[3] = (byte)0; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1); [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = true; [EOL]       booleanArray0[3] = true; [EOL]       booleanArray0[4] = true; [EOL]       booleanArray0[5] = false; [EOL]       booleanArray0[6] = true; [EOL]       booleanArray0[7] = true; [EOL]       booleanArray0[8] = true; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(booleanArray0, booleanArray0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder1.append((short)947, (short)0); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder0.append((byte) (-1), (byte)105); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder2.append((Object) equalsBuilder3, (Object) equalsBuilder4); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append((byte) (-21), (byte)41); [EOL]       double[] doubleArray0 = new double[6]; [EOL]       doubleArray0[0] = (double) (short)0; [EOL]       doubleArray0[1] = (double) (byte) (-21); [EOL]       doubleArray0[2] = (double) (byte) (-1); [EOL]       doubleArray0[3] = (double) (byte)0; [EOL]       doubleArray0[4] = (double) (byte)0; [EOL]       doubleArray0[5] = (double) (byte) (-21); [EOL]       EqualsBuilder equalsBuilder7 = equalsBuilder6.append(doubleArray0, doubleArray0); [EOL]       equalsBuilder7.reset(); [EOL]       assertTrue(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(); [EOL]       char[] charArray0 = new char[0]; [EOL]       strSubstitutor0.replace(charArray0); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("SzpQ!4 ;U"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.append('`'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceFirst("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder2.replaceAll("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRawMessage()  throws Throwable  { [EOL]       ContextedException contextedException0 = new ContextedException(""); [EOL]       String string0 = contextedException0.getRawMessage(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0); [EOL]       assertArrayEquals(new short[] {}, shortArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhasNext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(""); [EOL]       strTokenizer0.hasNext(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetReducedFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(0, 2374); [EOL]       Fraction fraction1 = fraction0.TWO_THIRDS.subtract(fraction0); [EOL]       assertEquals(0.6666667F, fraction1.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[0]; [EOL]       boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0); [EOL]       boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true); [EOL]       assertFalse(booleanArray2.equals((Object)booleanArray1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((-3061), Integer.MAX_VALUE, object0); [EOL]       assertEquals((-3061), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('A'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEnumMap()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       Map<String, JavaVersion> map0 = EnumUtils.getEnumMap(class0); [EOL]       assertEquals(9, map0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testunicodeEscaped()  throws Throwable  { [EOL]       String string0 = CharUtils.unicodeEscaped('\r'); [EOL]       assertEquals("\\u000d", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST_BYTE()  throws Throwable  { [EOL]       byte byte0 = ObjectUtils.CONST_BYTE(127); [EOL]       assertEquals((byte)127, byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('0'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       Integer integer0 = new Integer(36); [EOL]       Class<Integer> class0 = Integer.class; [EOL]       String string0 = ReflectionToStringBuilder.toString(integer0, toStringStyle0, true, true, (Class<? super Integer>) class0); [EOL]       assertEquals("36,1360826667806852920,4,2147483647,-2147483648,32,int,{0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9},{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9},{0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z},{9,99,999,9999,99999,999999,9999999,99999999,999999999,2147483647}", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbooleanValue()  throws Throwable  { [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(); [EOL]       mutableBoolean0.setValue(true); [EOL]       mutableBoolean0.hashCode(); [EOL]       assertTrue(mutableBoolean0.booleanValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDigits()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isDigits((String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHex()  throws Throwable  { [EOL]       String string0 = Conversion.intToHex((-4361), (-1), "", (-4361), (-4361)); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("BnJbN*", "ARM45"); [EOL]        [EOL]       String string1 = StringUtils.trimToEmpty("BnJbN*"); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "BnJbN*", (CharSequence) "ARM45"); [EOL]        [EOL]       String string2 = StringUtils.swapCase("BnJbN*"); [EOL]        [EOL]       PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(); [EOL]        [EOL]       HashSet<String> hashSet0 = new HashSet<String>(priorityQueue0); [EOL]       assertTrue(hashSet0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = hashSet0.add("BnJbN*"); [EOL]       assertFalse(hashSet0.isEmpty()); [EOL]        [EOL]       String string3 = StringUtils.join((Iterable<?>) hashSet0, 's'); [EOL]       assertFalse(hashSet0.isEmpty()); [EOL]        [EOL]       String string4 = StringUtils.chomp("", "bNjBn*"); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "", (-1)); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) "java.lang.String@0000000001"; [EOL]       String string5 = StringUtils.join(objectArray0, 'x', (-1), (-1)); [EOL]        [EOL]       String string6 = StringUtils.strip("B,3", ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("ARM45", "ARM45", 3207); [EOL]        [EOL]       String string7 = StringUtils.join((Iterator<?>) null, "A}&z47|p01e"); [EOL]        [EOL]       String string8 = StringUtils.removeStart("jh", "jh"); [EOL]        [EOL]       String string9 = StringUtils.abbreviate("", (-1), 3207); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(false); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toStringOnOff(false); [EOL]       assertEquals("off", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       char[] charArray0 = new char[6]; [EOL]       ArrayUtils.reverse(charArray0); [EOL]       assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(2374, 0, 2374); [EOL]       Fraction fraction1 = Fraction.getReducedFraction(0, 2374); [EOL]       Fraction fraction2 = fraction0.ONE_HALF.multiplyBy(fraction1); [EOL]       assertEquals(2374.0F, fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("OMp</~5SIb#[E"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = 540; [EOL]       StrBuilder strBuilder1 = new StrBuilder(540); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) "OMp</~5SIb#[E"; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder0; [EOL]       StrBuilder strBuilder3 = strBuilder1.appendWithSeparators(objectArray0, "OMp</~5SIb#[E"); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteFirst(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       int int1 = (-2905); [EOL]       StrBuilder strBuilder5 = strBuilder1.deleteAll("OMp</~5SIb#[E"); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       int int2 = (-867); [EOL]       StrBuilder strBuilder6 = strBuilder1.appendFixedWidthPadRight((-2905), (-867), 'i'); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith("OMp</~5SIb#[E"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string1 = strBuilder6.getNewLineText(); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       String string2 = null; [EOL]       StringBuffer stringBuffer0 = null; [EOL]       try { [EOL]         stringBuffer0 = new StringBuffer((String) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((-2091), (-2091), 0, 0); [EOL]       int int0 = BooleanUtils.toInteger(boolean0, (-2091), Integer.MAX_VALUE, 0); [EOL]       assertEquals((-2091), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[8]; [EOL]       int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1464), (-1063)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetThreadCount()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       basicThreadFactory_Builder0.wrappedFactory(basicThreadFactory0); [EOL]       BasicThreadFactory basicThreadFactory1 = basicThreadFactory_Builder0.build(); [EOL]       assertEquals(0L, basicThreadFactory1.getThreadCount()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]       assertEquals(0, charArray0.length); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string3 = StringUtils.replacePattern("", "", ""); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string4 = StringUtils.deleteWhitespace("null comparator"); [EOL]        [EOL]       String string5 = StringUtils.getCommonPrefix((String[]) null); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAlphanumericSpace(""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       Stack<StrBuilder> stack0 = new Stack<StrBuilder>(); [EOL]       assertFalse(stack0.contains(strBuilder0)); [EOL]        [EOL]       LinkedHashSet<StrBuilder> linkedHashSet0 = new LinkedHashSet<StrBuilder>(stack0); [EOL]       assertFalse(stack0.contains(strBuilder0)); [EOL]       assertFalse(linkedHashSet0.contains(strBuilder0)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) linkedHashSet0); [EOL]       assertFalse(stack0.contains(strBuilder1)); [EOL]       assertFalse(linkedHashSet0.contains(strBuilder1)); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator(""); [EOL]        [EOL]       int int0 = (-1); [EOL]       StringWriter stringWriter0 = null; [EOL]       try { [EOL]         stringWriter0 = new StringWriter((-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Negative buffer size [EOL]          // [EOL]          verifyException("java.io.StringWriter", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = StringUtils.chomp((String) null, "U%Hs7' "); [EOL]        [EOL]       boolean boolean0 = StringUtils.isWhitespace("U%Hs7' "); [EOL]        [EOL]       String string1 = StringUtils.stripToNull("U%Hs7' "); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "U%Hs7'", 0); [EOL]        [EOL]       String string2 = StringUtils.reverse("U%Hs7'"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("", 'P'); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 0); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null); [EOL]        [EOL]       Locale locale0 = Locale.ROOT; [EOL]       assertEquals("", locale0.toString()); [EOL]        [EOL]       String string3 = StringUtils.lowerCase("The character ", locale0); [EOL]       assertEquals("", locale0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('0'); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       char char0 = 's'; [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst('s'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder2 = strBuilder0.replace(strMatcher0, "", 0, 0, 116); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.insert(2545, false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2545 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad("", 4096, '4'); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("", ""); [EOL]        [EOL]       String string1 = StringUtils.center(string0, 10, '4'); [EOL]        [EOL]       String[] stringArray0 = new String[0]; [EOL]       String string2 = StringUtils.replaceEach("", stringArray0, stringArray0); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.replace("T&7r}Cd@", string1, "", 0); [EOL]       assertFalse(string0.equals((Object)string2)); [EOL]       assertFalse(string1.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       ArrayList<Integer> arrayList0 = new ArrayList<Integer>(955); [EOL]       assertFalse(arrayList0.contains(955)); [EOL]        [EOL]       String string0 = StringUtils.join((Iterable<?>) arrayList0, '5'); [EOL]       assertFalse(arrayList0.contains(955)); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       String string1 = StringUtils.mid("", 955, 3); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       String string2 = StringUtils.upperCase(""); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       String string3 = StringUtils.removeStartIgnoreCase("\r", ""); [EOL]        [EOL]       charSequenceArray0[3] = (CharSequence) "\r"; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[2]); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) charBuffer0; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[0], charSequenceArray0[0]); [EOL]        [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       long[] longArray0 = new long[7]; [EOL]       longArray0[0] = (long) 3; [EOL]       longArray0[1] = 2587L; [EOL]       longArray0[2] = (long) 3; [EOL]       longArray0[3] = (long) 955; [EOL]       longArray0[4] = (long) 955; [EOL]       longArray0[5] = (long) 3; [EOL]       longArray0[6] = (-1L); [EOL]       String string4 = StringUtils.join(longArray0, '5', 8192, (-1515)); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string5 = StringUtils.chomp("\"N;ix%MK");ix%MK", string5); [EOL]        [EOL]       charSequenceArray0[7] = (CharSequence) "\"N;ix%MK"; [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[0] = (float) 8192; [EOL]       floatArray0[1] = (float) 3L; [EOL]       String string6 = StringUtils.join(floatArray0, 'L', 32, 16); [EOL]        [EOL]       charSequenceArray0[8] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       String string0 = DateFormatUtils.formatUTC(0L, "."); [EOL]       assertEquals(".", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder[] strBuilderArray0 = new StrBuilder[0]; [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, ""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.reset(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.above(3128); [EOL]       UnicodeEscaper unicodeEscaper0 = new UnicodeEscaper(); [EOL]       String string0 = unicodeEscaper0.toUtf16Escape(3128); [EOL]       StringWriter stringWriter0 = new StringWriter(1); [EOL]       int int0 = numericEntityEscaper0.translate((CharSequence) string0, 0, (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer((ExecutorService) null); [EOL]       multiBackgroundInitializer0.initialize(); [EOL]       multiBackgroundInitializer0.getTaskCount(); [EOL]       multiBackgroundInitializer0.getTaskCount(); [EOL]       multiBackgroundInitializer0.initialize(); [EOL]       Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0); [EOL]       callableBackgroundInitializer0.start(); [EOL]       multiBackgroundInitializer0.setExternalExecutor((ExecutorService) null); [EOL]       multiBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.isStarted(); [EOL]       multiBackgroundInitializer0.getTaskCount(); [EOL]       Callable<String> callable1 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null, (Object) null).when(callable1).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer1 = new CallableBackgroundInitializer<String>(callable1); [EOL]       callableBackgroundInitializer1.start(); [EOL]       callableBackgroundInitializer1.get(); [EOL]       callableBackgroundInitializer1.initialize(); [EOL]       assertTrue(callableBackgroundInitializer1.isStarted()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEnableSubstitutionInVariables()  throws Throwable  { [EOL]       HashMap<String, Locale.Category> hashMap0 = new HashMap<String, Locale.Category>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Locale.Category>) hashMap0); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.setVariableSuffix('X'); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) null, (Object) null); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(37); [EOL]       hashCodeBuilder1.append((byte)0); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = "org.apache.commons.lang3.text.StrBuilder"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder"); [EOL]       assertEquals(40, strBuilder0.length()); [EOL]        [EOL]       StrBuilder[] strBuilderArray0 = new StrBuilder[0]; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll(strBuilderArray0); [EOL]       assertEquals(40, strBuilder0.length()); [EOL]       assertEquals(40, strBuilder1.length()); [EOL]       assertEquals(0, strBuilderArray0.length); [EOL]        [EOL]       char char0 = '2'; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator('2'); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]       assertEquals(41, strBuilder2.length()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder2.toStringBuilder(); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]       assertEquals(41, strBuilder2.length()); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append(stringBuffer0); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]       assertEquals(41, strBuilder3.length()); [EOL]        [EOL]       strBuilder0.hashCode(); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder", (Object[]) strBuilderArray0); [EOL]       assertEquals(82, strBuilder0.length()); [EOL]       assertEquals(82, strBuilder1.length()); [EOL]       assertEquals(82, strBuilder4.length()); [EOL]       assertEquals(0, strBuilderArray0.length); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870); [EOL]       assertEquals(82, strBuilder0.length()); [EOL]        [EOL]       char char1 = ''; [EOL]       int int1 = 0; [EOL]       int int2 = strBuilder1.lastIndexOf('', 0); [EOL]       assertEquals(82, strBuilder0.length()); [EOL]       assertEquals(82, strBuilder1.length()); [EOL]       assertEquals(0, strBuilderArray0.length); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.insert(108, (long) 41); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 108 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'u'; [EOL]       charArray0[6] = '0'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       strTokenizer0.next(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeHtml4()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeHtml4((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln("Op@VD%uv8O6;z[\"gC"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator('a', 6); [EOL]        [EOL]       TreeSet<String> treeSet0 = new TreeSet<String>();z[\"gC")); [EOL]        [EOL]       TreeSet<String> treeSet1 = new TreeSet<String>((SortedSet<String>) treeSet0);z[\"gC"));z[\"gC")); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterable<?>) treeSet1, "Op@VD%uv8O6;z[\"gC");z[\"gC"));z[\"gC")); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.mark(115); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int0 = (-1726); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1726), 'b'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1726 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoByte()  throws Throwable  { [EOL]       byte byte0 = NumberUtils.toByte("", (byte) (-71)); [EOL]       assertEquals((byte) (-71), byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.SPACE; [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0); [EOL]       assertEquals(1, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.capitalize(" "); [EOL]        [EOL]       String string2 = StringUtils.remove(" ", '8'); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " "); [EOL]        [EOL]       int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " ", charSequenceArray0[0]); [EOL]       assertEquals(1, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.SPACE; [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) " "; [EOL]       int int0 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) " "); [EOL]       assertEquals(1, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.remove(" ", '8'); [EOL]        [EOL]       String string2 = StringUtils.join((Object[]) charSequenceArray0, " "); [EOL]       assertEquals(1, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " "); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphaSpace(" "); [EOL]        [EOL]       String string3 = StringUtils.remove(" ", 'q'); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmid()  throws Throwable  { [EOL]       String string0 = null; [EOL]       String string1 = StringUtils.mid((String) null, 0, 1805); [EOL]       assertNull(string1); [EOL]        [EOL]       int[] intArray0 = new int[7]; [EOL]       intArray0[0] = 1805; [EOL]       intArray0[1] = 0; [EOL]       intArray0[2] = 0; [EOL]       intArray0[3] = 1805; [EOL]       intArray0[4] = 1805; [EOL]       intArray0[5] = 1805; [EOL]       intArray0[6] = 1805; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(intArray0, '.', (-502), 0); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -502 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((Object[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststop()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       System.setCurrentTimeMillis(0L); [EOL]       long long0 = stopWatch0.getTime(); [EOL]       assertEquals((-1392409281L), long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('j', 'y'); [EOL]       boolean boolean0 = charRange0.contains('j'); [EOL]       assertEquals('j', charRange0.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSuccessful()  throws Throwable  { [EOL]       MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(); [EOL]       MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize(); [EOL]       boolean boolean0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(".F_8~jr2_t 5y.4", 0, 0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisInstance()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       boolean boolean0 = TypeUtils.isInstance((Object) null, class0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('o'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Byte[] byteArray0 = new Byte[0]; [EOL]       Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0); [EOL]       assertNotSame(byteArray1, byteArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append('?', 'h'); [EOL]       compareToBuilder0.append(false, true); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(false, true); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setArraySeparator((String) null); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Double[] doubleArray0 = new Double[0]; [EOL]       double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCharSet()  throws Throwable  { [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = "A-Za-z"; [EOL]       CharSet charSet0 = CharSet.getInstance(stringArray0); [EOL]       assertNotNull(charSet0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort(); [EOL]       mutableShort0.subtract((Number) mutableShort0); [EOL]       assertEquals(0L, mutableShort0.longValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetLeft()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1)); [EOL]       Pair<Object, Object> pair0 = Pair.of((Object) integer0, (Object) integer0); [EOL]       Object object0 = pair0.getLeft(); [EOL]       assertEquals((-1), object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       int int1 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.right("", 0); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils"); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0); [EOL]        [EOL]       String string6 = StringUtils.lowerCase("s"); [EOL]       assertFalse(string6.equals((Object)string1)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]        [EOL]       String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string0)); [EOL]       assertFalse(string7.equals((Object)string6)); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string1)); [EOL]       assertFalse(string7.equals((Object)string2)); [EOL]        [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = ".ti')kKzb5J(cbBlh"; [EOL]       stringArray0[1] = "s"; [EOL]       stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils"; [EOL]       stringArray0[3] = "s"; [EOL]       stringArray0[4] = "s"; [EOL]       stringArray0[5] = "{}"; [EOL]       stringArray0[6] = "{}"; [EOL]       stringArray0[7] = ""; [EOL]       stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh"; [EOL]       String string8 = StringUtils.getCommonPrefix(stringArray0); [EOL]       assertFalse(string8.equals((Object)string7)); [EOL]       assertFalse(string8.equals((Object)string4)); [EOL]       assertFalse(string8.equals((Object)string2)); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]       assertTrue(string8.equals((Object)string3)); [EOL]       assertFalse(string8.equals((Object)string0)); [EOL]       assertFalse(string8.equals((Object)string1)); [EOL]       assertFalse(string8.equals((Object)string5)); [EOL]        [EOL]       boolean boolean1 = StringUtils.startsWithAny("{}", charSequenceArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoLong()  throws Throwable  { [EOL]       long long0 = NumberUtils.toLong("", (long) (byte)0); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4043)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       long[] longArray0 = new long[2]; [EOL]       longArray0[0] = 1885L; [EOL]       longArray0[1] = (long) 0; [EOL]       String string4 = StringUtils.join(longArray0, 'S', 285, 0); [EOL]       assertTrue(string4.equals((Object)string1)); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("LaKB", "{FakYXNQUOHZ", (-4043)); [EOL]       assertFalse(stringArray2.equals((Object)stringArray0)); [EOL]       assertFalse(stringArray2.equals((Object)stringArray1)); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byteArray0[0] = (byte)21; [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte)16; [EOL]       byteArray0[3] = (byte) (-1); [EOL]       byteArray0[4] = (byte)3; [EOL]       byteArray0[5] = (byte)64; [EOL]       byteArray0[6] = (byte)36; [EOL]       try {  [EOL]         StringUtils.toString(byteArray0, ""); [EOL]         fail("Expecting exception: UnsupportedEncodingException"); [EOL]        [EOL]       } catch(UnsupportedEncodingException e) { [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testor()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       booleanArray0[0] = true; [EOL]       boolean boolean0 = BooleanUtils.xor(booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.increment(); [EOL]       MutableLong mutableLong1 = new MutableLong("0"); [EOL]       int int0 = mutableLong0.compareTo(mutableLong1); [EOL]       assertEquals(1.0F, mutableLong0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       long[] longArray0 = new long[0]; [EOL]       long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0); [EOL]       assertNotSame(longArray1, longArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       short[] shortArray0 = new short[4]; [EOL]       short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)154); [EOL]       assertEquals(4, shortArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-113), 1, 2, (-451), 3750); [EOL]       Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=8,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testuncaughtExceptionHandler()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       MockThread mockThread0 = new MockThread(""); [EOL]       Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Thread thread0 = basicThreadFactory0.newThread(mockThread0); [EOL]       assertEquals(0, thread0.countStackFrames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoNoNullStringArray()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       linkedList0.add("bA'rZ-*CMNc~eS"); [EOL]       String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray(linkedList0); [EOL]       String[] stringArray1 = ReflectionToStringBuilder.toNoNullStringArray(stringArray0); [EOL]       assertEquals(1, stringArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]        [EOL]       StringWriter stringWriter1 = stringWriter0.append('M'); [EOL]        [EOL]       StringWriter stringWriter2 = stringWriter1.append((CharSequence) strBuilder0, 0, 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter2.getBuffer(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       stringBuffer0.ensureCapacity(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float[] floatArray0 = new float[4]; [EOL]       float float0 = NumberUtils.max(floatArray0); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetClass()  throws Throwable  { [EOL]       ClassLoader classLoader0 = ClassLoader.getSystemClassLoader(); [EOL]       Class<?> class0 = ClassUtils.getClass(classLoader0, "short"); [EOL]       assertEquals("short", class0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       short[] shortArray0 = new short[1]; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '6'; [EOL]       charArray0[1] = 'l'; [EOL]       charArray0[2] = '4'; [EOL]       charArray0[3] = 'm'; [EOL]       charArray0[5] = '/'; [EOL]       charArray0[6] = '_'; [EOL]       charArray0[7] = 'F'; [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte) (-1); [EOL]       byteArray0[1] = (byte) (-23); [EOL]       byteArray0[2] = (byte) (-23); [EOL]       byteArray0[3] = (byte)0; [EOL]       byte[] byteArray1 = new byte[4]; [EOL]       byteArray1[0] = (byte) (-1); [EOL]       byteArray1[1] = (byte) (-23); [EOL]       byteArray1[2] = (byte) (-23); [EOL]       byteArray1[3] = (byte) (-23); [EOL]       equalsBuilder1.append(byteArray0, byteArray1); [EOL]       assertFalse(equalsBuilder1.isEquals()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendNewLine(); [EOL]        [EOL]       boolean boolean0 = strBuilder3.equals((Object) strBuilder0); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = ':'; [EOL]       String string0 = strBuilder0.substring(0, 0); [EOL]        [EOL]       charArray0[1] = ')'; [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int2 = strBuilder2.indexOf("=.j", 1810); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendNull(); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chomp("Jl]B"); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("The character ", "The character ", (String) null); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = "\\u000"; [EOL]       String string3 = StringUtils.substringBeforeLast("The character ", string2); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       String string4 = StringUtils.center("Jl]B", 740, '1'); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]        [EOL]       String string5 = StringUtils.substringAfter("", "k U"); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertTrue(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]        [EOL]       String string6 = StringUtils.chop("Jl]B"); [EOL]       assertFalse(string6.equals((Object)string1)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "Jl]", (-1)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Jl]", "k U", "Jl]"); [EOL]        [EOL]       String string7 = StringUtils.remove("`O|&cPDtbOg", 'e'); [EOL]       assertFalse(string7.equals((Object)string6)); [EOL]       assertFalse(string7.equals((Object)string0)); [EOL]       assertFalse(string7.equals((Object)string2)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string1)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "`O|&cPDtbOg", (-1)); [EOL]        [EOL]       String string8 = StringUtils.uncapitalize("qg x>=XyKl/i"); [EOL]       assertFalse(string8.equals((Object)string7)); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]       assertFalse(string8.equals((Object)string4)); [EOL]       assertFalse(string8.equals((Object)string2)); [EOL]       assertFalse(string8.equals((Object)string5)); [EOL]       assertFalse(string8.equals((Object)string3)); [EOL]       assertFalse(string8.equals((Object)string1)); [EOL]       assertFalse(string8.equals((Object)string0)); [EOL]        [EOL]       String string9 = StringUtils.strip("p{InCombiningDiacriticalMarks}+"); [EOL]       assertFalse(string9.equals((Object)string6)); [EOL]       assertFalse(string9.equals((Object)string7)); [EOL]       assertFalse(string9.equals((Object)string0)); [EOL]       assertFalse(string9.equals((Object)string1)); [EOL]       assertFalse(string9.equals((Object)string5)); [EOL]       assertFalse(string9.equals((Object)string2)); [EOL]       assertFalse(string9.equals((Object)string8)); [EOL]       assertFalse(string9.equals((Object)string4)); [EOL]       assertFalse(string9.equals((Object)string3)); [EOL]        [EOL]       int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "Jl]B"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       StringBuffer stringBuffer1 = stringBuffer0.reverse(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       charArray0[0] = '3'; [EOL]       StrBuilder strBuilder2 = strBuilder0.append(3986.49F); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Object[]) null, "rXB\u0003WVlNWF<}"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       boolean boolean0 = strBuilder3.contains((StrMatcher) strMatcher_NoMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(""); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       IntStream intStream0 = strBuilder2.codePoints(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.appendln(stringBuffer0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append(5305); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln('3'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0, (-2104)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder7.appendln(""); [EOL]       assertFalse(strBuilder8.isEmpty()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = "hZ3CNnc|]e"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.minimizeCapacity(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll(strMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append((long) 104); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.ensureCapacity(104); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.getTokenList(); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(list0.isEmpty()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       List<String> list1 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertTrue(list1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = new StrBuilder(); [EOL]       assertTrue(strBuilder6.isEmpty()); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]        [EOL]       int int2 = 101; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append("/t@?VM", (-775), (-3316)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       Object object0 = fastDateFormat0.parseObject("1/1/70 12:00 AM", parsePosition0); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-43)); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-2081), (-1)).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.is((Object) integer0, comparator0); [EOL]       boolean boolean0 = range0.isStartedBy(integer0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-890)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append("$Ps-)|ysy>r47^"); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder1.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       objectArray0[0] = (Object) strBuilder1; [EOL]       objectArray0[1] = (Object) "$Ps-)|ysy>r47^"; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer(); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder1.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder1.size()); [EOL]        [EOL]       objectArray0[4] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[5] = (Object) "$Ps-)|ysy>r47^"; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(objectArray0, "$Ps-)|ysy>r47^"); [EOL]       assertEquals(427, strBuilder0.size()); [EOL]       assertEquals(427, strBuilder1.size()); [EOL]       assertEquals(427, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(4, (float) 4); [EOL]       assertEquals(430, strBuilder0.size()); [EOL]       assertEquals(430, strBuilder1.size()); [EOL]       assertEquals(430, strBuilder2.size()); [EOL]       assertEquals(430, strBuilder3.size()); [EOL]        [EOL]       String string0 = strBuilder1.midString((-3719), 97); [EOL]       assertEquals(430, strBuilder0.size()); [EOL]       assertEquals(430, strBuilder1.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'U'; [EOL]       char[] charArray1 = new char[6]; [EOL]       compareToBuilder0.append(charArray0, charArray1); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       compareToBuilder0.append(objectArray0, objectArray0); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{")); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{")); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{")); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{"); [EOL]        [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) 0; [EOL]       boolean boolean3 = arrayList0.add((Object) ""); [EOL]       assertTrue(arrayList0.contains("")); [EOL]       assertFalse(arrayList0.contains("t{")); [EOL]        [EOL]       arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{"); [EOL]       assertTrue(arrayList0.contains("*aKUDx7dwU3mi-y:{")); [EOL]       assertFalse(arrayList0.contains("t{")); [EOL]        [EOL]       String string2 = StringUtils.join(doubleArray0, 'q'); [EOL]        [EOL]       String string3 = StringUtils.replace("t{", "g?PZ{DRa[O6upHJ", "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       boolean boolean4 = StringUtils.isNumericSpace(stringBuffer0); [EOL]        [EOL]       String string4 = StringUtils.left("", 0); [EOL]        [EOL]       boolean boolean5 = StringUtils.startsWith("", "g?PZ{DRa[O6upHJ"); [EOL]        [EOL]       String string5 = StringUtils.join((Object[]) stringArray0, 'q'); [EOL]        [EOL]       boolean boolean6 = StringUtils.contains((CharSequence) "*qKUqx7dwU3mi-y:", (CharSequence) "t{"); [EOL]        [EOL]       String string6 = StringUtils.strip("0.0"); [EOL]        [EOL]       String string7 = StringUtils.join((Iterable<?>) arrayList0, 'q'); [EOL]       assertTrue(arrayList0.contains("*aKUDx7dwU3mi-y:{")); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("*qKUqx7dwU3mi-y:"); [EOL]        [EOL]       boolean boolean7 = StringUtils.startsWithAny("", stringArray0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join((Iterator<?>) listIterator0, 'q'); [EOL]         fail("Expecting exception: ConcurrentModificationException"); [EOL]        [EOL]       } catch(ConcurrentModificationException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.util.ArrayList$Itr", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("9<-;", "9<-;"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("", "9<-;", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.center((String) null, 11, 'H'); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.overlay("eUUr{~\"Kk", "Array and element cannot both be null", 127, 838); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = 'p'; [EOL]       charArray0[1] = 'H'; [EOL]       charArray0[2] = 'H'; [EOL]       charArray0[3] = 'H'; [EOL]       charArray0[4] = 'H'; [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) "eUUr{~\"KkArray and element cannot both be null", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("uGFBSQ?f[)ER{hCc", "]QJCk)m+seUL", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("9.2a=P+HRf`R's^w+eE", ""); [EOL]        [EOL]       String string4 = StringUtils.uncapitalize("Array and element cannot both be null"); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]        [EOL]       char[] charArray1 = new char[4]; [EOL]       assertFalse(charArray1.equals((Object)charArray0)); [EOL]        [EOL]       charArray1[0] = 'H'; [EOL]       charArray1[1] = 'H'; [EOL]       charArray1[2] = 'p'; [EOL]       charArray1[3] = '['; [EOL]       boolean boolean1 = StringUtils.containsAny((CharSequence) "Array and element cannot both be null", charArray1); [EOL]       assertFalse(charArray1.equals((Object)charArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, ""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       String string1 = ""; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(stringBuffer0, 3, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-466)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       objectArray0[1] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       StrBuilder strBuilder1 = strBuilder0.append("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", objectArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Range<String> range0 = Range.is(""); [EOL]       boolean boolean0 = range0.isNaturalOrdering(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       float[] floatArray0 = new float[0]; [EOL]       float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.3F); [EOL]       assertEquals(0, floatArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       IDKey iDKey0 = new IDKey(" in an array of "); [EOL]       EqualsBuilder.getRegisterPair(iDKey0, (Object) null); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       short[] shortArray0 = new short[2]; [EOL]       shortArray0[0] = (short)40; [EOL]       shortArray0[1] = (short) (-316); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(false, false); [EOL]       assertTrue(equalsBuilder2.isEquals()); [EOL]        [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       booleanArray0[0] = true; [EOL]       boolean[] booleanArray1 = new boolean[3]; [EOL]       booleanArray1[0] = true; [EOL]       booleanArray1[1] = false; [EOL]       booleanArray1[2] = false; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(booleanArray0, booleanArray1); [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) (short)40; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(doubleArray0, doubleArray0); [EOL]       boolean boolean0 = EqualsBuilder.isRegistered(equalsBuilder4, equalsBuilder4); [EOL]       assertFalse(equalsBuilder1.isEquals()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutablePair<Object, Object> mutablePair0 = new MutablePair<Object, Object>(); [EOL]       Integer integer0 = new Integer(6); [EOL]       Object object0 = mutablePair0.setValue(integer0); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNamingPattern()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.namingPattern(""); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       String string0 = basicThreadFactory0.getNamingPattern(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll("2YZaq+Yp"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'U'; [EOL]       charArray0[1] = 'E'; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]       assertEquals(114, strBuilder0.size()); [EOL]       assertEquals(114, strBuilder1.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]       assertEquals(114, strBuilder0.size()); [EOL]       assertEquals(114, strBuilder1.size()); [EOL]       assertEquals(114, strBuilder2.size()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(114, strBuilder0.size()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertEquals(114, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) 104); [EOL]       assertEquals(117, strBuilder0.size()); [EOL]       assertEquals(117, strBuilder1.size()); [EOL]       assertEquals(117, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendSeparator("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", (String) null); [EOL]       assertEquals(174, strBuilder0.size()); [EOL]       assertEquals(174, strBuilder1.size()); [EOL]       assertEquals(174, strBuilder3.size()); [EOL]       assertEquals(174, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.ensureCapacity(104); [EOL]       assertEquals(174, strBuilder0.size()); [EOL]       assertEquals(174, strBuilder1.size()); [EOL]       assertEquals(174, strBuilder3.size()); [EOL]       assertEquals(174, strBuilder5.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(174, strBuilder0.size()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]       assertEquals(0, list0.size()); [EOL]       assertEquals(174, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]       assertEquals(174, strBuilder0.size()); [EOL]       assertEquals(174, strBuilder6.size()); [EOL]       assertEquals(174, strBuilder1.size()); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]       assertEquals(177, strBuilder0.size()); [EOL]       assertEquals(177, strBuilder7.size()); [EOL]        [EOL]       int int2 = strBuilder4.lastIndexOf('/'); [EOL]       assertEquals(177, strBuilder0.size()); [EOL]       assertEquals(177, strBuilder1.size()); [EOL]       assertEquals(177, strBuilder3.size()); [EOL]       assertEquals(177, strBuilder4.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 101, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("AEhzPmLst|m|:e7J{Z"); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendFieldSeparator(stringBuffer0); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       int int0 = 79; [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((double) 79); [EOL]       assertEquals(4, strBuilder0.size()); [EOL]       assertEquals(4, strBuilder1.size()); [EOL]        [EOL]       int int1 = (-2267); [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder0); [EOL]       assertEquals(56, strBuilder0.size()); [EOL]       assertEquals(56, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll('o'); [EOL]       assertEquals(53, strBuilder0.size()); [EOL]       assertEquals(53, strBuilder2.size()); [EOL]       assertEquals(53, strBuilder3.size()); [EOL]        [EOL]       strBuilder3.buffer = null; [EOL]       assertEquals(53, strBuilder0.size()); [EOL]       assertEquals(53, strBuilder2.size()); [EOL]       assertEquals(53, strBuilder3.size()); [EOL]        [EOL]       String string0 = "nCIF=^XRVL:\\t%AH&"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("", comparator0); [EOL]       boolean boolean0 = range0.equals(""); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiPrintable('\uD7C0'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.isEmpty(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.midString(34, (-1)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator(">R<{"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'K'; [EOL]       charArray0[2] = 'L'; [EOL]       charArray0[3] = 'x'; [EOL]       charArray0[4] = '`'; [EOL]       charArray0[5] = '^'; [EOL]       charArray0[6] = 'V'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.getChars(3889, 0, charArray0, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       String string2 = strBuilder1.leftString((-2254)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder3.contains('`'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1709)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toString(false, "Pl=kr", "T(yEy"); [EOL]       assertEquals("T(yEy", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-297.21217)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = 802; [EOL]       String string1 = strBuilder0.midString(802, 802); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf('&', 4814); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int2 = strBuilder0.lastIndexOf('&', (-1)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       String string2 = "p*"; [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("p*"); [EOL]        [EOL]       int int3 = (-933); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.replace((StrMatcher) strMatcher_StringMatcher0, (String) null, (-1), (-933), 4814); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (float) 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int0 = strBuilder1.capacity(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder2 = strBuilder1.append((CharSequence) strBuilder0, 0, 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append(strBuilder3); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       char char0 = '|'; [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceAll('A', '|'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.validateRange(32, 32); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = arrayDeque0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, "java.class.version"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append('Y'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       int int0 = (-1994); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1994)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(""); [EOL]        [EOL]       int int1 = (-2242); [EOL]       int int2 = 5; [EOL]       strBuilder1.size = 5; [EOL]        [EOL]       strBuilder1.size = (-2242); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int3 = 20; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.replace((-2242), 20, "java.compiler"); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -2242 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("AEhzPmLst|m|:e7J{Z"); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendFieldSeparator(stringBuffer0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       charRange0.hashCode(); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char char0 = '\"'; [EOL]       strBuilder0.size = (-914); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendSeparator('\"', 'p'); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       double double0 = ObjectUtils.CONST((double) (-380)); [EOL]       assertEquals((-380.0), double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setSizeEndText(""); [EOL]       String string0 = standardToStringStyle0.getSizeEndText(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnewThread()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.daemon(true); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       MockThread mockThread0 = new MockThread(""); [EOL]       Thread thread0 = basicThreadFactory0.newThread(mockThread0); [EOL]       assertTrue(thread0.isDaemon()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf("2X:=4rf^>1T./&0xdS"); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteFirst((StrMatcher) null); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder2.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStackFrameList()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(""); [EOL]       List<String> list0 = ExceptionUtils.getStackFrameList(mockThrowable0); [EOL]       assertTrue(list0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetLeft()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       MutableTriple<Integer, String, Integer> mutableTriple0 = MutableTriple.of(integer0, "(Z`wGbDj=fZ0H", integer0); [EOL]       Integer integer1 = mutableTriple0.getLeft(); [EOL]       assertEquals(0, (int)integer1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[1]; [EOL]       int int0 = ArrayUtils.indexOf(doubleArray0, 5489.276752532, (-2526), 654.0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       double double0 = NumberUtils.max((-479.6384202), (-1.0), (-1.0)); [EOL]       assertEquals((-1.0), double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder4.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(2954, strBuilder0.length()); [EOL]       assertEquals(2954, strBuilder4.length()); [EOL]       assertEquals(2954, strBuilder5.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(5777, strBuilder0.length()); [EOL]       assertEquals(5777, strBuilder1.length()); [EOL]       assertEquals(5777, strBuilder6.length()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertEquals(5777, strBuilder0.length()); [EOL]       assertEquals(5777, strBuilder1.length()); [EOL]       assertEquals(5777, strBuilder6.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(5782, strBuilder7.length()); [EOL]       assertEquals(5782, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(5800, strBuilder0.length()); [EOL]       assertEquals(5800, strBuilder8.length()); [EOL]       assertEquals(5800, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(8622, strBuilder0.length()); [EOL]       assertEquals(8622, strBuilder9.length()); [EOL]       assertEquals(8622, strBuilder1.length()); [EOL]       assertEquals(8622, strBuilder2.length()); [EOL]       assertEquals(8622, strBuilder3.length()); [EOL]       assertEquals(8622, strBuilder6.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder8.new StrBuilderTokenizer(); [EOL]       assertEquals(8622, strBuilder0.length()); [EOL]       assertEquals(8622, strBuilder8.length()); [EOL]       assertEquals(8622, strBuilder1.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]       assertEquals(8622, strBuilder0.length()); [EOL]       assertEquals(8622, strBuilder8.length()); [EOL]       assertEquals(8622, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertEquals(8622, strBuilder0.length()); [EOL]       assertEquals(8622, strBuilder8.length()); [EOL]       assertEquals(8622, strBuilder1.length()); [EOL]       assertEquals(8622, strBuilder10.length()); [EOL]        [EOL]       StrBuilder strBuilder11 = strBuilder6.deleteFirst('\\'); [EOL]       assertEquals(8621, strBuilder0.length()); [EOL]       assertEquals(8621, strBuilder1.length()); [EOL]       assertEquals(8621, strBuilder11.length()); [EOL]       assertEquals(8621, strBuilder6.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder((Object) null, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("java.vm.specification.name", (Object) toStringBuilder0, true); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.getInstance((String[]) null); [EOL]       assertNull(charSet0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]       Class<Object> class0 = Object.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, true, true); [EOL]       reflectionToStringBuilder0.setUpToClass(class0); [EOL]       assertTrue(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       short[] shortArray1 = ArrayUtils.clone(shortArray0); [EOL]       assertFalse(shortArray1.equals((Object)shortArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte[]) null, (byte[]) null); [EOL]       float[] floatArray0 = new float[0]; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, (float[]) null); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(1L, 0L); [EOL]       Boolean boolean0 = equalsBuilder3.build(); [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = 772; [EOL]       intArray0[1] = (-1227); [EOL]       intArray0[2] = 40; [EOL]       intArray0[3] = 0; [EOL]       intArray0[4] = 41; [EOL]       intArray0[5] = (-2884); [EOL]       intArray0[6] = 0; [EOL]       intArray0[7] = 0; [EOL]       int[] intArray1 = new int[5]; [EOL]       intArray1[0] = 0; [EOL]       intArray1[1] = 0; [EOL]       intArray1[2] = 0; [EOL]       intArray1[3] = 41; [EOL]       intArray1[4] = (-1227); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder2.append(intArray0, intArray1); [EOL]       Pair<IDKey, IDKey> pair0 = EqualsBuilder.getRegisterPair(boolean0, equalsBuilder4); [EOL]       assertNotNull(pair0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = new StrBuilder(0); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.setCharAt(0, 'Y'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'u'; [EOL]       charArray0[2] = 'B'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       strTokenizer0.next(); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('H'); [EOL]       assertSame(strTokenizer0, strTokenizer1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("Z|&zc}e&+;", "Z|&zc}e&+;", "', is neither of type Map.Entry nor an Array", 5021); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'm'; [EOL]       charArray0[3] = 'M'; [EOL]       charArray0[4] = 'M'; [EOL]       charArray0[5] = '.'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0); [EOL]       assertEquals(6, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.overlay("Z|&zc}e&+;", "', is neither of type Map.Entry nor an Array", 3156, 3156);', is neither of type Map.Entry nor an Array", string1); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Z|&zc}e&+;', is neither of type Map.Entry nor an Array", 3156); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[1] = (CharSequence) "Z|&zc}e&+;', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[2] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[3] = (CharSequence) "Z|&zc}e&+;"; [EOL]       String string2 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-3453)); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[5] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "Z|&zc}e&+;', is neither of type Map.Entry nor an Array", charSequenceArray0); [EOL]       assertEquals(6, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       int[] intArray0 = new int[2]; [EOL]       double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0); [EOL]       assertEquals(4, doubleArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testacquire()  throws Throwable  { [EOL]       ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy(); [EOL]       ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer()); [EOL]       MockThread mockThread0 = new MockThread(); [EOL]       MockThread mockThread1 = new MockThread(threadGroup0, mockThread0); [EOL]       MockThread mockThread2 = new MockThread(mockThread1, ""); [EOL]       MockThread mockThread3 = new MockThread(mockThread2); [EOL]       ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer()); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(501, threadFactory0); [EOL]       threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread3, scheduledThreadPoolExecutor0); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(501, threadPoolExecutor_DiscardPolicy0); [EOL]       TimeUnit timeUnit0 = TimeUnit.SECONDS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor1, 501, timeUnit0, 501); [EOL]       timedSemaphore0.isShutdown(); [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       timedSemaphore0.getAverageCallsPerPeriod(); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.startTimer(); [EOL]       assertEquals(1, timedSemaphore0.getAcquireCount()); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int0 = 31; [EOL]       strBuilder_StrBuilderWriter0.write(31); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("", (-1), (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       StrLookup<String> strLookup0 = StrLookup.systemPropertiesLookup(); [EOL]       Properties properties0 = new Properties(); [EOL]       properties0.put("", strLookup0); [EOL]       String string0 = StrSubstitutor.replace((Object) "mp", properties0); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetShortClassName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getShortClassName("[][]"); [EOL]       assertEquals("][][]", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((-1569L), (-1569L)); [EOL]       int[] intArray0 = new int[4]; [EOL]       intArray0[0] = 2328; [EOL]       intArray0[1] = (-30); [EOL]       intArray0[2] = 166; [EOL]       intArray0[3] = (-1); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(intArray0, (int[]) null); [EOL]       assertSame(equalsBuilder3, equalsBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('w'); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher("^3U^;XUW^MhqPybj"); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendSeparator('w', 107); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, (-2284)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(289); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.deleteCharAt(1027); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1027 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Integer integer1 = new Integer(0); [EOL]       Range<Integer> range0 = Range.is(integer0); [EOL]       range0.getComparator(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(47, 0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.is((Object) range0, comparator0); [EOL]       Object object0 = range1.getMaximum(); [EOL]       boolean boolean0 = range1.isStartedBy(object0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("/UzT$c0PraLRBN}"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '9'; [EOL]       charArray0[1] = '%'; [EOL]       charArray0[2] = ':'; [EOL]       charArray0[3] = 'y'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(charArray0, 458, 458); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: 458 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[8]; [EOL]       byteArray0[0] = (byte) (-103); [EOL]       byteArray0[1] = (byte)32; [EOL]       byteArray0[2] = (byte) (-100); [EOL]       byteArray0[3] = (byte)33; [EOL]       byteArray0[4] = (byte) (-126); [EOL]       byteArray0[5] = (byte) (-113); [EOL]       byteArray0[6] = (byte)1; [EOL]       byteArray0[7] = (byte)26; [EOL]       String string0 = StringUtils.join(byteArray0, '-', (int) (byte)33, (int) (byte) (-126)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("Threshold must not be negative"); [EOL]        [EOL]       String string1 = StringUtils.replaceEach(" ", stringArray0, stringArray0); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("Threshold must not be negative", " ", (-375)); [EOL]        [EOL]       String[] stringArray1 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "Array and element cannot both be null", "Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String[] stringArray2 = StringUtils.substringsBetween("D75(_^ `&8i8(", ">D<O)oa1X?)", "Minimum abbreviation width with offset is 7"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendStart(stringBuffer0, (Object) null); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.clear(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       String string0 = ")[C$#_(U9,]+>eub7]}"; [EOL]       StrBuilder strBuilder5 = strBuilder0.appendln(false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.replaceAll(strMatcher0, ")[C$#_(U9,]+>eub7]}"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       char char0 = 'c'; [EOL]       int int3 = strBuilder0.lastIndexOf('c', 7); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder2.appendSeparator("Solaris"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendFixedWidthPadRight((Object) "java.vm.specification.version", 81, '0'); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = "o&$W$9Myt(-BI6CNQZ"; [EOL]       String string0 = " v](>;:r<Bi6i@@h-"; [EOL]       stringArray0[1] = " v](>;:r<Bi6i@@h-"; [EOL]       String string1 = StringUtils.getCommonPrefix(stringArray0); [EOL]       assertEquals(2, stringArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(" v](>;:r<Bi6i@@h-"); [EOL]        [EOL]       String string2 = StringUtils.left("P{", Integer.MAX_VALUE); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsIgnoreCase("P{", ""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("P{", Integer.MAX_VALUE, (-3384)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexToInt()  throws Throwable  { [EOL]       int int0 = Conversion.hexToInt("", 0, 0, 0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCharSet()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.ASCII_ALPHA_LOWER; [EOL]       String string0 = charSet0.toString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL] } [EOL] 
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       CharSequence[][] charSequenceArray0 = new CharSequence[4][4]; [EOL]       CharSequence[] charSequenceArray1 = new CharSequence[2]; [EOL]       char[] charArray0 = new char[16]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       charSequenceArray1[0] = (CharSequence) charBuffer0; [EOL]       CharBuffer charBuffer1 = CharBuffer.wrap(charArray0, 0, 0); [EOL]       charSequenceArray0[0] = charSequenceArray1; [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]       charSequenceArray0[1] = charSequenceArray0[0]; [EOL]       charSequenceArray0[2] = charSequenceArray0[0]; [EOL]       charSequenceArray0[3] = charSequenceArray0[0]; [EOL]       LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0); [EOL]       int int0 = lookupTranslator0.translate((CharSequence) charBuffer1, (-3), (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ZERO; [EOL]       Fraction fraction1 = Fraction.TWO_FIFTHS; [EOL]       boolean boolean0 = fraction0.equals(fraction1); [EOL]       assertEquals(2, fraction1.getNumerator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisTrue()  throws Throwable  { [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(boolean0); [EOL]       boolean boolean1 = mutableBoolean0.isTrue(); [EOL]       assertTrue(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       char[] charArray0 = new char[10]; [EOL]       StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('\u0000'); [EOL]       int int0 = strMatcher_CharMatcher0.isMatch(charArray0, 1, 1, 1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = IEEE754rUtils.max((-1265.8F), (-1.0F), (-1001.48F)); [EOL]       assertEquals((-1.0F), float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.replacePattern("", "", "org.apache.commons.lang3.ArrayUtils"); [EOL]        [EOL]       Integer[] integerArray0 = new Integer[9]; [EOL]       int int0 = 0; [EOL]       Integer integer0 = new Integer(0); [EOL]       assertTrue(integer0.equals((Object)int0)); [EOL]        [EOL]       integerArray0[0] = integer0; [EOL]       Integer integer1 = new Integer(int0); [EOL]       assertTrue(integer1.equals((Object)integer0)); [EOL]       assertTrue(integer1.equals((Object)int0)); [EOL]        [EOL]       integerArray0[1] = integer1; [EOL]       Integer integer2 = new Integer(int0); [EOL]       assertTrue(integer2.equals((Object)int0)); [EOL]       assertTrue(integer2.equals((Object)integer0)); [EOL]       assertTrue(integer2.equals((Object)integer1)); [EOL]        [EOL]       integerArray0[2] = integer2; [EOL]       int int1 = 127; [EOL]       Integer integer3 = new Integer(127); [EOL]       assertFalse(integer3.equals((Object)integer0)); [EOL]       assertTrue(integer3.equals((Object)int1)); [EOL]       assertFalse(integer3.equals((Object)integer2)); [EOL]       assertFalse(integer3.equals((Object)integer1)); [EOL]       assertFalse(integer3.equals((Object)int0)); [EOL]        [EOL]       integerArray0[3] = integer3; [EOL]       Integer integer4 = new Integer(int1); [EOL]       assertFalse(integer4.equals((Object)integer1)); [EOL]       assertFalse(integer4.equals((Object)integer0)); [EOL]       assertTrue(integer4.equals((Object)integer3)); [EOL]       assertFalse(integer4.equals((Object)integer2)); [EOL]       assertFalse(integer4.equals((Object)int0)); [EOL]       assertTrue(integer4.equals((Object)int1)); [EOL]        [EOL]       integerArray0[4] = integer4; [EOL]       Integer integer5 = new Integer(int1); [EOL]       assertFalse(integer5.equals((Object)integer1)); [EOL]       assertTrue(integer5.equals((Object)integer4)); [EOL]       assertFalse(integer5.equals((Object)integer0)); [EOL]       assertTrue(integer5.equals((Object)int1)); [EOL]       assertFalse(integer5.equals((Object)int0)); [EOL]       assertFalse(integer5.equals((Object)integer2)); [EOL]       assertTrue(integer5.equals((Object)integer3)); [EOL]        [EOL]       integerArray0[5] = integer5; [EOL]       Integer integer6 = new Integer(0); [EOL]       assertFalse(integer6.equals((Object)integer4)); [EOL]       assertFalse(integer6.equals((Object)int1)); [EOL]       assertTrue(integer6.equals((Object)integer1)); [EOL]       assertFalse(integer6.equals((Object)integer3)); [EOL]       assertTrue(integer6.equals((Object)int0)); [EOL]       assertTrue(integer6.equals((Object)integer2)); [EOL]       assertFalse(integer6.equals((Object)integer5)); [EOL]       assertTrue(integer6.equals((Object)integer0)); [EOL]        [EOL]       integerArray0[6] = integer6; [EOL]       Integer integer7 = new Integer((-1220)); [EOL]       assertFalse(integer7.equals((Object)integer4)); [EOL]       assertFalse(integer7.equals((Object)int1)); [EOL]       assertFalse(integer7.equals((Object)int0)); [EOL]       assertFalse(integer7.equals((Object)integer6)); [EOL]       assertFalse(integer7.equals((Object)integer2)); [EOL]       assertFalse(integer7.equals((Object)integer1)); [EOL]       assertFalse(integer7.equals((Object)integer5)); [EOL]       assertFalse(integer7.equals((Object)integer0)); [EOL]       assertFalse(integer7.equals((Object)integer3)); [EOL]        [EOL]       integerArray0[7] = integer7; [EOL]       Integer integer8 = new Integer(16); [EOL]       assertFalse(integer8.equals((Object)integer3)); [EOL]       assertFalse(integer8.equals((Object)integer7)); [EOL]       assertFalse(integer8.equals((Object)integer5)); [EOL]       assertFalse(integer8.equals((Object)integer1)); [EOL]       assertFalse(integer8.equals((Object)integer4)); [EOL]       assertFalse(integer8.equals((Object)integer2)); [EOL]       assertFalse(integer8.equals((Object)integer6)); [EOL]       assertFalse(integer8.equals((Object)int0)); [EOL]       assertFalse(integer8.equals((Object)integer0)); [EOL]       assertFalse(integer8.equals((Object)int1)); [EOL]        [EOL]       integerArray0[8] = integer8; [EOL]       String string1 = StringUtils.join(integerArray0); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsIgnoreCase("", "0001271271270-122016"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadjustYear()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("\"NaI"); [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("<#", timeZone0, locale0); [EOL]       int int0 = fastDateParser0.adjustYear(2167); [EOL]       assertEquals(4067, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllLowerCase(""); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       boolean boolean2 = StringUtils.isWhitespace("T"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "T", 0); [EOL]        [EOL]       boolean boolean3 = StringUtils.containsNone((CharSequence) "T", "{FakYXNQUOHZ"); [EOL]        [EOL]       boolean boolean4 = StringUtils.contains((CharSequence) "", 0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       IDKey iDKey0 = new IDKey("xNm2VMx&()xcv t@{"); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) null, (Object) iDKey0); [EOL]       IDKey iDKey1 = new IDKey((Object) null); [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       EqualsBuilder.reflectionEquals((Object) "I", (Object) iDKey1, (Collection<String>) linkedList0); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[0] = (-1L); [EOL]       longArray0[1] = 0L; [EOL]       longArray0[2] = (-128L); [EOL]       longArray0[3] = 0L; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray0); [EOL]       double[] doubleArray0 = new double[0]; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder1.append(doubleArray0, doubleArray0); [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) (-128L), (-2440.566416299249)); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder2.append(longArray0, longArray0); [EOL]       equalsBuilder1.reset(); [EOL]       EqualsBuilder equalsBuilder7 = equalsBuilder6.append('2', ','); [EOL]       equalsBuilder5.reset(); [EOL]       Object object0 = new Object(); [EOL]       EqualsBuilder.register(equalsBuilder7, object0); [EOL]       equalsBuilder0.append(561.19965F, (float) (-1L)); [EOL]       EqualsBuilder equalsBuilder8 = equalsBuilder1.append((byte) (-88), (byte) (-125)); [EOL]       assertSame(equalsBuilder8, equalsBuilder5); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST_SHORT()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST_SHORT(0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)123, (byte)123); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Range<String> range0 = Range.is(""); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(4004).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator0); [EOL]       boolean boolean0 = range1.isOverlappedBy((Range<Object>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Float float0 = new Float(0.0); [EOL]       MutableDouble mutableDouble0 = new MutableDouble((Number) float0); [EOL]       float float1 = mutableDouble0.floatValue(); [EOL]       assertEquals(0.0F, float1, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.decrement(); [EOL]       int int0 = mutableLong0.intValue(); [EOL]       assertEquals((-1L), mutableLong0.longValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       String string0 = "A"; [EOL]       String string1 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer"; [EOL]       int int0 = 34; [EOL]       boolean boolean0 = false; [EOL]       StrBuilder strBuilder1 = new StrBuilder("A"); [EOL]       assertEquals(33, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(33, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(33, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       char char0 = strBuilder3.charAt(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(33, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.append((CharSequence) strBuilder2, 34, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststop()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       long long0 = stopWatch0.getNanoTime(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(641); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, (-1032)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]       assertTrue(list0.isEmpty()); [EOL]        [EOL]       int int0 = 0; [EOL]       int int1 = strBuilder0.validateRange(0, 0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(1, ""); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       ImmutablePair<String, Object> immutablePair0 = ImmutablePair.of((String) null, (Object) null); [EOL]       Object object0 = immutablePair0.getRight(); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "nCIF=^XRVL:\t%AH&"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder2.append((CharSequence) stringBuilder0, 2, 2); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder1.lastIndexOf('^'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder4.insert((int) '#', false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder9.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '$'; [EOL]       StrBuilder strBuilder10 = strBuilder7.append('^'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]       assertNull(strBuilder10.getNewLineText()); [EOL]        [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher(']'); [EOL]        [EOL]       boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder11 = strBuilder3.deleteCharAt(2); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder11.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder12 = strBuilder11.replaceFirst((StrMatcher) strMatcher_CharSetMatcher0, "j"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder11.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder12.getNewLineText()); [EOL]        [EOL]       char[] charArray1 = strBuilder7.toCharArray(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       short[] shortArray0 = new short[2]; [EOL]       short short0 = NumberUtils.max(shortArray0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("*"); [EOL]        [EOL]       int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_StringMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) strMatcher_StringMatcher0, "*"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.setNullText("s<RCun|E"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = strBuilder1.asTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write("*"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectEndText(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       short[] shortArray0 = new short[3]; [EOL]       short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0); [EOL]       assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(0.0F); [EOL]       int int0 = mutableFloat0.compareTo(mutableFloat0); [EOL]       assertEquals(0.0, mutableFloat0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(0L); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '5'; [EOL]       charArray0[1] = '^'; [EOL]       charArray0[2] = '['; [EOL]       charArray0[3] = 'B'; [EOL]       charArray0[4] = 'a'; [EOL]       charArray0[5] = 'E'; [EOL]       charArray0[6] = 'x'; [EOL]       charArray0[7] = 'f'; [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append(charArray0, 4, 4); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder0.append((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(stringBuilder2); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.replace((StrMatcher) strMatcher_TrimMatcher0, ">sKz5kRWT,j2qId$ ", 114, 0, (-1345)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       int int0 = (-1775); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.substring((-1775)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1775 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setArraySeparator((String) null); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoShort()  throws Throwable  { [EOL]       Double double0 = new Double(0.0); [EOL]       MutableShort mutableShort0 = new MutableShort(double0); [EOL]       mutableShort0.add((short) (-445)); [EOL]       mutableShort0.getValue(); [EOL]       assertEquals((short) (-445), (short)mutableShort0.toShort()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)123, (byte)123); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("AEhzPmLst|m|:e7J{Z"); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendFieldSeparator(stringBuffer0); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisTrue()  throws Throwable  { [EOL]       Boolean boolean0 = new Boolean(true); [EOL]       boolean boolean1 = BooleanUtils.isTrue(boolean0); [EOL]       assertTrue(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-4387)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       LinkedHashSet<StrBuilder> linkedHashSet0 = new LinkedHashSet<StrBuilder>(); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = linkedHashSet0.add(strBuilder0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertFalse(linkedHashSet0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) linkedHashSet0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(linkedHashSet0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.ensureCapacity((-4387)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendPadding((-764), 'x'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(linkedHashSet0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("v"); [EOL]       assertEquals(33, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = 169; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator("v", 169); [EOL]       assertEquals(33, strBuilder0.capacity()); [EOL]       assertEquals(33, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'O'; [EOL]       char char0 = '+'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars(554, (-1433), charArray0, 554); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1433 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetAccessibleConstructor()  throws Throwable  { [EOL]       Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1); [EOL]       Class<Object> class0 = Object.class; [EOL]       Constructor<Object> constructor0 = ConstructorUtils.getAccessibleConstructor(class0, (Class<?>[]) classArray0); [EOL]       assertNull(constructor0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.subtract(563L); [EOL]       float float0 = mutableLong0.floatValue(); [EOL]       assertEquals((-563L), (long)mutableLong0.getValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtruncate()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       Date date0 = mockGregorianCalendar0.getGregorianChange(); [EOL]       boolean boolean0 = DateUtils.truncatedEquals(date0, date0, 5); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.minimizeCapacity(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append('U'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.setTrimmerMatcher(strMatcher_NoMatcher0); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder0.leftString(2026); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendFixedWidthPadRight((Object) strBuilder_StrBuilderTokenizer1, 2026, '('); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.insert(2026, 0.0F); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.append(0L); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       String string1 = strBuilder_StrBuilderTokenizer0.previousToken(); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.setCharAt(97, '+'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious(); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) "java.vendor.url"; [EOL]       objectArray0[1] = (Object) "U"; [EOL]       objectArray0[2] = (Object) strBuilder2; [EOL]       objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[4] = (Object) "U"; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer3 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       objectArray0[5] = (Object) strBuilder_StrBuilderTokenizer3; [EOL]       objectArray0[6] = (Object) strBuilder_StrBuilderTokenizer0; [EOL]       StrBuilder strBuilder8 = strBuilder2.appendln("java.vendor.url", objectArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(" -~*ui'"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder8.appendln(stringBuffer0, (-1229), 2026); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "", byteArray0); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 9, '>'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteAll('F'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append('F'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder_StrBuilderTokenizer0.getContent(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.replaceFirst((String) null, (String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(9); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.appendPadding((-414), '='); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.append(">>>>>>>>>F"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       MutableTriple<String, Integer, String> mutableTriple0 = new MutableTriple<String, Integer, String>(); [EOL]       mutableTriple0.setLeft("wo?ME"); [EOL]       MutableTriple<Object, Object, Object> mutableTriple1 = new MutableTriple<Object, Object, Object>(); [EOL]       Integer integer0 = new Integer((-3184)); [EOL]       ImmutableTriple<Integer, Object, String> immutableTriple0 = ImmutableTriple.of(integer0, (Object) null, "wo?ME"); [EOL]       ImmutableTriple<Object, ImmutableTriple<Integer, Object, String>, Triple<Object, Object, Object>> immutableTriple1 = new ImmutableTriple<Object, ImmutableTriple<Integer, Object, String>, Triple<Object, Object, Object>>("wo?ME", immutableTriple0, mutableTriple1); [EOL]       boolean boolean0 = immutableTriple1.equals(mutableTriple0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       String string0 = "htoXU5/8-3A+"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("htoXU5/8-3A+"); [EOL]       assertEquals(12, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.reverse(); [EOL]       assertEquals(12, strBuilder0.size()); [EOL]       assertEquals(12, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]       assertEquals(12, strBuilder0.size()); [EOL]        [EOL]       char char0 = 'X'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln('X'); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder1.size()); [EOL]       assertEquals(14, strBuilder2.size()); [EOL]        [EOL]       int int0 = 8; [EOL]       StrBuilder strBuilder3 = strBuilder1.setLength(8); [EOL]       assertEquals(8, strBuilder0.size()); [EOL]       assertEquals(8, strBuilder1.size()); [EOL]       assertEquals(8, strBuilder3.size()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertEquals(8, strBuilder0.size()); [EOL]       assertEquals(8, strBuilder1.size()); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(8); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(8, strBuilder0.size()); [EOL]       assertEquals(8, strBuilder1.size()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertEquals(8, strBuilder0.size()); [EOL]       assertEquals(8, strBuilder1.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(charArray0, 0, 3125); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid length: 3125 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseClassName(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('w'); [EOL]       char char0 = charRange0.getStart(); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "", byteArray0); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrMatcher strMatcher0 = StrMatcher.commaMatcher(); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0); [EOL]       assertTrue(strTokenizer1.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = (-4768); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-4768)); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       HashSet<StrBuilder> hashSet0 = new HashSet<StrBuilder>(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) hashSet0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = strBuilder1.asTokenizer(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft(0, 0, '0'); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder2.length()); [EOL]        [EOL]       strBuilder0.size = (-2104); [EOL]       assertEquals((-2104), strBuilder0.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'c'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars(1506, (-4768), charArray0, 1506); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -4768 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-730)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher(""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteFirst((StrMatcher) strMatcher_StringMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll("pD;m\"Wg[Mj"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]       assertTrue(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteFirst((StrMatcher) strMatcher_StringMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]       assertTrue(strBuilder4.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder0.capacity(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       String string1 = strBuilder3.leftString(32); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]       assertTrue(strBuilder3.isEmpty()); [EOL]        [EOL]       String string2 = "J%?^k/q>-%"; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher("J%?^k/q>-%"); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.deleteAll(strMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]       assertTrue(strBuilder3.isEmpty()); [EOL]       assertTrue(strBuilder5.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '&'; [EOL]       charArray0[1] = '\''; [EOL]       int int1 = 31; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert(9, charArray0, 31, (-730)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 9 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Class<Annotation> class0 = Annotation.class; [EOL]       Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("qw)\"0^d").when(annotation0).toString(); [EOL]       doReturn(class0, class0).when(annotation0).annotationType(); [EOL]       String string0 = AnnotationUtils.toString(annotation0); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[6]; [EOL]       double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcall()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("", "p!,").when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat("5"); [EOL]       MutableFloat mutableFloat1 = new MutableFloat(0.0F); [EOL]       int int0 = mutableFloat0.compareTo(mutableFloat1); [EOL]       assertEquals("0.0", mutableFloat1.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("j0P}1RiK|rR$~WS(r", '~'); [EOL]       assertEquals(2, stringArray0.length); [EOL]        [EOL]       String string0 = StringUtils.overlay("j0P}1RiK|rR$~WS(r", "~LE8_uX,F!-Ad", '~', '~'); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithAny("j0P}1RiK|rR$~WS(r~LE8_uX,F!-Ad", stringArray0); [EOL]       assertEquals(2, stringArray0.length); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "j0P}1RiK|rR$~WS(r"); [EOL]        [EOL]       String string1 = StringUtils.swapCase("g(J("); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "j0P}1RiK|rR$~WS(r", (CharSequence) "j0P}1RiK|rR$~WS(r~LE8_uX,F!-Ad"); [EOL]        [EOL]       String string2 = StringUtils.reverseDelimited("I(9i?$);w:N%", '0');w:N%", string2); [EOL]        [EOL]       String string3 = StringUtils.normalizeSpace("\n"); [EOL]        [EOL]       String string4 = StringUtils.prependIfMissingIgnoreCase("~LE8_uX,F!-Ad", " ", stringArray0); [EOL]       assertEquals(2, stringArray0.length); [EOL]        [EOL]       String string5 = StringUtils.mid("The Character must not be null", 10, (-1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("$W8BC)fVnoVM,sZ]"); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, "hJd3~IkyQU3Lzn0Z^Hs"); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapitalizeFully()  throws Throwable  { [EOL]       char[] charArray0 = new char[6]; [EOL]       String string0 = WordUtils.capitalizeFully((String) null, charArray0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1109)); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '-'; [EOL]       charArray0[1] = 'Z'; [EOL]       charArray0[2] = 'X'; [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0); [EOL]       assertEquals(3, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens(">D<O)oa1X?)"); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string2 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       int int2 = StringUtils.indexOfDifference((CharSequence) ">D<O)oa1X?)", (CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.mid((String) null, (-1), 0); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null); [EOL]        [EOL]       double[] doubleArray0 = new double[9]; [EOL]       doubleArray0[0] = 1864.84706; [EOL]       doubleArray0[1] = (double) (-1); [EOL]       doubleArray0[2] = (double) '-'; [EOL]       doubleArray0[3] = (double) (-1); [EOL]       doubleArray0[4] = (double) 'X'; [EOL]       doubleArray0[5] = 0.0; [EOL]       doubleArray0[6] = (double) 'X'; [EOL]       doubleArray0[7] = 0.0; [EOL]       doubleArray0[8] = (double) 'X'; [EOL]       String string4 = StringUtils.join(doubleArray0, 'o', 692, (-1)); [EOL]       assertEquals(9, doubleArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.stripToEmpty((String) null); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeStart("", "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank("", "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing("", (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator(string4, (String) null, (-1)); [EOL]       assertEquals(8, stringArray1.length); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference("", ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, ""); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[0] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]       assertEquals(8, shortArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0, (StringBuffer) null); [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append(booleanArray0); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendNewLine(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder3.equals((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       charArray0[0] = ':'; [EOL]       String string0 = strBuilder0.substring(0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       charArray0[1] = ')'; [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       int int2 = strBuilder2.indexOf("=.j", 1810); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendNull(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isIn('w', ')'); [EOL]       assertFalse(charRange0.isNegated()); [EOL]        [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       charRange0.forEach(consumer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionToString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       String string0 = ToStringBuilder.reflectionToString(object0, toStringStyle0, true); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContextLabels()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(""); [EOL]       contextedRuntimeException0.setContextValue("", (Object) null); [EOL]       Set<String> set0 = contextedRuntimeException0.getContextLabels(); [EOL]       assertEquals(1, set0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object object0 = new Object(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       compareToBuilder0.append((Object) null, object0, comparator0); [EOL]       char[] charArray0 = new char[9]; [EOL]       compareToBuilder0.append(charArray0, charArray0); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgenerateBitVector()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       LinkedHashSet<JavaVersion> linkedHashSet0 = new LinkedHashSet<JavaVersion>(); [EOL]       ArrayDeque<JavaVersion> arrayDeque0 = new ArrayDeque<JavaVersion>(linkedHashSet0); [EOL]       long long0 = EnumUtils.generateBitVector(class0, (Iterable<JavaVersion>) arrayDeque0); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaLower('a'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'P'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'P'; [EOL]       charArray0[1] = 'P'; [EOL]       charArray0[2] = 'P'; [EOL]       char[] charArray1 = strBuilder1.getChars(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.appendln(stringBuffer0, 619, 619); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       long[] longArray0 = new long[7]; [EOL]       long long0 = NumberUtils.max(longArray0); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendFieldStart(stringBuffer0, ""); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetContextValue()  throws Throwable  { [EOL]       DefaultExceptionContext defaultExceptionContext0 = new DefaultExceptionContext(); [EOL]       defaultExceptionContext0.setContextValue("Ex{ptio Conext:\"", defaultExceptionContext0); [EOL]       Object object0 = defaultExceptionContext0.getFirstContextValue("Ex{ptio Conext:\""); [EOL]       assertSame(defaultExceptionContext0, object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       char[] charArray0 = new char[8]; [EOL]       hashCodeBuilder0.append(charArray0); [EOL]       assertEquals((-779599631), hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0); [EOL]       reflectionToStringBuilder0.getUpToClass(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('{', '~'); [EOL]       CharRange charRange1 = CharRange.isNotIn('k', 'U'); [EOL]       boolean boolean0 = charRange0.contains(charRange1); [EOL]       assertTrue(charRange1.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(0L); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(); [EOL]       assertEquals("", stringBuilder0.toString()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '5'; [EOL]       charArray0[1] = '^'; [EOL]       charArray0[2] = '['; [EOL]       charArray0[3] = 'B'; [EOL]       charArray0[4] = 'a'; [EOL]       charArray0[5] = 'E'; [EOL]       charArray0[6] = 'x'; [EOL]       charArray0[7] = 'f'; [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append(charArray0, 4, 4); [EOL]       assertEquals("aExf", stringBuilder0.toString()); [EOL]       assertEquals("aExf", stringBuilder1.toString()); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder0.append((Object) strBuilder0); [EOL]       assertEquals("aExf0\n", stringBuilder0.toString()); [EOL]       assertEquals("aExf0\n", stringBuilder2.toString()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(stringBuilder2); [EOL]       assertEquals("aExf0\n", stringBuilder0.toString()); [EOL]       assertEquals("aExf0\n", stringBuilder2.toString()); [EOL]        [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.replace((StrMatcher) strMatcher_TrimMatcher0, ">sKz5kRWT,j2qId$ ", 114, 0, (-1345)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = (-4136); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-4136)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, (-4136)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((Object) "_D]5>#kw<b6p@SuO"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder1.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.replaceAll("", ""); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder2.midString((-4136), (-4136)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(true); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.substring((-730), 938); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -730 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((-5438)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(4240); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.insert(0, 1278.456F); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad((String) null, 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", (CharSequence) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse((String) null); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) null, charArray0); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[0] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]       assertEquals(8, shortArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststop()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       long long0 = stopWatch0.getStartTime(); [EOL]       assertEquals(1392409281320L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeHtml3()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeHtml3(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       doubleArray0[0] = (double) (short)4689; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1404.456956827277, (int) (short)4689, 1.5); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testextractCauseUnchecked()  throws Throwable  { [EOL]       MockError mockError0 = new MockError(); [EOL]       mockError0.getSuppressed(); [EOL]       MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0); [EOL]       MockError mockError1 = new MockError(); [EOL]       FileSystemHandling fileSystemHandling0 = new FileSystemHandling(); [EOL]       ExecutionException executionException0 = new ExecutionException(".Aux0`?&|!{Ttq", mockError1); [EOL]       ExecutionException executionException1 = new ExecutionException("org.apache.commons.lang3.concurrent.LazyInitializer", executionException0); [EOL]       ConcurrentUtils.extractCauseUnchecked(executionException1); [EOL]       MockError mockError2 = new MockError("org.apache.commons.lang3.concurrent.LazyInitializer"); [EOL]       ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError2); [EOL]       ConcurrentHashMap<Integer, String> concurrentHashMap0 = new ConcurrentHashMap<Integer, String>(); [EOL]       Integer integer0 = new Integer(0); [EOL]       String string0 = ConcurrentUtils.createIfAbsent((ConcurrentMap<Integer, String>) concurrentHashMap0, integer0, (ConcurrentInitializer<String>) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(101); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder[] strBuilderArray0 = new StrBuilder[7]; [EOL]       strBuilderArray0[0] = strBuilder0; [EOL]       strBuilderArray0[1] = strBuilder0; [EOL]       strBuilderArray0[2] = strBuilder0; [EOL]       strBuilderArray0[3] = strBuilder0; [EOL]       strBuilderArray0[4] = strBuilder0; [EOL]       strBuilderArray0[5] = strBuilder0; [EOL]       strBuilderArray0[6] = strBuilder0; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll(strBuilderArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.setNewLineText(""); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder0.capacity(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.close(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(true); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setUseIdentityHashCode(false); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln("rn$e:"); [EOL]        [EOL]       Vector<String> vector0 = new Vector<String>(); [EOL]       assertEquals("[]", vector0.toString()); [EOL]        [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(vector0); [EOL]       assertEquals("[]", vector0.toString()); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(linkedHashSet0); [EOL]       assertEquals("[]", vector0.toString()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll((Iterable<?>) treeSet0); [EOL]       assertEquals("[]", vector0.toString()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendSeparator("rn$e:", 1); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertEquals("rn$e:\nrn$e:", stringBuffer0.toString()); [EOL]        [EOL]       Integer[] integerArray0 = new Integer[5]; [EOL]       Integer integer0 = new Integer(1); [EOL]        [EOL]       integerArray0[0] = integer0; [EOL]       Integer integer1 = new Integer(862); [EOL]        [EOL]       integerArray0[1] = integer1; [EOL]       int int0 = 0; [EOL]       Integer integer2 = new Integer(0); [EOL]        [EOL]       integerArray0[2] = integer2; [EOL]       Integer integer3 = new Integer(862); [EOL]        [EOL]       integerArray0[3] = integer3; [EOL]       Integer integer4 = new Integer(int0); [EOL]        [EOL]       integerArray0[4] = integer4; [EOL]       StrBuilder strBuilder4 = strBuilder3.appendAll(integerArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = strBuilder0.length(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       CharRange charRange1 = CharRange.isNot('#'); [EOL]       boolean boolean0 = charRange1.contains(charRange0); [EOL]       assertTrue(charRange1.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[5]; [EOL]       String string0 = StringUtils.capitalize(""); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       String string1 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0); [EOL]       assertEquals(5, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '$'; [EOL]       charArray0[1] = 'B'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("Invalid startIndex: "); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf(strMatcher0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith(""); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(true); [EOL]       assertEquals(4, strBuilder0.length()); [EOL]       assertEquals(4, strBuilder1.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.deleteCharAt((-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0); [EOL]       assertEquals(6, booleanArray1.length); [EOL]   } [EOL]  [EOL]   
