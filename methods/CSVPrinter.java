public void println() throws IOException {	    out.append(format.getLineSeparator());	    newLine = true;	}
public void flush() throws IOException {	    if (out instanceof Flushable) {	        ((Flushable) out).flush();	    }	}
public void println(String... values) throws IOException {	    for (String value : values) {	        print(value);	    }	    println();	}
public void printComment(String comment) throws IOException {	    if (!format.isCommentingEnabled()) {	        return;	    }	    if (!newLine) {	        println();	    }	    out.append(format.getCommentStart());	    out.append(' ');	    for (int i = 0; i < comment.length(); i++) {	        char c = comment.charAt(i);	        switch(c) {	            case '\r':	                if (i + 1 < comment.length() && comment.charAt(i + 1) == '\n') {	                    i++;	                }	            case '\n':	                println();	                out.append(format.getCommentStart());	                out.append(' ');	                break;	            default:	                out.append(c);	                break;	        }	    }	    println();	}
private void print(CharSequence value, int offset, int len) throws IOException {	    if (format.isEncapsulating()) {	        printAndEncapsulate(value, offset, len);	    } else if (format.isEscaping()) {	        printAndEscape(value, offset, len);	    } else {	        printSep();	        out.append(value, offset, offset + len);	    }	}
void printSep() throws IOException {	    if (newLine) {	        newLine = false;	    } else {	        out.append(format.getDelimiter());	    }	}
void printAndEscape(CharSequence value, int offset, int len) throws IOException {	    int start = offset;	    int pos = offset;	    int end = offset + len;	    printSep();	    char delim = format.getDelimiter();	    char escape = format.getEscape();	    while (pos < end) {	        char c = value.charAt(pos);	        if (c == '\r' || c == '\n' || c == delim || c == escape) {	            if (pos > start) {	                out.append(value, start, pos);	            }	            if (c == '\n') {	                c = 'n';	            } else if (c == '\r') {	                c = 'r';	            }	            out.append(escape);	            out.append(c);	            start = pos + 1;	        }	        pos++;	    }	    if (pos > start) {	        out.append(value, start, pos);	    }	}
void printAndEncapsulate(CharSequence value, int offset, int len) throws IOException {	    boolean first = newLine;	    boolean quote = false;	    int start = offset;	    int pos = offset;	    int end = offset + len;	    printSep();	    char delim = format.getDelimiter();	    char encapsulator = format.getEncapsulator();	    if (len <= 0) {	        if (first) {	            quote = true;	        }	    } else {	        char c = value.charAt(pos);	        if (first && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {	            quote = true;	        } else if (c <= '#') {	            quote = true;	        } else {	            while (pos < end) {	                c = value.charAt(pos);	                if (c == '\n' || c == '\r' || c == encapsulator || c == delim) {	                    quote = true;	                    break;	                }	                pos++;	            }	            if (!quote) {	                pos = end - 1;	                c = value.charAt(pos);	                if (c <= ' ') {	                    quote = true;	                }	            }	        }	    }	    if (!quote) {	        out.append(value, start, end);	        return;	    }	    out.append(encapsulator);	    while (pos < end) {	        char c = value.charAt(pos);	        if (c == encapsulator) {	            out.append(value, start, pos + 1);	            start = pos;	        }	        pos++;	    }	    out.append(value, start, pos);	    out.append(encapsulator);	}
public void print(String value, boolean checkForEscape) throws IOException {	    if (value == null) {	        value = "";	    }	    if (!checkForEscape) {	        printSep();	        out.append(value);	    } else {	        print(value, 0, value.length());	    }	}
public void print(String value) throws IOException {	    print(value, true);	}
