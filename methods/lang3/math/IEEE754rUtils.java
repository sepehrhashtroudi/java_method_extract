public static double min(final double[] array) { [EOL]     if (array == null) { [EOL]         throw new IllegalArgumentException("The Array must not be null"); [EOL]     } else if (array.length == 0) { [EOL]         throw new IllegalArgumentException("Array cannot be empty."); [EOL]     } [EOL]     double min = array[0]; [EOL]     for (int i = 1; i < array.length; i++) { [EOL]         min = min(array[i], min); [EOL]     } [EOL]     return min; [EOL] }
public static float min(final float[] array) { [EOL]     if (array == null) { [EOL]         throw new IllegalArgumentException("The Array must not be null"); [EOL]     } else if (array.length == 0) { [EOL]         throw new IllegalArgumentException("Array cannot be empty."); [EOL]     } [EOL]     float min = array[0]; [EOL]     for (int i = 1; i < array.length; i++) { [EOL]         min = min(array[i], min); [EOL]     } [EOL]     return min; [EOL] }
public static double min(final double a, final double b, final double c) { [EOL]     return min(min(a, b), c); [EOL] }
public static double min(final double a, final double b) { [EOL]     if (Double.isNaN(a)) { [EOL]         return b; [EOL]     } else if (Double.isNaN(b)) { [EOL]         return a; [EOL]     } else { [EOL]         return Math.min(a, b); [EOL]     } [EOL] }
public static float min(final float a, final float b, final float c) { [EOL]     return min(min(a, b), c); [EOL] }
public static float min(final float a, final float b) { [EOL]     if (Float.isNaN(a)) { [EOL]         return b; [EOL]     } else if (Float.isNaN(b)) { [EOL]         return a; [EOL]     } else { [EOL]         return Math.min(a, b); [EOL]     } [EOL] }
public static double max(final double[] array) { [EOL]     if (array == null) { [EOL]         throw new IllegalArgumentException("The Array must not be null"); [EOL]     } else if (array.length == 0) { [EOL]         throw new IllegalArgumentException("Array cannot be empty."); [EOL]     } [EOL]     double max = array[0]; [EOL]     for (int j = 1; j < array.length; j++) { [EOL]         max = max(array[j], max); [EOL]     } [EOL]     return max; [EOL] }
public static float max(final float[] array) { [EOL]     if (array == null) { [EOL]         throw new IllegalArgumentException("The Array must not be null"); [EOL]     } else if (array.length == 0) { [EOL]         throw new IllegalArgumentException("Array cannot be empty."); [EOL]     } [EOL]     float max = array[0]; [EOL]     for (int j = 1; j < array.length; j++) { [EOL]         max = max(array[j], max); [EOL]     } [EOL]     return max; [EOL] }
public static double max(final double a, final double b, final double c) { [EOL]     return max(max(a, b), c); [EOL] }
public static double max(final double a, final double b) { [EOL]     if (Double.isNaN(a)) { [EOL]         return b; [EOL]     } else if (Double.isNaN(b)) { [EOL]         return a; [EOL]     } else { [EOL]         return Math.max(a, b); [EOL]     } [EOL] }
public static float max(final float a, final float b, final float c) { [EOL]     return max(max(a, b), c); [EOL] }
public static float max(final float a, final float b) { [EOL]     if (Float.isNaN(a)) { [EOL]         return b; [EOL]     } else if (Float.isNaN(b)) { [EOL]         return a; [EOL]     } else { [EOL]         return Math.max(a, b); [EOL]     } [EOL] }
