public static String wrap(final String str, final int wrapLength) { [EOL]     return wrap(str, wrapLength, null, false); [EOL] } <line_num>: 66
public static String wrap(final String str, int wrapLength, String newLineStr, final boolean wrapLongWords) { [EOL]     if (str == null) { [EOL]         return null; [EOL]     } [EOL]     if (newLineStr == null) { [EOL]         newLineStr = SystemUtils.LINE_SEPARATOR; [EOL]     } [EOL]     if (wrapLength < 1) { [EOL]         wrapLength = 1; [EOL]     } [EOL]     final int inputLineLength = str.length(); [EOL]     int offset = 0; [EOL]     final StringBuilder wrappedLine = new StringBuilder(inputLineLength + 32); [EOL]     while (inputLineLength - offset > wrapLength) { [EOL]         if (str.charAt(offset) == ' ') { [EOL]             offset++; [EOL]             continue; [EOL]         } [EOL]         int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset); [EOL]         if (spaceToWrapAt >= offset) { [EOL]             wrappedLine.append(str.substring(offset, spaceToWrapAt)); [EOL]             wrappedLine.append(newLineStr); [EOL]             offset = spaceToWrapAt + 1; [EOL]         } else { [EOL]             if (wrapLongWords) { [EOL]                 wrappedLine.append(str.substring(offset, wrapLength + offset)); [EOL]                 wrappedLine.append(newLineStr); [EOL]                 offset += wrapLength; [EOL]             } else { [EOL]                 spaceToWrapAt = str.indexOf(' ', wrapLength + offset); [EOL]                 if (spaceToWrapAt >= 0) { [EOL]                     wrappedLine.append(str.substring(offset, spaceToWrapAt)); [EOL]                     wrappedLine.append(newLineStr); [EOL]                     offset = spaceToWrapAt + 1; [EOL]                 } else { [EOL]                     wrappedLine.append(str.substring(offset)); [EOL]                     offset = inputLineLength; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     wrappedLine.append(str.substring(offset)); [EOL]     return wrappedLine.toString(); [EOL] } <line_num>: 88
public static String capitalize(final String str) { [EOL]     return capitalize(str, null); [EOL] } <line_num>: 167
public static String capitalize(final String str, final char... delimiters) { [EOL]     final int delimLen = delimiters == null ? -1 : delimiters.length; [EOL]     if (StringUtils.isEmpty(str) || delimLen == 0) { [EOL]         return str; [EOL]     } [EOL]     final char[] buffer = str.toCharArray(); [EOL]     boolean capitalizeNext = true; [EOL]     for (int i = 0; i < buffer.length; i++) { [EOL]         final char ch = buffer[i]; [EOL]         if (isDelimiter(ch, delimiters)) { [EOL]             capitalizeNext = true; [EOL]         } else if (capitalizeNext) { [EOL]             buffer[i] = Character.toTitleCase(ch); [EOL]             capitalizeNext = false; [EOL]         } [EOL]     } [EOL]     return new String(buffer); [EOL] } <line_num>: 200
public static String capitalizeFully(final String str) { [EOL]     return capitalizeFully(str, null); [EOL] } <line_num>: 239
public static String capitalizeFully(String str, final char... delimiters) { [EOL]     final int delimLen = delimiters == null ? -1 : delimiters.length; [EOL]     if (StringUtils.isEmpty(str) || delimLen == 0) { [EOL]         return str; [EOL]     } [EOL]     str = str.toLowerCase(); [EOL]     return capitalize(str, delimiters); [EOL] } <line_num>: 269
public static String uncapitalize(final String str) { [EOL]     return uncapitalize(str, null); [EOL] } <line_num>: 296
public static String uncapitalize(final String str, final char... delimiters) { [EOL]     final int delimLen = delimiters == null ? -1 : delimiters.length; [EOL]     if (StringUtils.isEmpty(str) || delimLen == 0) { [EOL]         return str; [EOL]     } [EOL]     final char[] buffer = str.toCharArray(); [EOL]     boolean uncapitalizeNext = true; [EOL]     for (int i = 0; i < buffer.length; i++) { [EOL]         final char ch = buffer[i]; [EOL]         if (isDelimiter(ch, delimiters)) { [EOL]             uncapitalizeNext = true; [EOL]         } else if (uncapitalizeNext) { [EOL]             buffer[i] = Character.toLowerCase(ch); [EOL]             uncapitalizeNext = false; [EOL]         } [EOL]     } [EOL]     return new String(buffer); [EOL] } <line_num>: 325
public static String swapCase(final String str) { [EOL]     if (StringUtils.isEmpty(str)) { [EOL]         return str; [EOL]     } [EOL]     final char[] buffer = str.toCharArray(); [EOL]     boolean whitespace = true; [EOL]     for (int i = 0; i < buffer.length; i++) { [EOL]         final char ch = buffer[i]; [EOL]         if (Character.isUpperCase(ch)) { [EOL]             buffer[i] = Character.toLowerCase(ch); [EOL]             whitespace = false; [EOL]         } else if (Character.isTitleCase(ch)) { [EOL]             buffer[i] = Character.toLowerCase(ch); [EOL]             whitespace = false; [EOL]         } else if (Character.isLowerCase(ch)) { [EOL]             if (whitespace) { [EOL]                 buffer[i] = Character.toTitleCase(ch); [EOL]                 whitespace = false; [EOL]             } else { [EOL]                 buffer[i] = Character.toUpperCase(ch); [EOL]             } [EOL]         } else { [EOL]             whitespace = Character.isWhitespace(ch); [EOL]         } [EOL]     } [EOL]     return new String(buffer); [EOL] } <line_num>: 367
public static String initials(final String str) { [EOL]     return initials(str, null); [EOL] } <line_num>: 420
public static String initials(final String str, final char... delimiters) { [EOL]     if (StringUtils.isEmpty(str)) { [EOL]         return str; [EOL]     } [EOL]     if (delimiters != null && delimiters.length == 0) { [EOL]         return ""; [EOL]     } [EOL]     final int strLen = str.length(); [EOL]     final char[] buf = new char[strLen / 2 + 1]; [EOL]     int count = 0; [EOL]     boolean lastWasGap = true; [EOL]     for (int i = 0; i < strLen; i++) { [EOL]         final char ch = str.charAt(i); [EOL]         if (isDelimiter(ch, delimiters)) { [EOL]             lastWasGap = true; [EOL]         } else if (lastWasGap) { [EOL]             buf[count++] = ch; [EOL]             lastWasGap = false; [EOL]         } else { [EOL]             continue; [EOL]         } [EOL]     } [EOL]     return new String(buf, 0, count); [EOL] } <line_num>: 451
private static boolean isDelimiter(final char ch, final char[] delimiters) { [EOL]     if (delimiters == null) { [EOL]         return Character.isWhitespace(ch); [EOL]     } [EOL]     for (final char delimiter : delimiters) { [EOL]         if (ch == delimiter) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 485
