public static UnicodeEscaper below(final int codepoint) { [EOL]     return outsideOf(codepoint, Integer.MAX_VALUE); [EOL] }
public static UnicodeEscaper above(final int codepoint) { [EOL]     return outsideOf(0, codepoint); [EOL] }
public static UnicodeEscaper outsideOf(final int codepointLow, final int codepointHigh) { [EOL]     return new UnicodeEscaper(codepointLow, codepointHigh, false); [EOL] }
public static UnicodeEscaper between(final int codepointLow, final int codepointHigh) { [EOL]     return new UnicodeEscaper(codepointLow, codepointHigh, true); [EOL] }
@Override [EOL] public boolean translate(final int codepoint, final Writer out) throws IOException { [EOL]     if (between) { [EOL]         if (codepoint < below || codepoint > above) { [EOL]             return false; [EOL]         } [EOL]     } else { [EOL]         if (codepoint >= below && codepoint <= above) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     if (codepoint > 0xffff) { [EOL]         out.write(toUtf16Escape(codepoint)); [EOL]     } else if (codepoint > 0xfff) { [EOL]         out.write("\\u" + hex(codepoint)); [EOL]     } else if (codepoint > 0xff) { [EOL]         out.write("\\u0" + hex(codepoint)); [EOL]     } else if (codepoint > 0xf) { [EOL]         out.write("\\u00" + hex(codepoint)); [EOL]     } else { [EOL]         out.write("\\u000" + hex(codepoint)); [EOL]     } [EOL]     return true; [EOL] }
protected String toUtf16Escape(final int codepoint) { [EOL]     return "\\u" + hex(codepoint); [EOL] }
