public static CharSequence subSequence(final CharSequence cs, final int start) { [EOL]     return cs == null ? null : cs.subSequence(start, cs.length()); [EOL] }
static int indexOf(final CharSequence cs, final int searchChar, int start) { [EOL]     if (cs instanceof String) { [EOL]         return ((String) cs).indexOf(searchChar, start); [EOL]     } else { [EOL]         final int sz = cs.length(); [EOL]         if (start < 0) { [EOL]             start = 0; [EOL]         } [EOL]         for (int i = start; i < sz; i++) { [EOL]             if (cs.charAt(i) == searchChar) { [EOL]                 return i; [EOL]             } [EOL]         } [EOL]         return -1; [EOL]     } [EOL] }
static int indexOf(final CharSequence cs, final CharSequence searchChar, final int start) { [EOL]     return cs.toString().indexOf(searchChar.toString(), start); [EOL] }
static int lastIndexOf(final CharSequence cs, final int searchChar, int start) { [EOL]     if (cs instanceof String) { [EOL]         return ((String) cs).lastIndexOf(searchChar, start); [EOL]     } else { [EOL]         final int sz = cs.length(); [EOL]         if (start < 0) { [EOL]             return -1; [EOL]         } [EOL]         if (start >= sz) { [EOL]             start = sz - 1; [EOL]         } [EOL]         for (int i = start; i >= 0; --i) { [EOL]             if (cs.charAt(i) == searchChar) { [EOL]                 return i; [EOL]             } [EOL]         } [EOL]         return -1; [EOL]     } [EOL] }
static int lastIndexOf(final CharSequence cs, final CharSequence searchChar, final int start) { [EOL]     return cs.toString().lastIndexOf(searchChar.toString(), start); [EOL] }
static char[] toCharArray(final CharSequence cs) { [EOL]     if (cs instanceof String) { [EOL]         return ((String) cs).toCharArray(); [EOL]     } else { [EOL]         final int sz = cs.length(); [EOL]         final char[] array = new char[cs.length()]; [EOL]         for (int i = 0; i < sz; i++) { [EOL]             array[i] = cs.charAt(i); [EOL]         } [EOL]         return array; [EOL]     } [EOL] }
static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) { [EOL]     if (cs instanceof String && substring instanceof String) { [EOL]         return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length); [EOL]     } else { [EOL]         int index1 = thisStart; [EOL]         int index2 = start; [EOL]         int tmpLen = length; [EOL]         while (tmpLen-- > 0) { [EOL]             char c1 = cs.charAt(index1++); [EOL]             char c2 = substring.charAt(index2++); [EOL]             if (c1 == c2) { [EOL]                 continue; [EOL]             } [EOL]             if (!ignoreCase) { [EOL]                 return false; [EOL]             } [EOL]             if (Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]         return true; [EOL]     } [EOL] }
