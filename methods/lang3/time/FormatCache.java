public F getInstance() { [EOL]     return getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, TimeZone.getDefault(), Locale.getDefault()); [EOL] } <line_num>: 53
public F getInstance(final String pattern, TimeZone timeZone, Locale locale) { [EOL]     if (pattern == null) { [EOL]         throw new NullPointerException("pattern must not be null"); [EOL]     } [EOL]     if (timeZone == null) { [EOL]         timeZone = TimeZone.getDefault(); [EOL]     } [EOL]     if (locale == null) { [EOL]         locale = Locale.getDefault(); [EOL]     } [EOL]     final MultipartKey key = new MultipartKey(pattern, timeZone, locale); [EOL]     F format = cInstanceCache.get(key); [EOL]     if (format == null) { [EOL]         format = createInstance(pattern, timeZone, locale); [EOL]         final F previousValue = cInstanceCache.putIfAbsent(key, format); [EOL]         if (previousValue != null) { [EOL]             format = previousValue; [EOL]         } [EOL]     } [EOL]     return format; [EOL] } <line_num>: 69
abstract protected F createInstance(String pattern, TimeZone timeZone, Locale locale); <line_num>: 104
private F getDateTimeInstance(final Integer dateStyle, final Integer timeStyle, final TimeZone timeZone, Locale locale) { [EOL]     if (locale == null) { [EOL]         locale = Locale.getDefault(); [EOL]     } [EOL]     final String pattern = getPatternForStyle(dateStyle, timeStyle, locale); [EOL]     return getInstance(pattern, timeZone, locale); [EOL] } <line_num>: 120
F getDateTimeInstance(final int dateStyle, final int timeStyle, final TimeZone timeZone, Locale locale) { [EOL]     return getDateTimeInstance(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle), timeZone, locale); [EOL] } <line_num>: 142
F getDateInstance(final int dateStyle, final TimeZone timeZone, Locale locale) { [EOL]     return getDateTimeInstance(Integer.valueOf(dateStyle), null, timeZone, locale); [EOL] } <line_num>: 159
F getTimeInstance(final int timeStyle, final TimeZone timeZone, Locale locale) { [EOL]     return getDateTimeInstance(null, Integer.valueOf(timeStyle), timeZone, locale); [EOL] } <line_num>: 177
static String getPatternForStyle(final Integer dateStyle, final Integer timeStyle, final Locale locale) { [EOL]     final MultipartKey key = new MultipartKey(dateStyle, timeStyle, locale); [EOL]     String pattern = cDateTimeInstanceCache.get(key); [EOL]     if (pattern == null) { [EOL]         try { [EOL]             DateFormat formatter; [EOL]             if (dateStyle == null) { [EOL]                 formatter = DateFormat.getTimeInstance(timeStyle.intValue(), locale); [EOL]             } else if (timeStyle == null) { [EOL]                 formatter = DateFormat.getDateInstance(dateStyle.intValue(), locale); [EOL]             } else { [EOL]                 formatter = DateFormat.getDateTimeInstance(dateStyle.intValue(), timeStyle.intValue(), locale); [EOL]             } [EOL]             pattern = ((SimpleDateFormat) formatter).toPattern(); [EOL]             final String previous = cDateTimeInstanceCache.putIfAbsent(key, pattern); [EOL]             if (previous != null) { [EOL]                 pattern = previous; [EOL]             } [EOL]         } catch (final ClassCastException ex) { [EOL]             throw new IllegalArgumentException("No date time pattern for locale: " + locale); [EOL]         } [EOL]     } [EOL]     return pattern; [EOL] } <line_num>: 191
@Override [EOL] public boolean equals(final Object obj) { [EOL]     return Arrays.equals(keys, ((MultipartKey) obj).keys); [EOL] } <line_num>: 242
@Override [EOL] public int hashCode() { [EOL]     if (hashCode == 0) { [EOL]         int rc = 0; [EOL]         for (final Object key : keys) { [EOL]             if (key != null) { [EOL]                 rc = rc * 7 + key.hashCode(); [EOL]             } [EOL]         } [EOL]         hashCode = rc; [EOL]     } [EOL]     return hashCode; [EOL] } <line_num>: 253
