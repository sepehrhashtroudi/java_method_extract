public static void writeDeclaredField(final Object target, final String fieldName, final Object value, final boolean forceAccess) throws IllegalAccessException {	    if (target == null) {	        throw new IllegalArgumentException("target object must not be null");	    }	    final Class<?> cls = target.getClass();	    final Field field = getDeclaredField(cls, fieldName, forceAccess);	    if (field == null) {	        throw new IllegalArgumentException("Cannot locate declared field " + cls.getName() + "." + fieldName);	    }	    writeField(field, target, value);	}
public Fraction multiplyBy(final Fraction fraction) {	    if (fraction == null) {	        throw new IllegalArgumentException("The fraction must not be null");	    }	    if (numerator == 0 || fraction.numerator == 0) {	        return ZERO;	    }	    final int d1 = greatestCommonDivisor(numerator, fraction.denominator);	    final int d2 = greatestCommonDivisor(fraction.numerator, denominator);	    return getReducedFraction(mulAndCheck(numerator / d1, fraction.numerator / d2), mulPosAndCheck(denominator / d2, fraction.denominator / d1));	}
@Override	public boolean equals(final Object obj) {	    return obj instanceof MutableFloat && Float.floatToIntBits(((MutableFloat) obj).value) == Float.floatToIntBits(value);	}
public static Date round(final Object date, final int field) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    if (date instanceof Date) {	        return round((Date) date, field);	    } else if (date instanceof Calendar) {	        return round((Calendar) date, field).getTime();	    } else {	        throw new ClassCastException("Could not round " + date);	    }	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
public static String formatPeriod(final long startMillis, final long endMillis, final String format, final boolean padWithZeros, final TimeZone timezone) {	    final Token[] tokens = lexx(format);	    final Calendar start = Calendar.getInstance(timezone);	    start.setTime(new Date(startMillis));	    final Calendar end = Calendar.getInstance(timezone);	    end.setTime(new Date(endMillis));	    int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);	    int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);	    int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);	    int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);	    int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);	    int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);	    int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);	    while (milliseconds < 0) {	        milliseconds += 1000;	        seconds -= 1;	    }	    while (seconds < 0) {	        seconds += 60;	        minutes -= 1;	    }	    while (minutes < 0) {	        minutes += 60;	        hours -= 1;	    }	    while (hours < 0) {	        hours += 24;	        days -= 1;	    }	    if (Token.containsTokenWithValue(tokens, M)) {	        while (days < 0) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            months -= 1;	            start.add(Calendar.MONTH, 1);	        }	        while (months < 0) {	            months += 12;	            years -= 1;	        }	        if (!Token.containsTokenWithValue(tokens, y) && years != 0) {	            while (years != 0) {	                months += 12 * years;	                years = 0;	            }	        }	    } else {	        if (!Token.containsTokenWithValue(tokens, y)) {	            int target = end.get(Calendar.YEAR);	            if (months < 0) {	                target -= 1;	            }	            while (start.get(Calendar.YEAR) != target) {	                days += start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);	                if (start instanceof GregorianCalendar && start.get(Calendar.MONTH) == Calendar.FEBRUARY && start.get(Calendar.DAY_OF_MONTH) == 29) {	                    days += 1;	                }	                start.add(Calendar.YEAR, 1);	                days += start.get(Calendar.DAY_OF_YEAR);	            }	            years = 0;	        }	        while (start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            start.add(Calendar.MONTH, 1);	        }	        months = 0;	        while (days < 0) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            months -= 1;	            start.add(Calendar.MONTH, 1);	        }	    }	    if (!Token.containsTokenWithValue(tokens, d)) {	        hours += 24 * days;	        days = 0;	    }	    if (!Token.containsTokenWithValue(tokens, H)) {	        minutes += 60 * hours;	        hours = 0;	    }	    if (!Token.containsTokenWithValue(tokens, m)) {	        seconds += 60 * minutes;	        minutes = 0;	    }	    if (!Token.containsTokenWithValue(tokens, s)) {	        milliseconds += 1000 * seconds;	        seconds = 0;	    }	    return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);	}
public boolean isEmpty() {	    return size == 0;	}
public static String[] splitByWholeSeparator(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, false);	}
public static String substringBefore(final String str, final String separator) {	    if (isEmpty(str) || separator == null) {	        return str;	    }	    if (separator.isEmpty()) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
@Override	public String toString() {	    if (this.getObject() == null) {	        return this.getStyle().getNullText();	    }	    Class<?> clazz = this.getObject().getClass();	    this.appendFieldsIn(clazz);	    while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {	        clazz = clazz.getSuperclass();	        this.appendFieldsIn(clazz);	    }	    return super.toString();	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public int clear(final int holder) {	    return holder & ~_mask;	}
protected String getSizeStartText() {	    return sizeStartText;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
@Override	public String toString() {	    return "FastDatePrinter[" + mPattern + "," + mLocale + "," + mTimeZone.getID() + "]";	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public static Locale toLocale(final String str) {	    if (str == null) {	        return null;	    }	    if (str.contains("#")) {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    final int len = str.length();	    if (len < 2) {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    final char ch0 = str.charAt(0);	    if (ch0 == '_') {	        if (len < 3) {	            throw new IllegalArgumentException("Invalid locale format: " + str);	        }	        final char ch1 = str.charAt(1);	        final char ch2 = str.charAt(2);	        if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {	            throw new IllegalArgumentException("Invalid locale format: " + str);	        }	        if (len == 3) {	            return new Locale("", str.substring(1, 3));	        }	        if (len < 5) {	            throw new IllegalArgumentException("Invalid locale format: " + str);	        }	        if (str.charAt(3) != '_') {	            throw new IllegalArgumentException("Invalid locale format: " + str);	        }	        return new Locale("", str.substring(1, 3), str.substring(4));	    }	    final char ch1 = str.charAt(1);	    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    if (len == 2) {	        return new Locale(str);	    }	    if (len < 5) {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    if (str.charAt(2) != '_') {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    final char ch3 = str.charAt(3);	    if (ch3 == '_') {	        return new Locale(str.substring(0, 2), "", str.substring(4));	    }	    final char ch4 = str.charAt(4);	    if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    if (len == 5) {	        return new Locale(str.substring(0, 2), str.substring(3, 5));	    }	    if (len < 7) {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    if (str.charAt(5) != '_') {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public int capacity() {	    return buffer.length;	}
@Override	public int hashCode() {	    return toHashCode();	}
public static boolean isArrayType(final Type type) {	    return type instanceof GenericArrayType || type instanceof Class<?> && ((Class<?>) type).isArray();	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
public String getNullText() {	    return nullText;	}
@Override	public void setUseIdentityHashCode(final boolean useIdentityHashCode) {	    super.setUseIdentityHashCode(useIdentityHashCode);	}
public static String intToHex(final int src, final int srcPos, final String dstInit, final int dstPos, final int nHexs) {	    if (0 == nHexs) {	        return dstInit;	    }	    if ((nHexs - 1) * 4 + srcPos >= 32) {	        throw new IllegalArgumentException("(nHexs-1)*4+srcPos is greather or equal to than 32");	    }	    final StringBuilder sb = new StringBuilder(dstInit);	    int shift = 0;	    int append = sb.length();	    for (int i = 0; i < nHexs; i++) {	        shift = i * 4 + srcPos;	        final int bits = 0xF & (src >> shift);	        if (dstPos + i == append) {	            ++append;	            sb.append(intToHexDigit(bits));	        } else {	            sb.setCharAt(dstPos + i, intToHexDigit(bits));	        }	    }	    return sb.toString();	}
public static boolean containsOnly(final CharSequence cs, final String validChars) {	    if (cs == null || validChars == null) {	        return false;	    }	    return containsOnly(cs, validChars.toCharArray());	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public static FastDateFormat getInstance(final String pattern, final TimeZone timeZone, final Locale locale) {	    return cache.getInstance(pattern, timeZone, locale);	}
static boolean isRegistered(final Object lhs, final Object rhs) {	    final Set<Pair<IDKey, IDKey>> registry = getRegistry();	    final Pair<IDKey, IDKey> pair = getRegisterPair(lhs, rhs);	    final Pair<IDKey, IDKey> swappedPair = Pair.of(pair.getLeft(), pair.getRight());	    return registry != null && (registry.contains(pair) || registry.contains(swappedPair));	}
public String getNewLineText() {	    return newLine;	}
public static List<Locale> availableLocaleList() {	    return SyncAvoid.AVAILABLE_LOCALE_LIST;	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public boolean isEmptyTokenAsNull() {	    return this.emptyAsNull;	}
public static boolean containsNone(final CharSequence cs, final String invalidChars) {	    if (cs == null || invalidChars == null) {	        return true;	    }	    return containsNone(cs, invalidChars.toCharArray());	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
public static boolean isAlpha(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public boolean isAfter(final T element) {	    if (element == null) {	        return false;	    }	    return comparator.compare(element, minimum) < 0;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static void matchesPattern(final CharSequence input, final String pattern, final String message, final Object... values) {	    if (Pattern.matches(pattern, input) == false) {	        throw new IllegalArgumentException(String.format(message, values));	    }	}
public StrBuilder replaceAll(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, -1);	}
@Override	public int length() {	    return size;	}
public char[] toCharArray(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len == 0) {	        return ArrayUtils.EMPTY_CHAR_ARRAY;	    }	    final char[] chars = new char[len];	    System.arraycopy(buffer, startIndex, chars, 0, len);	    return chars;	}
public static String formatPeriod(final long startMillis, final long endMillis, final String format, final boolean padWithZeros, final TimeZone timezone) {	    final Token[] tokens = lexx(format);	    final Calendar start = Calendar.getInstance(timezone);	    start.setTime(new Date(startMillis));	    final Calendar end = Calendar.getInstance(timezone);	    end.setTime(new Date(endMillis));	    int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);	    int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);	    int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);	    int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);	    int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);	    int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);	    int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);	    while (milliseconds < 0) {	        milliseconds += 1000;	        seconds -= 1;	    }	    while (seconds < 0) {	        seconds += 60;	        minutes -= 1;	    }	    while (minutes < 0) {	        minutes += 60;	        hours -= 1;	    }	    while (hours < 0) {	        hours += 24;	        days -= 1;	    }	    if (Token.containsTokenWithValue(tokens, M)) {	        while (days < 0) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            months -= 1;	            start.add(Calendar.MONTH, 1);	        }	        while (months < 0) {	            months += 12;	            years -= 1;	        }	        if (!Token.containsTokenWithValue(tokens, y) && years != 0) {	            while (years != 0) {	                months += 12 * years;	                years = 0;	            }	        }	    } else {	        if (!Token.containsTokenWithValue(tokens, y)) {	            int target = end.get(Calendar.YEAR);	            if (months < 0) {	                target -= 1;	            }	            while (start.get(Calendar.YEAR) != target) {	                days += start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);	                if (start instanceof GregorianCalendar && start.get(Calendar.MONTH) == Calendar.FEBRUARY && start.get(Calendar.DAY_OF_MONTH) == 29) {	                    days += 1;	                }	                start.add(Calendar.YEAR, 1);	                days += start.get(Calendar.DAY_OF_YEAR);	            }	            years = 0;	        }	        while (start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            start.add(Calendar.MONTH, 1);	        }	        months = 0;	        while (days < 0) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            months -= 1;	            start.add(Calendar.MONTH, 1);	        }	    }	    if (!Token.containsTokenWithValue(tokens, d)) {	        hours += 24 * days;	        days = 0;	    }	    if (!Token.containsTokenWithValue(tokens, H)) {	        minutes += 60 * hours;	        hours = 0;	    }	    if (!Token.containsTokenWithValue(tokens, m)) {	        seconds += 60 * minutes;	        minutes = 0;	    }	    if (!Token.containsTokenWithValue(tokens, s)) {	        milliseconds += 1000 * seconds;	        seconds = 0;	    }	    return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);	}
protected boolean isUseFieldNames() {	    return useFieldNames;	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public static boolean isJavaVersionAtLeast(final JavaVersion requiredVersion) {	    return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);	}
public boolean isEmpty() {	    return size == 0;	}
public static int indexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = Integer.MAX_VALUE;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.indexOf(str, search, 0);	        if (tmp == INDEX_NOT_FOUND) {	            continue;	        }	        if (tmp < ret) {	            ret = tmp;	        }	    }	    return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
public static String removeStart(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (str.startsWith(remove)) {	        return str.substring(remove.length());	    }	    return str;	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public int capacity() {	    return buffer.length;	}
public boolean isEmptyTokenAsNull() {	    return this.emptyAsNull;	}
public StrBuilder trim() {	    if (size == 0) {	        return this;	    }	    int len = size;	    final char[] buf = buffer;	    int pos = 0;	    while (pos < len && buf[pos] <= ' ') {	        pos++;	    }	    while (pos < len && buf[len - 1] <= ' ') {	        len--;	    }	    if (len < size) {	        delete(len, size);	    }	    if (pos > 0) {	        delete(0, pos);	    }	    return this;	}
private static boolean endsWith(final CharSequence str, final CharSequence suffix, final boolean ignoreCase) {	    if (str == null || suffix == null) {	        return str == null && suffix == null;	    }	    if (suffix.length() > str.length()) {	        return false;	    }	    final int strOffset = str.length() - suffix.length();	    return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static <T extends CharSequence> T notEmpty(final T chars) {	    return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);	}
@Override	public double doubleValue() {	    return (double) numerator / (double) denominator;	}
public String getNewLineText() {	    return newLine;	}
public static <T extends CharSequence> T validIndex(final T chars, final int index) {	    return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, Integer.valueOf(index));	}
@Override	public String previous() {	    if (hasPrevious()) {	        return tokens[--tokenPos];	    }	    throw new NoSuchElementException();	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public int capacity() {	    return buffer.length;	}
protected boolean isDefaultFullDetail() {	    return defaultFullDetail;	}
private static Date set(final Date date, final int calendarField, final int amount) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final Calendar c = Calendar.getInstance();	    c.setLenient(false);	    c.setTime(date);	    c.set(calendarField, amount);	    return c.getTime();	}
public static boolean isAscii(final char ch) {	    return ch < 128;	}
public static String abbreviate(final String str, int offset, final int maxWidth) {	    if (str == null) {	        return null;	    }	    if (maxWidth < 4) {	        throw new IllegalArgumentException("Minimum abbreviation width is 4");	    }	    if (str.length() <= maxWidth) {	        return str;	    }	    if (offset > str.length()) {	        offset = str.length();	    }	    if (str.length() - offset < maxWidth - 3) {	        offset = str.length() - (maxWidth - 3);	    }	    final String abrevMarker = "...";	    if (offset <= 4) {	        return str.substring(0, maxWidth - 3) + abrevMarker;	    }	    if (maxWidth < 7) {	        throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");	    }	    if (offset + maxWidth - 3 < str.length()) {	        return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);	    }	    return abrevMarker + str.substring(str.length() - (maxWidth - 3));	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
protected String getFieldNameValueSeparator() {	    return fieldNameValueSeparator;	}
public int indexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex < 0 ? 0 : startIndex);	    if (matcher == null || startIndex >= size) {	        return -1;	    }	    final int len = size;	    final char[] buf = buffer;	    for (int i = startIndex; i < len; i++) {	        if (matcher.isMatch(buf, i, startIndex, len) > 0) {	            return i;	        }	    }	    return -1;	}
public String getNewLineText() {	    return newLine;	}
public int indexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex < 0 ? 0 : startIndex);	    if (matcher == null || startIndex >= size) {	        return -1;	    }	    final int len = size;	    final char[] buf = buffer;	    for (int i = startIndex; i < len; i++) {	        if (matcher.isMatch(buf, i, startIndex, len) > 0) {	            return i;	        }	    }	    return -1;	}
public boolean isEmpty() {	    return size == 0;	}
public static String toStringExclude(final Object object, final String... excludeFieldNames) {	    return new ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();	}
public static String stripToNull(String str) {	    if (str == null) {	        return null;	    }	    str = strip(str, null);	    return str.isEmpty() ? null : str;	}
public static String abbreviate(final String str, int offset, final int maxWidth) {	    if (str == null) {	        return null;	    }	    if (maxWidth < 4) {	        throw new IllegalArgumentException("Minimum abbreviation width is 4");	    }	    if (str.length() <= maxWidth) {	        return str;	    }	    if (offset > str.length()) {	        offset = str.length();	    }	    if (str.length() - offset < maxWidth - 3) {	        offset = str.length() - (maxWidth - 3);	    }	    final String abrevMarker = "...";	    if (offset <= 4) {	        return str.substring(0, maxWidth - 3) + abrevMarker;	    }	    if (maxWidth < 7) {	        throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");	    }	    if (offset + maxWidth - 3 < str.length()) {	        return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);	    }	    return abrevMarker + str.substring(str.length() - (maxWidth - 3));	}
public Range<T> intersectionWith(final Range<T> other) {	    if (!this.isOverlappedBy(other)) {	        throw new IllegalArgumentException(String.format("Cannot calculate intersection with non-overlapping range %s", other));	    }	    if (this.equals(other)) {	        return this;	    }	    final T min = getComparator().compare(minimum, other.minimum) < 0 ? other.minimum : minimum;	    final T max = getComparator().compare(maximum, other.maximum) < 0 ? maximum : other.maximum;	    return between(min, max, getComparator());	}
public static String difference(final String str1, final String str2) {	    if (str1 == null) {	        return str2;	    }	    if (str2 == null) {	        return str1;	    }	    final int at = indexOfDifference(str1, str2);	    if (at == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str2.substring(at);	}
public static String substringAfter(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (separator == null) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
public boolean isEmpty() {	    return size == 0;	}
public static boolean containsAny(final CharSequence cs, final CharSequence searchChars) {	    if (searchChars == null) {	        return false;	    }	    return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));	}
public static Integer toIntegerObject(final Boolean bool, final Integer trueValue, final Integer falseValue, final Integer nullValue) {	    if (bool == null) {	        return nullValue;	    }	    return bool.booleanValue() ? trueValue : falseValue;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public static Boolean[] toObject(final boolean[] array) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_OBJECT_ARRAY;	    }	    final Boolean[] result = new Boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);	    }	    return result;	}
public static String chop(final String str) {	    if (str == null) {	        return null;	    }	    final int strLen = str.length();	    if (strLen < 2) {	        return EMPTY;	    }	    final int lastIdx = strLen - 1;	    final String ret = str.substring(0, lastIdx);	    final char last = str.charAt(lastIdx);	    if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {	        return ret.substring(0, lastIdx - 1);	    }	    return ret;	}
public StrBuilder trim() {	    if (size == 0) {	        return this;	    }	    int len = size;	    final char[] buf = buffer;	    int pos = 0;	    while (pos < len && buf[pos] <= ' ') {	        pos++;	    }	    while (pos < len && buf[len - 1] <= ' ') {	        len--;	    }	    if (len < size) {	        delete(len, size);	    }	    if (pos > 0) {	        delete(0, pos);	    }	    return this;	}
public static double toDouble(final String str, final double defaultValue) {	    if (str == null) {	        return defaultValue;	    }	    try {	        return Double.parseDouble(str);	    } catch (final NumberFormatException nfe) {	        return defaultValue;	    }	}
protected boolean isUseShortClassName() {	    return useShortClassName;	}
public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, 1);	}
@Override	public int length() {	    return size;	}
public int toComparison() {	    return comparison;	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
protected String getContentStart() {	    return contentStart;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static boolean isNumber(final String str) {	    if (StringUtils.isEmpty(str)) {	        return false;	    }	    final char[] chars = str.toCharArray();	    int sz = chars.length;	    boolean hasExp = false;	    boolean hasDecPoint = false;	    boolean allowSigns = false;	    boolean foundDigit = false;	    final int start = (chars[0] == '-') ? 1 : 0;	    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {	        int i = start + 2;	        if (i == sz) {	            return false;	        }	        for (; i < chars.length; i++) {	            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {	                return false;	            }	        }	        return true;	    }	    sz--;	    int i = start;	    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {	        if (chars[i] >= '0' && chars[i] <= '9') {	            foundDigit = true;	            allowSigns = false;	        } else if (chars[i] == '.') {	            if (hasDecPoint || hasExp) {	                return false;	            }	            hasDecPoint = true;	        } else if (chars[i] == 'e' || chars[i] == 'E') {	            if (hasExp) {	                return false;	            }	            if (!foundDigit) {	                return false;	            }	            hasExp = true;	            allowSigns = true;	        } else if (chars[i] == '+' || chars[i] == '-') {	            if (!allowSigns) {	                return false;	            }	            allowSigns = false;	            foundDigit = false;	        } else {	            return false;	        }	        i++;	    }	    if (i < chars.length) {	        if (chars[i] >= '0' && chars[i] <= '9') {	            return true;	        }	        if (chars[i] == 'e' || chars[i] == 'E') {	            return false;	        }	        if (chars[i] == '.') {	            if (hasDecPoint || hasExp) {	                return false;	            }	            return foundDigit;	        }	        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {	            return foundDigit;	        }	        if (chars[i] == 'l' || chars[i] == 'L') {	            return foundDigit && !hasExp && !hasDecPoint;	        }	        return false;	    }	    return !allowSigns && foundDigit;	}
@Override	public boolean equals(final Object obj) {	    if (obj == this) {	        return true;	    } else if (obj == null || obj.getClass() != getClass()) {	        return false;	    } else {	        @SuppressWarnings("unchecked")	        final Range<T> range = (Range<T>) obj;	        return minimum.equals(range.minimum) && maximum.equals(range.maximum);	    }	}
protected void appendSummary(final StringBuffer buffer, final String fieldName, final boolean[] array) {	    appendSummarySize(buffer, fieldName, array.length);	}
public StringBuilder toStringBuilder() {	    return new StringBuilder(size).append(buffer, 0, size);	}
@Override	public void setValue(final Number value) {	    this.value = value.byteValue();	}
public static boolean isAllUpperCase(final CharSequence cs) {	    if (cs == null || isEmpty(cs)) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isUpperCase(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static CharSet getInstance(final String... setStrs) {	    if (setStrs == null) {	        return null;	    }	    if (setStrs.length == 1) {	        final CharSet common = COMMON.get(setStrs[0]);	        if (common != null) {	            return common;	        }	    }	    return new CharSet(setStrs);	}
public int toHashCode() {	    return iTotal;	}
public static boolean isWhitespace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isWhitespace(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public int getNumerator() {	    return numerator;	}
static boolean containsTokenWithValue(final Token[] tokens, final Object value) {	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        if (tokens[i].getValue() == value) {	            return true;	        }	    }	    return false;	}
public static String removeStart(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (str.startsWith(remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public void decrement() {	    value--;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
protected boolean isUseFieldNames() {	    return useFieldNames;	}
public int capacity() {	    return buffer.length;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
protected boolean isUseFieldNames() {	    return useFieldNames;	}
public int set(final int holder) {	    return holder | _mask;	}
public static double[] addAll(final double[] array1, final double... array2) {	    if (array1 == null) {	        return clone(array2);	    } else if (array2 == null) {	        return clone(array1);	    }	    final double[] joinedArray = new double[array1.length + array2.length];	    System.arraycopy(array1, 0, joinedArray, 0, array1.length);	    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);	    return joinedArray;	}
protected boolean isUseClassName() {	    return useClassName;	}
public List<String> getTokenList() {	    checkTokenized();	    final List<String> list = new ArrayList<String>(tokens.length);	    for (final String element : tokens) {	        list.add(element);	    }	    return list;	}
public static boolean isAssignable(Class<?> cls, final Class<?> toClass, final boolean autoboxing) {	    if (toClass == null) {	        return false;	    }	    if (cls == null) {	        return !toClass.isPrimitive();	    }	    if (autoboxing) {	        if (cls.isPrimitive() && !toClass.isPrimitive()) {	            cls = primitiveToWrapper(cls);	            if (cls == null) {	                return false;	            }	        }	        if (toClass.isPrimitive() && !cls.isPrimitive()) {	            cls = wrapperToPrimitive(cls);	            if (cls == null) {	                return false;	            }	        }	    }	    if (cls.equals(toClass)) {	        return true;	    }	    if (cls.isPrimitive()) {	        if (toClass.isPrimitive() == false) {	            return false;	        }	        if (Integer.TYPE.equals(cls)) {	            return Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Long.TYPE.equals(cls)) {	            return Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Boolean.TYPE.equals(cls)) {	            return false;	        }	        if (Double.TYPE.equals(cls)) {	            return false;	        }	        if (Float.TYPE.equals(cls)) {	            return Double.TYPE.equals(toClass);	        }	        if (Character.TYPE.equals(cls)) {	            return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Short.TYPE.equals(cls)) {	            return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Byte.TYPE.equals(cls)) {	            return Short.TYPE.equals(toClass) || Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        return false;	    }	    return toClass.isAssignableFrom(cls);	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static Integer toIntegerObject(final Boolean bool, final Integer trueValue, final Integer falseValue, final Integer nullValue) {	    if (bool == null) {	        return nullValue;	    }	    return bool.booleanValue() ? trueValue : falseValue;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static CharRange is(final char ch) {	    return new CharRange(ch, ch, false);	}
public static String byteToHex(final byte src, final int srcPos, final String dstInit, final int dstPos, final int nHexs) {	    if (0 == nHexs) {	        return dstInit;	    }	    if ((nHexs - 1) * 4 + srcPos >= 8) {	        throw new IllegalArgumentException("(nHexs-1)*4+srcPos is greather or equal to than 8");	    }	    final StringBuilder sb = new StringBuilder(dstInit);	    int shift = 0;	    int append = sb.length();	    for (int i = 0; i < nHexs; i++) {	        shift = i * 4 + srcPos;	        final int bits = 0xF & (src >> shift);	        if (dstPos + i == append) {	            ++append;	            sb.append(intToHexDigit(bits));	        } else {	            sb.setCharAt(dstPos + i, intToHexDigit(bits));	        }	    }	    return sb.toString();	}
private static int indexOf(final Throwable throwable, final Class<?> type, int fromIndex, final boolean subclass) {	    if (throwable == null || type == null) {	        return -1;	    }	    if (fromIndex < 0) {	        fromIndex = 0;	    }	    final Throwable[] throwables = ExceptionUtils.getThrowables(throwable);	    if (fromIndex >= throwables.length) {	        return -1;	    }	    if (subclass) {	        for (int i = fromIndex; i < throwables.length; i++) {	            if (type.isAssignableFrom(throwables[i].getClass())) {	                return i;	            }	        }	    } else {	        for (int i = fromIndex; i < throwables.length; i++) {	            if (type.equals(throwables[i].getClass())) {	                return i;	            }	        }	    }	    return -1;	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
public static void matchesPattern(final CharSequence input, final String pattern, final String message, final Object... values) {	    if (Pattern.matches(pattern, input) == false) {	        throw new IllegalArgumentException(String.format(message, values));	    }	}
public static boolean isAlphaSpace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false && cs.charAt(i) != ' ') {	            return false;	        }	    }	    return true;	}
public static String removeStartIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (startsWithIgnoreCase(str, remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public static <K, V> V createIfAbsentUnchecked(final ConcurrentMap<K, V> map, final K key, final ConcurrentInitializer<V> init) {	    try {	        return createIfAbsent(map, key, init);	    } catch (final ConcurrentException cex) {	        throw new ConcurrentRuntimeException(cex.getCause());	    }	}
@Override	public void mark(final int readAheadLimit) {	    mark = pos;	}
public String replace(final Object source) {	    if (source == null) {	        return null;	    }	    final StrBuilder buf = new StrBuilder().append(source);	    substitute(buf, 0, buf.length());	    return buf.toString();	}
@Override	public boolean isCancelled() {	    return false;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static int toIntValue(final Character ch, final int defaultValue) {	    if (ch == null) {	        return defaultValue;	    }	    return toIntValue(ch.charValue(), defaultValue);	}
@Override	public int length() {	    return size;	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
@Override	public Thread newThread(final Runnable r) {	    final Thread t = getWrappedFactory().newThread(r);	    initializeThread(t);	    return t;	}
@Override	public int length() {	    return size;	}
@Override	public boolean equals(final Object obj) {	    if (obj == this) {	        return true;	    }	    if (obj instanceof Fraction == false) {	        return false;	    }	    final Fraction other = (Fraction) obj;	    return getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator();	}
public static Formatter append(final CharSequence seq, final Formatter formatter, final int flags, final int width, final int precision, final char padChar, final CharSequence ellipsis) {	    Validate.isTrue(ellipsis == null || precision < 0 || ellipsis.length() <= precision, "Specified ellipsis '%1$s' exceeds precision of %2$s", ellipsis, Integer.valueOf(precision));	    final StringBuilder buf = new StringBuilder(seq);	    if (precision >= 0 && precision < seq.length()) {	        final CharSequence _ellipsis = ObjectUtils.defaultIfNull(ellipsis, StringUtils.EMPTY);	        buf.replace(precision - _ellipsis.length(), seq.length(), _ellipsis.toString());	    }	    final boolean leftJustify = (flags & LEFT_JUSTIFY) == LEFT_JUSTIFY;	    for (int i = buf.length(); i < width; i++) {	        buf.insert(leftJustify ? i : 0, padChar);	    }	    formatter.format(buf.toString());	    return formatter;	}
@Override	public double doubleValue() {	    return (double) numerator / (double) denominator;	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
public static String capitalize(final String str, final char... delimiters) {	    final int delimLen = delimiters == null ? -1 : delimiters.length;	    if (StringUtils.isEmpty(str) || delimLen == 0) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    boolean capitalizeNext = true;	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (isDelimiter(ch, delimiters)) {	            capitalizeNext = true;	        } else if (capitalizeNext) {	            buffer[i] = Character.toTitleCase(ch);	            capitalizeNext = false;	        }	    }	    return new String(buffer);	}
static JavaVersion get(final String nom) {	    if ("0.9".equals(nom)) {	        return JAVA_0_9;	    } else if ("1.1".equals(nom)) {	        return JAVA_1_1;	    } else if ("1.2".equals(nom)) {	        return JAVA_1_2;	    } else if ("1.3".equals(nom)) {	        return JAVA_1_3;	    } else if ("1.4".equals(nom)) {	        return JAVA_1_4;	    } else if ("1.5".equals(nom)) {	        return JAVA_1_5;	    } else if ("1.6".equals(nom)) {	        return JAVA_1_6;	    } else if ("1.7".equals(nom)) {	        return JAVA_1_7;	    } else if ("1.8".equals(nom)) {	        return JAVA_1_8;	    } else {	        return null;	    }	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public int getValue(final int holder) {	    return getRawValue(holder) >> _shift_count;	}
private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, final Class<?> toClass, final Map<TypeVariable<?>, Type> subtypeVarAssigns) {	    if (!isAssignable(cls, toClass)) {	        return null;	    }	    if (cls.isPrimitive()) {	        if (toClass.isPrimitive()) {	            return new HashMap<TypeVariable<?>, Type>();	        }	        cls = ClassUtils.primitiveToWrapper(cls);	    }	    final HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);	    if (toClass.equals(cls)) {	        return typeVarAssigns;	    }	    return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public StrTokenizer setEmptyTokenAsNull(final boolean emptyAsNull) {	    this.emptyAsNull = emptyAsNull;	    return this;	}
public static List<Class<?>> convertClassNamesToClasses(final List<String> classNames) {	    if (classNames == null) {	        return null;	    }	    final List<Class<?>> classes = new ArrayList<Class<?>>(classNames.size());	    for (final String className : classNames) {	        try {	            classes.add(Class.forName(className));	        } catch (final Exception ex) {	            classes.add(null);	        }	    }	    return classes;	}
public String getNewLineText() {	    return newLine;	}
public String getNullText() {	    return nullText;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static <T extends CharSequence> T notEmpty(final T chars) {	    return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);	}
public char getEscapeChar() {	    return this.escapeChar;	}
public static String stripEnd(final String str, final String stripChars) {	    int end;	    if (str == null || (end = str.length()) == 0) {	        return str;	    }	    if (stripChars == null) {	        while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {	            end--;	        }	    } else if (stripChars.isEmpty()) {	        return str;	    } else {	        while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND) {	            end--;	        }	    }	    return str.substring(0, end);	}
public static String replaceEachRepeatedly(final String text, final String[] searchList, final String[] replacementList) {	    final int timeToLive = searchList == null ? 0 : searchList.length;	    return replaceEach(text, searchList, replacementList, true, timeToLive);	}
public int capacity() {	    return buffer.length;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static boolean isEmpty(final CharSequence cs) {	    return cs == null || cs.length() == 0;	}
public static <T> Range<T> between(final T fromInclusive, final T toInclusive, final Comparator<T> comparator) {	    return new Range<T>(fromInclusive, toInclusive, comparator);	}
public int getDenominator() {	    return denominator;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static List<String> convertClassesToClassNames(final List<Class<?>> classes) {	    if (classes == null) {	        return null;	    }	    final List<String> classNames = new ArrayList<String>(classes.size());	    for (final Class<?> cls : classes) {	        if (cls == null) {	            classNames.add(null);	        } else {	            classNames.add(cls.getName());	        }	    }	    return classNames;	}
public boolean isEmpty() {	    return size == 0;	}
protected String getContentEnd() {	    return contentEnd;	}
public String replace(final Object source) {	    if (source == null) {	        return null;	    }	    final StrBuilder buf = new StrBuilder().append(source);	    substitute(buf, 0, buf.length());	    return buf.toString();	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
public String getRawMessage() {	    return super.getMessage();	}
public static boolean isBlank(final CharSequence cs) {	    int strLen;	    if (cs == null || (strLen = cs.length()) == 0) {	        return true;	    }	    for (int i = 0; i < strLen; i++) {	        if (Character.isWhitespace(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static int indexOfAnyBut(final CharSequence seq, final CharSequence searchChars) {	    if (isEmpty(seq) || isEmpty(searchChars)) {	        return INDEX_NOT_FOUND;	    }	    final int strLen = seq.length();	    for (int i = 0; i < strLen; i++) {	        final char ch = seq.charAt(i);	        final boolean chFound = CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0;	        if (i + 1 < strLen && Character.isHighSurrogate(ch)) {	            final char ch2 = seq.charAt(i + 1);	            if (chFound && CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0) {	                return i;	            }	        } else {	            if (!chFound) {	                return i;	            }	        }	    }	    return INDEX_NOT_FOUND;	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static boolean toBoolean(final String str, final String trueString, final String falseString) {	    if (str == trueString) {	        return true;	    } else if (str == falseString) {	        return false;	    } else if (str != null) {	        if (str.equals(trueString)) {	            return true;	        } else if (str.equals(falseString)) {	            return false;	        }	    }	    throw new IllegalArgumentException("The String did not match either specified value");	}
public static byte binaryToByte(final boolean[] src, final int srcPos, final byte dstInit, final int dstPos, final int nBools) {	    if ((src.length == 0 && srcPos == 0) || 0 == nBools) {	        return dstInit;	    }	    if (nBools - 1 + dstPos >= 8) {	        throw new IllegalArgumentException("nBools-1+dstPos is greather or equal to than 8");	    }	    byte out = dstInit;	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + dstPos;	        final int bits = (src[i + srcPos] ? 1 : 0) << shift;	        final int mask = 0x1 << shift;	        out = (byte) ((out & ~mask) | bits);	    }	    return out;	}
public static Boolean xor(final Boolean... array) {	    if (array == null) {	        throw new IllegalArgumentException("The Array must not be null");	    }	    if (array.length == 0) {	        throw new IllegalArgumentException("Array is empty");	    }	    try {	        final boolean[] primitive = ArrayUtils.toPrimitive(array);	        return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;	    } catch (final NullPointerException ex) {	        throw new IllegalArgumentException("The array must not contain any null elements");	    }	}
public String getNullText() {	    return nullText;	}
public static char binaryBeMsb0ToHexDigit(boolean[] src, int srcPos) {	    if (src.length == 0) {	        throw new IllegalArgumentException("Cannot convert an empty array.");	    }	    final int beSrcPos = src.length - 1 - srcPos;	    final int srcLen = Math.min(4, beSrcPos + 1);	    final boolean[] paddedSrc = new boolean[4];	    System.arraycopy(src, beSrcPos + 1 - srcLen, paddedSrc, 4 - srcLen, srcLen);	    src = paddedSrc;	    srcPos = 0;	    if (src[srcPos]) {	        if (src.length > srcPos + 1 && src[srcPos + 1]) {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'f';	                } else {	                    return 'e';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'd';	                } else {	                    return 'c';	                }	            }	        } else {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'b';	                } else {	                    return 'a';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '9';	                } else {	                    return '8';	                }	            }	        }	    } else {	        if (src.length > srcPos + 1 && src[srcPos + 1]) {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '7';	                } else {	                    return '6';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '5';	                } else {	                    return '4';	                }	            }	        } else {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '3';	                } else {	                    return '2';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '1';	                } else {	                    return '0';	                }	            }	        }	    }	}
@Override	public void setValue(final Number value) {	    this.value = value.longValue();	}
public void increment() {	    value++;	}
@Override	public String toString() {	    return new String(buffer, 0, size);	}
public boolean isEquals() {	    return this.isEquals;	}
public static void matchesPattern(final CharSequence input, final String pattern, final String message, final Object... values) {	    if (Pattern.matches(pattern, input) == false) {	        throw new IllegalArgumentException(String.format(message, values));	    }	}
protected String getArrayEnd() {	    return arrayEnd;	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public String getNewLineText() {	    return newLine;	}
@Override	public int intValue() {	    return value;	}
@Override	public boolean hasPrevious() {	    checkTokenized();	    return tokenPos > 0;	}
public static int countMatches(final CharSequence str, final CharSequence sub) {	    if (isEmpty(str) || isEmpty(sub)) {	        return 0;	    }	    int count = 0;	    int idx = 0;	    while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND) {	        count++;	        idx += sub.length();	    }	    return count;	}
public boolean isEmpty() {	    return size == 0;	}
protected String getArraySeparator() {	    return arraySeparator;	}
@Override	public ContextedException addContextValue(final String label, final Object value) {	    exceptionContext.addContextValue(label, value);	    return this;	}
public static String chop(final String str) {	    if (str == null) {	        return null;	    }	    final int strLen = str.length();	    if (strLen < 2) {	        return EMPTY;	    }	    final int lastIdx = strLen - 1;	    final String ret = str.substring(0, lastIdx);	    final char last = str.charAt(lastIdx);	    if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {	        return ret.substring(0, lastIdx - 1);	    }	    return ret;	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
public static <T> T median(final Comparator<T> comparator, final T... items) {	    Validate.notEmpty(items, "null/empty items");	    Validate.noNullElements(items);	    Validate.notNull(comparator, "null comparator");	    final TreeSet<T> sort = new TreeSet<T>(comparator);	    Collections.addAll(sort, items);	    @SuppressWarnings("unchecked")	    final T result = (T) sort.toArray()[(sort.size() - 1) / 2];	    return result;	}
@Override	public int length() {	    return size;	}
protected String getNullText() {	    return nullText;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
@Override	public String next() {	    if (hasNext()) {	        return tokens[tokenPos++];	    }	    throw new NoSuchElementException();	}
private static int indexOf(final Throwable throwable, final Class<?> type, int fromIndex, final boolean subclass) {	    if (throwable == null || type == null) {	        return -1;	    }	    if (fromIndex < 0) {	        fromIndex = 0;	    }	    final Throwable[] throwables = ExceptionUtils.getThrowables(throwable);	    if (fromIndex >= throwables.length) {	        return -1;	    }	    if (subclass) {	        for (int i = fromIndex; i < throwables.length; i++) {	            if (type.isAssignableFrom(throwables[i].getClass())) {	                return i;	            }	        }	    } else {	        for (int i = fromIndex; i < throwables.length; i++) {	            if (type.equals(throwables[i].getClass())) {	                return i;	            }	        }	    }	    return -1;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
@Override	protected List<String> tokenize(final char[] chars, final int offset, final int count) {	    if (chars == null) {	        return super.tokenize(StrBuilder.this.buffer, 0, StrBuilder.this.size());	    }	    return super.tokenize(chars, offset, count);	}
@Override	public boolean ready() {	    return pos < StrBuilder.this.size();	}
public static String toString(final byte[] bytes, final String charsetName) throws UnsupportedEncodingException {	    return charsetName == null ? new String(bytes) : new String(bytes, charsetName);	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
@Override	public CharSequence subSequence(final int startIndex, final int endIndex) {	    if (startIndex < 0) {	        throw new StringIndexOutOfBoundsException(startIndex);	    }	    if (endIndex > size) {	        throw new StringIndexOutOfBoundsException(endIndex);	    }	    if (startIndex > endIndex) {	        throw new StringIndexOutOfBoundsException(endIndex - startIndex);	    }	    return substring(startIndex, endIndex);	}
private static boolean startsWith(final CharSequence str, final CharSequence prefix, final boolean ignoreCase) {	    if (str == null || prefix == null) {	        return str == null && prefix == null;	    }	    if (prefix.length() > str.length()) {	        return false;	    }	    return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());	}
public static File getUserDir() {	    return new File(System.getProperty(USER_DIR_KEY));	}
public static int getLevenshteinDistance(CharSequence s, CharSequence t, final int threshold) {	    if (s == null || t == null) {	        throw new IllegalArgumentException("Strings must not be null");	    }	    if (threshold < 0) {	        throw new IllegalArgumentException("Threshold must not be negative");	    }	    int n = s.length();	    int m = t.length();	    if (n == 0) {	        return m <= threshold ? m : -1;	    } else if (m == 0) {	        return n <= threshold ? n : -1;	    }	    if (n > m) {	        final CharSequence tmp = s;	        s = t;	        t = tmp;	        n = m;	        m = t.length();	    }	    int[] p = new int[n + 1];	    int[] d = new int[n + 1];	    int[] _d;	    final int boundary = Math.min(n, threshold) + 1;	    for (int i = 0; i < boundary; i++) {	        p[i] = i;	    }	    Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);	    Arrays.fill(d, Integer.MAX_VALUE);	    for (int j = 1; j <= m; j++) {	        final char t_j = t.charAt(j - 1);	        d[0] = j;	        final int min = Math.max(1, j - threshold);	        final int max = Math.min(n, j + threshold);	        if (min > max) {	            return -1;	        }	        if (min > 1) {	            d[min - 1] = Integer.MAX_VALUE;	        }	        for (int i = min; i <= max; i++) {	            if (s.charAt(i - 1) == t_j) {	                d[i] = p[i - 1];	            } else {	                d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);	            }	        }	        _d = p;	        p = d;	        d = _d;	    }	    if (p[n] <= threshold) {	        return p[n];	    }	    return -1;	}
public static boolean endsWithIgnoreCase(final CharSequence str, final CharSequence suffix) {	    return endsWith(str, suffix, true);	}
protected String getSizeEndText() {	    return sizeEndText;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static String repeat(final char ch, final int repeat) {	    final char[] buf = new char[repeat];	    for (int i = repeat - 1; i >= 0; i--) {	        buf[i] = ch;	    }	    return new String(buf);	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
static void unregister(final Object lhs, final Object rhs) {	    Set<Pair<IDKey, IDKey>> registry = getRegistry();	    if (registry != null) {	        final Pair<IDKey, IDKey> pair = getRegisterPair(lhs, rhs);	        registry.remove(pair);	        synchronized (EqualsBuilder.class) {	            registry = getRegistry();	            if (registry != null && registry.isEmpty()) {	                REGISTRY.remove();	            }	        }	    }	}
@Override	public boolean translate(final int codepoint, final Writer out) throws IOException {	    if (between) {	        if (codepoint < below || codepoint > above) {	            return false;	        }	    } else {	        if (codepoint >= below && codepoint <= above) {	            return false;	        }	    }	    if (codepoint > 0xffff) {	        out.write(toUtf16Escape(codepoint));	    } else if (codepoint > 0xfff) {	        out.write("\\u" + hex(codepoint));	    } else if (codepoint > 0xff) {	        out.write("\\u0" + hex(codepoint));	    } else if (codepoint > 0xf) {	        out.write("\\u00" + hex(codepoint));	    } else {	        out.write("\\u000" + hex(codepoint));	    }	    return true;	}
public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {	    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {	        return false;	    }	    return true;	}
public int capacity() {	    return buffer.length;	}
public Range<T> intersectionWith(final Range<T> other) {	    if (!this.isOverlappedBy(other)) {	        throw new IllegalArgumentException(String.format("Cannot calculate intersection with non-overlapping range %s", other));	    }	    if (this.equals(other)) {	        return this;	    }	    final T min = getComparator().compare(minimum, other.minimum) < 0 ? other.minimum : minimum;	    final T max = getComparator().compare(maximum, other.maximum) < 0 ? maximum : other.maximum;	    return between(min, max, getComparator());	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public String replace(final Object source) {	    if (source == null) {	        return null;	    }	    final StrBuilder buf = new StrBuilder().append(source);	    substitute(buf, 0, buf.length());	    return buf.toString();	}
static String format(final Token[] tokens, final int years, final int months, final int days, final int hours, final int minutes, final int seconds, int milliseconds, final boolean padWithZeros) {	    final StringBuilder buffer = new StringBuilder();	    boolean lastOutputSeconds = false;	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        final Token token = tokens[i];	        final Object value = token.getValue();	        final int count = token.getCount();	        if (value instanceof StringBuilder) {	            buffer.append(value.toString());	        } else {	            if (value == y) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer.toString(years));	                lastOutputSeconds = false;	            } else if (value == M) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer.toString(months));	                lastOutputSeconds = false;	            } else if (value == d) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer.toString(days));	                lastOutputSeconds = false;	            } else if (value == H) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer.toString(hours));	                lastOutputSeconds = false;	            } else if (value == m) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer.toString(minutes));	                lastOutputSeconds = false;	            } else if (value == s) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer.toString(seconds));	                lastOutputSeconds = true;	            } else if (value == S) {	                if (lastOutputSeconds) {	                    milliseconds += 1000;	                    final String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds);	                    buffer.append(str.substring(1));	                } else {	                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds));	                }	                lastOutputSeconds = false;	            }	        }	    }	    return buffer.toString();	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static FastDateFormat getDateInstance(final int style, final TimeZone timeZone, final Locale locale) {	    return cache.getDateInstance(style, timeZone, locale);	}
public StrBuilder appendNull() {	    if (nullText == null) {	        return this;	    }	    return append(nullText);	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
static Object removeAll(final Object array, final BitSet indices) {	    final int srcLength = ArrayUtils.getLength(array);	    final int removals = indices.cardinality();	    final Object result = Array.newInstance(array.getClass().getComponentType(), srcLength - removals);	    int srcIndex = 0;	    int destIndex = 0;	    int count;	    int set;	    while ((set = indices.nextSetBit(srcIndex)) != -1) {	        count = set - srcIndex;	        if (count > 0) {	            System.arraycopy(array, srcIndex, result, destIndex, count);	            destIndex += count;	        }	        srcIndex = indices.nextClearBit(set);	    }	    count = srcLength - srcIndex;	    if (count > 0) {	        System.arraycopy(array, srcIndex, result, destIndex, count);	    }	    return result;	}
public static String rightPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return rightPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return str.concat(padStr);	    } else if (pads < padLen) {	        return str.concat(padStr.substring(0, pads));	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return str.concat(new String(padding));	    }	}
protected String getSummaryObjectStartText() {	    return summaryObjectStartText;	}
public String replace(final Object source) {	    if (source == null) {	        return null;	    }	    final StrBuilder buf = new StrBuilder().append(source);	    substitute(buf, 0, buf.length());	    return buf.toString();	}
public static String randomAlphanumeric(final int count) {	    return random(count, true, true);	}
public static boolean isAscii(final char ch) {	    return ch < 128;	}
public static Date parseDate(final String str, final Locale locale, final String... parsePatterns) throws ParseException {	    return parseDateWithLeniency(str, locale, parsePatterns, true);	}
public static boolean toBoolean(final String str, final String trueString, final String falseString) {	    if (str == trueString) {	        return true;	    } else if (str == falseString) {	        return false;	    } else if (str != null) {	        if (str.equals(trueString)) {	            return true;	        } else if (str.equals(falseString)) {	            return false;	        }	    }	    throw new IllegalArgumentException("The String did not match either specified value");	}
private static Object add(final Object array, final int index, final Object element, final Class<?> clss) {	    if (array == null) {	        if (index != 0) {	            throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");	        }	        final Object joinedArray = Array.newInstance(clss, 1);	        Array.set(joinedArray, 0, element);	        return joinedArray;	    }	    final int length = Array.getLength(array);	    if (index > length || index < 0) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(clss, length + 1);	    System.arraycopy(array, 0, result, 0, index);	    Array.set(result, index, element);	    if (index < length) {	        System.arraycopy(array, index, result, index + 1, length - index);	    }	    return result;	}
public static StrTokenizer getCSVInstance(final char[] input) {	    final StrTokenizer tok = getCSVClone();	    tok.reset(input);	    return tok;	}
public static boolean reflectionEquals(final Object lhs, final Object rhs, final boolean testTransients, final Class<?> reflectUpToClass, final String... excludeFields) {	    if (lhs == rhs) {	        return true;	    }	    if (lhs == null || rhs == null) {	        return false;	    }	    final Class<?> lhsClass = lhs.getClass();	    final Class<?> rhsClass = rhs.getClass();	    Class<?> testClass;	    if (lhsClass.isInstance(rhs)) {	        testClass = lhsClass;	        if (!rhsClass.isInstance(lhs)) {	            testClass = rhsClass;	        }	    } else if (rhsClass.isInstance(lhs)) {	        testClass = rhsClass;	        if (!lhsClass.isInstance(rhs)) {	            testClass = lhsClass;	        }	    } else {	        return false;	    }	    final EqualsBuilder equalsBuilder = new EqualsBuilder();	    try {	        reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);	        while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {	            testClass = testClass.getSuperclass();	            reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);	        }	    } catch (final IllegalArgumentException e) {	        return false;	    }	    return equalsBuilder.isEquals();	}
public static boolean isWhitespace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isWhitespace(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public int capacity() {	    return buffer.length;	}
public static int hashCode(final Object obj) {	    return obj == null ? 0 : obj.hashCode();	}
public static boolean contains(final boolean[] array, final boolean valueToFind) {	    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;	}
public static boolean isInstance(final Object value, final Type type) {	    if (type == null) {	        return false;	    }	    return value == null ? !(type instanceof Class<?>) || !((Class<?>) type).isPrimitive() : isAssignable(value.getClass(), type, null);	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public String getNullText() {	    return nullText;	}
public int size() {	    return size;	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
public final synchronized ExecutorService getExternalExecutor() {	    return externalExecutor;	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
protected void validateIndex(final int index) {	    if (index < 0 || index > size) {	        throw new StringIndexOutOfBoundsException(index);	    }	}
public String getNullText() {	    return nullText;	}
public static boolean isAlpha(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public void stop() {	    if (this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {	        throw new IllegalStateException("Stopwatch is not running. ");	    }	    if (this.runningState == STATE_RUNNING) {	        this.stopTime = System.nanoTime();	    }	    this.runningState = STATE_STOPPED;	}
public static Boolean or(final Boolean... array) {	    if (array == null) {	        throw new IllegalArgumentException("The Array must not be null");	    }	    if (array.length == 0) {	        throw new IllegalArgumentException("Array is empty");	    }	    try {	        final boolean[] primitive = ArrayUtils.toPrimitive(array);	        return or(primitive) ? Boolean.TRUE : Boolean.FALSE;	    } catch (final NullPointerException ex) {	        throw new IllegalArgumentException("The array must not contain any null elements");	    }	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static String toString(final byte[] bytes, final String charsetName) throws UnsupportedEncodingException {	    return charsetName == null ? new String(bytes) : new String(bytes, charsetName);	}
public static boolean containsNone(final CharSequence cs, final String invalidChars) {	    if (cs == null || invalidChars == null) {	        return true;	    }	    return containsNone(cs, invalidChars.toCharArray());	}
public static float max(final float a, final float b) {	    if (Float.isNaN(a)) {	        return b;	    } else if (Float.isNaN(b)) {	        return a;	    } else {	        return Math.max(a, b);	    }	}
public StrBuilder replaceAll(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, -1);	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public int size() {	    return size;	}
@Override	public int compare(final Object obj1, final Object obj2) {	    return ((Comparable) obj1).compareTo(obj2);	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
public static Date addMilliseconds(final Date date, final int amount) {	    return add(date, Calendar.MILLISECOND, amount);	}
public static String formatDuration(long durationMillis, final String format, final boolean padWithZeros) {	    final Token[] tokens = lexx(format);	    int days = 0;	    int hours = 0;	    int minutes = 0;	    int seconds = 0;	    int milliseconds = 0;	    if (Token.containsTokenWithValue(tokens, d)) {	        days = (int) (durationMillis / DateUtils.MILLIS_PER_DAY);	        durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY);	    }	    if (Token.containsTokenWithValue(tokens, H)) {	        hours = (int) (durationMillis / DateUtils.MILLIS_PER_HOUR);	        durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR);	    }	    if (Token.containsTokenWithValue(tokens, m)) {	        minutes = (int) (durationMillis / DateUtils.MILLIS_PER_MINUTE);	        durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE);	    }	    if (Token.containsTokenWithValue(tokens, s)) {	        seconds = (int) (durationMillis / DateUtils.MILLIS_PER_SECOND);	        durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND);	    }	    if (Token.containsTokenWithValue(tokens, S)) {	        milliseconds = (int) durationMillis;	    }	    return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros);	}
public StrBuilder appendAll(final Iterator<?> it) {	    if (it != null) {	        while (it.hasNext()) {	            append(it.next());	        }	    }	    return this;	}
public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {	    if ((src.length == 0 && srcPos == 0) || 0 == nBools) {	        return dstInit;	    }	    if (nBools - 1 + dstPos >= 32) {	        throw new IllegalArgumentException("nBools-1+dstPos is greather or equal to than 32");	    }	    int out = dstInit;	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + dstPos;	        final int bits = (src[i + srcPos] ? 1 : 0) << shift;	        final int mask = 0x1 << shift;	        out = (out & ~mask) | bits;	    }	    return out;	}
public boolean isEmpty() {	    return size == 0;	}
public static boolean containsIgnoreCase(final CharSequence str, final CharSequence searchStr) {	    if (str == null || searchStr == null) {	        return false;	    }	    final int len = searchStr.length();	    final int max = str.length() - len;	    for (int i = 0; i <= max; i++) {	        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)) {	            return true;	        }	    }	    return false;	}
public static String substringBefore(final String str, final String separator) {	    if (isEmpty(str) || separator == null) {	        return str;	    }	    if (separator.isEmpty()) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
protected String getContentStart() {	    return contentStart;	}
public static <L, M, R> Triple<L, M, R> of(final L left, final M middle, final R right) {	    return new ImmutableTriple<L, M, R>(left, middle, right);	}
public boolean isBefore(final T element) {	    if (element == null) {	        return false;	    }	    return comparator.compare(element, maximum) > 0;	}
public void increment() {	    value++;	}
public static Fraction getFraction(String str) {	    if (str == null) {	        throw new IllegalArgumentException("The string must not be null");	    }	    int pos = str.indexOf('.');	    if (pos >= 0) {	        return getFraction(Double.parseDouble(str));	    }	    pos = str.indexOf(' ');	    if (pos > 0) {	        final int whole = Integer.parseInt(str.substring(0, pos));	        str = str.substring(pos + 1);	        pos = str.indexOf('/');	        if (pos < 0) {	            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");	        } else {	            final int numer = Integer.parseInt(str.substring(0, pos));	            final int denom = Integer.parseInt(str.substring(pos + 1));	            return getFraction(whole, numer, denom);	        }	    }	    pos = str.indexOf('/');	    if (pos < 0) {	        return getFraction(Integer.parseInt(str), 1);	    } else {	        final int numer = Integer.parseInt(str.substring(0, pos));	        final int denom = Integer.parseInt(str.substring(pos + 1));	        return getFraction(numer, denom);	    }	}
public String getNewLineText() {	    return newLine;	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
static int compareParameterTypes(final Class<?>[] left, final Class<?>[] right, final Class<?>[] actual) {	    final float leftCost = getTotalTransformationCost(actual, left);	    final float rightCost = getTotalTransformationCost(actual, right);	    return leftCost < rightCost ? -1 : rightCost < leftCost ? 1 : 0;	}
public static <K, V> V createIfAbsent(final ConcurrentMap<K, V> map, final K key, final ConcurrentInitializer<V> init) throws ConcurrentException {	    if (map == null || init == null) {	        return null;	    }	    final V value = map.get(key);	    if (value == null) {	        return putIfAbsent(map, key, init.get());	    }	    return value;	}
public static <T extends CharSequence> T notBlank(final T chars) {	    return notBlank(chars, DEFAULT_NOT_BLANK_EX_MESSAGE);	}
void increment() {	    count++;	}
protected void appendDetail(final StringBuffer buffer, final String fieldName, final boolean[] array) {	    buffer.append(arrayStart);	    for (int i = 0; i < array.length; i++) {	        if (i > 0) {	            buffer.append(arraySeparator);	        }	        appendDetail(buffer, fieldName, array[i]);	    }	    buffer.append(arrayEnd);	}
public void stop() {	    if (this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {	        throw new IllegalStateException("Stopwatch is not running. ");	    }	    if (this.runningState == STATE_RUNNING) {	        this.stopTime = System.nanoTime();	    }	    this.runningState = STATE_STOPPED;	}
public static <T extends Iterable<?>> T noNullElements(final T iterable) {	    return noNullElements(iterable, DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public StrTokenizer setEmptyTokenAsNull(final boolean emptyAsNull) {	    this.emptyAsNull = emptyAsNull;	    return this;	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
private static Date set(final Date date, final int calendarField, final int amount) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final Calendar c = Calendar.getInstance();	    c.setLenient(false);	    c.setTime(date);	    c.set(calendarField, amount);	    return c.getTime();	}
public static String trim(final String str) {	    return str == null ? null : str.trim();	}
public boolean isEmpty() {	    return size == 0;	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
@Override	public BasicThreadFactory build() {	    final BasicThreadFactory factory = new BasicThreadFactory(this);	    reset();	    return factory;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public static String capitalizeFully(String str, final char... delimiters) {	    final int delimLen = delimiters == null ? -1 : delimiters.length;	    if (StringUtils.isEmpty(str) || delimLen == 0) {	        return str;	    }	    str = str.toLowerCase();	    return capitalize(str, delimiters);	}
protected String getContentStart() {	    return contentStart;	}
public boolean isEmptyTokenAsNull() {	    return this.emptyAsNull;	}
public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] result = new boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        final Boolean b = array[i];	        result[i] = (b == null ? valueForNull : b.booleanValue());	    }	    return result;	}
public static String abbreviate(final String str, int offset, final int maxWidth) {	    if (str == null) {	        return null;	    }	    if (maxWidth < 4) {	        throw new IllegalArgumentException("Minimum abbreviation width is 4");	    }	    if (str.length() <= maxWidth) {	        return str;	    }	    if (offset > str.length()) {	        offset = str.length();	    }	    if (str.length() - offset < maxWidth - 3) {	        offset = str.length() - (maxWidth - 3);	    }	    final String abrevMarker = "...";	    if (offset <= 4) {	        return str.substring(0, maxWidth - 3) + abrevMarker;	    }	    if (maxWidth < 7) {	        throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");	    }	    if (offset + maxWidth - 3 < str.length()) {	        return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);	    }	    return abrevMarker + str.substring(str.length() - (maxWidth - 3));	}
public static String right(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(str.length() - len);	}
public static boolean equals(final Object object1, final Object object2) {	    if (object1 == object2) {	        return true;	    }	    if (object1 == null || object2 == null) {	        return false;	    }	    return object1.equals(object2);	}
@Override	public float floatValue() {	    return value;	}
@Override	public Integer build() {	    return Integer.valueOf(toHashCode());	}
public static String chop(final String str) {	    if (str == null) {	        return null;	    }	    final int strLen = str.length();	    if (strLen < 2) {	        return EMPTY;	    }	    final int lastIdx = strLen - 1;	    final String ret = str.substring(0, lastIdx);	    final char last = str.charAt(lastIdx);	    if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {	        return ret.substring(0, lastIdx - 1);	    }	    return ret;	}
public static String[] splitByWholeSeparatorPreserveAllTokens(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, true);	}
public static Fraction getFraction(String str) {	    if (str == null) {	        throw new IllegalArgumentException("The string must not be null");	    }	    int pos = str.indexOf('.');	    if (pos >= 0) {	        return getFraction(Double.parseDouble(str));	    }	    pos = str.indexOf(' ');	    if (pos > 0) {	        final int whole = Integer.parseInt(str.substring(0, pos));	        str = str.substring(pos + 1);	        pos = str.indexOf('/');	        if (pos < 0) {	            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");	        } else {	            final int numer = Integer.parseInt(str.substring(0, pos));	            final int denom = Integer.parseInt(str.substring(pos + 1));	            return getFraction(whole, numer, denom);	        }	    }	    pos = str.indexOf('/');	    if (pos < 0) {	        return getFraction(Integer.parseInt(str), 1);	    } else {	        final int numer = Integer.parseInt(str.substring(0, pos));	        final int denom = Integer.parseInt(str.substring(pos + 1));	        return getFraction(numer, denom);	    }	}
public static String removeStartIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (startsWithIgnoreCase(str, remove)) {	        return str.substring(remove.length());	    }	    return str;	}
private static boolean endsWith(final CharSequence str, final CharSequence suffix, final boolean ignoreCase) {	    if (str == null || suffix == null) {	        return str == null && suffix == null;	    }	    if (suffix.length() > str.length()) {	        return false;	    }	    final int strOffset = str.length() - suffix.length();	    return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
@Override	public void setValue(final Number value) {	    this.value = value.intValue();	}
private static int indexOf(final Throwable throwable, final Class<?> type, int fromIndex, final boolean subclass) {	    if (throwable == null || type == null) {	        return -1;	    }	    if (fromIndex < 0) {	        fromIndex = 0;	    }	    final Throwable[] throwables = ExceptionUtils.getThrowables(throwable);	    if (fromIndex >= throwables.length) {	        return -1;	    }	    if (subclass) {	        for (int i = fromIndex; i < throwables.length; i++) {	            if (type.isAssignableFrom(throwables[i].getClass())) {	                return i;	            }	        }	    } else {	        for (int i = fromIndex; i < throwables.length; i++) {	            if (type.equals(throwables[i].getClass())) {	                return i;	            }	        }	    }	    return -1;	}
@Override	public Integer build() {	    return Integer.valueOf(toHashCode());	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
@Override	public Double getValue() {	    return Double.valueOf(this.value);	}
public static boolean isAsciiAlpha(final char ch) {	    return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z');	}
protected String getSummaryObjectStartText() {	    return summaryObjectStartText;	}
@Override	public int nextIndex() {	    return tokenPos;	}
public char getStart() {	    return this.start;	}
public int getRawValue(final int holder) {	    return holder & _mask;	}
public static String formatPeriod(final long startMillis, final long endMillis, final String format, final boolean padWithZeros, final TimeZone timezone) {	    final Token[] tokens = lexx(format);	    final Calendar start = Calendar.getInstance(timezone);	    start.setTime(new Date(startMillis));	    final Calendar end = Calendar.getInstance(timezone);	    end.setTime(new Date(endMillis));	    int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);	    int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);	    int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);	    int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);	    int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);	    int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);	    int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);	    while (milliseconds < 0) {	        milliseconds += 1000;	        seconds -= 1;	    }	    while (seconds < 0) {	        seconds += 60;	        minutes -= 1;	    }	    while (minutes < 0) {	        minutes += 60;	        hours -= 1;	    }	    while (hours < 0) {	        hours += 24;	        days -= 1;	    }	    if (Token.containsTokenWithValue(tokens, M)) {	        while (days < 0) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            months -= 1;	            start.add(Calendar.MONTH, 1);	        }	        while (months < 0) {	            months += 12;	            years -= 1;	        }	        if (!Token.containsTokenWithValue(tokens, y) && years != 0) {	            while (years != 0) {	                months += 12 * years;	                years = 0;	            }	        }	    } else {	        if (!Token.containsTokenWithValue(tokens, y)) {	            int target = end.get(Calendar.YEAR);	            if (months < 0) {	                target -= 1;	            }	            while (start.get(Calendar.YEAR) != target) {	                days += start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);	                if (start instanceof GregorianCalendar && start.get(Calendar.MONTH) == Calendar.FEBRUARY && start.get(Calendar.DAY_OF_MONTH) == 29) {	                    days += 1;	                }	                start.add(Calendar.YEAR, 1);	                days += start.get(Calendar.DAY_OF_YEAR);	            }	            years = 0;	        }	        while (start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            start.add(Calendar.MONTH, 1);	        }	        months = 0;	        while (days < 0) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            months -= 1;	            start.add(Calendar.MONTH, 1);	        }	    }	    if (!Token.containsTokenWithValue(tokens, d)) {	        hours += 24 * days;	        days = 0;	    }	    if (!Token.containsTokenWithValue(tokens, H)) {	        minutes += 60 * hours;	        hours = 0;	    }	    if (!Token.containsTokenWithValue(tokens, m)) {	        seconds += 60 * minutes;	        minutes = 0;	    }	    if (!Token.containsTokenWithValue(tokens, s)) {	        milliseconds += 1000 * seconds;	        seconds = 0;	    }	    return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public static void reverse(final boolean[] array) {	    if (array == null) {	        return;	    }	    int i = 0;	    int j = array.length - 1;	    boolean tmp;	    while (j > i) {	        tmp = array[j];	        array[j] = array[i];	        array[i] = tmp;	        j--;	        i++;	    }	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
public static int indexOfDifference(final CharSequence... css) {	    if (css == null || css.length <= 1) {	        return INDEX_NOT_FOUND;	    }	    boolean anyStringNull = false;	    boolean allStringsNull = true;	    final int arrayLen = css.length;	    int shortestStrLen = Integer.MAX_VALUE;	    int longestStrLen = 0;	    for (int i = 0; i < arrayLen; i++) {	        if (css[i] == null) {	            anyStringNull = true;	            shortestStrLen = 0;	        } else {	            allStringsNull = false;	            shortestStrLen = Math.min(css[i].length(), shortestStrLen);	            longestStrLen = Math.max(css[i].length(), longestStrLen);	        }	    }	    if (allStringsNull || longestStrLen == 0 && !anyStringNull) {	        return INDEX_NOT_FOUND;	    }	    if (shortestStrLen == 0) {	        return 0;	    }	    int firstDiff = -1;	    for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {	        final char comparisonChar = css[0].charAt(stringPos);	        for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {	            if (css[arrayPos].charAt(stringPos) != comparisonChar) {	                firstDiff = stringPos;	                break;	            }	        }	        if (firstDiff != -1) {	            break;	        }	    }	    if (firstDiff == -1 && shortestStrLen != longestStrLen) {	        return shortestStrLen;	    }	    return firstDiff;	}
public EqualsBuilder appendSuper(final boolean superEquals) {	    if (isEquals == false) {	        return this;	    }	    isEquals = superEquals;	    return this;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public int lastIndexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex >= size ? size - 1 : startIndex);	    if (matcher == null || startIndex < 0) {	        return -1;	    }	    final char[] buf = buffer;	    final int endIndex = startIndex + 1;	    for (int i = startIndex; i >= 0; i--) {	        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {	            return i;	        }	    }	    return -1;	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
public static CharRange isNotIn(final char start, final char end) {	    return new CharRange(start, end, true);	}
protected boolean isUseFieldNames() {	    return useFieldNames;	}
public static boolean isAlpha(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static String initials(final String str, final char... delimiters) {	    if (StringUtils.isEmpty(str)) {	        return str;	    }	    if (delimiters != null && delimiters.length == 0) {	        return "";	    }	    final int strLen = str.length();	    final char[] buf = new char[strLen / 2 + 1];	    int count = 0;	    boolean lastWasGap = true;	    for (int i = 0; i < strLen; i++) {	        final char ch = str.charAt(i);	        if (isDelimiter(ch, delimiters)) {	            lastWasGap = true;	        } else if (lastWasGap) {	            buf[count++] = ch;	            lastWasGap = false;	        } else {	            continue;	        }	    }	    return new String(buf, 0, count);	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
protected String getArrayStart() {	    return arrayStart;	}
public Fraction reduce() {	    if (numerator == 0) {	        return equals(ZERO) ? this : ZERO;	    }	    final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);	    if (gcd == 1) {	        return this;	    }	    return Fraction.getFraction(numerator / gcd, denominator / gcd);	}
@Override	public void mark(final int readAheadLimit) {	    mark = pos;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static StrTokenizer getTSVInstance(final char[] input) {	    final StrTokenizer tok = getTSVClone();	    tok.reset(input);	    return tok;	}
public static char binaryBeMsb0ToHexDigit(boolean[] src, int srcPos) {	    if (src.length == 0) {	        throw new IllegalArgumentException("Cannot convert an empty array.");	    }	    final int beSrcPos = src.length - 1 - srcPos;	    final int srcLen = Math.min(4, beSrcPos + 1);	    final boolean[] paddedSrc = new boolean[4];	    System.arraycopy(src, beSrcPos + 1 - srcLen, paddedSrc, 4 - srcLen, srcLen);	    src = paddedSrc;	    srcPos = 0;	    if (src[srcPos]) {	        if (src.length > srcPos + 1 && src[srcPos + 1]) {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'f';	                } else {	                    return 'e';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'd';	                } else {	                    return 'c';	                }	            }	        } else {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'b';	                } else {	                    return 'a';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '9';	                } else {	                    return '8';	                }	            }	        }	    } else {	        if (src.length > srcPos + 1 && src[srcPos + 1]) {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '7';	                } else {	                    return '6';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '5';	                } else {	                    return '4';	                }	            }	        } else {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '3';	                } else {	                    return '2';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '1';	                } else {	                    return '0';	                }	            }	        }	    }	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
protected String getSizeStartText() {	    return sizeStartText;	}
public StrBuilder trim() {	    if (size == 0) {	        return this;	    }	    int len = size;	    final char[] buf = buffer;	    int pos = 0;	    while (pos < len && buf[pos] <= ' ') {	        pos++;	    }	    while (pos < len && buf[len - 1] <= ' ') {	        len--;	    }	    if (len < size) {	        delete(len, size);	    }	    if (pos > 0) {	        delete(0, pos);	    }	    return this;	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public static int indexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = Integer.MAX_VALUE;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.indexOf(str, search, 0);	        if (tmp == INDEX_NOT_FOUND) {	            continue;	        }	        if (tmp < ret) {	            ret = tmp;	        }	    }	    return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;	}
public void add(final Number operand) {	    this.value += operand.floatValue();	}
public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {	    if (array == null) {	        return null;	    }	    if (startIndexInclusive < 0) {	        startIndexInclusive = 0;	    }	    if (endIndexExclusive > array.length) {	        endIndexExclusive = array.length;	    }	    final int newSize = endIndexExclusive - startIndexInclusive;	    if (newSize <= 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] subarray = new boolean[newSize];	    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);	    return subarray;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, final Class<?> toClass, final Map<TypeVariable<?>, Type> subtypeVarAssigns) {	    if (!isAssignable(cls, toClass)) {	        return null;	    }	    if (cls.isPrimitive()) {	        if (toClass.isPrimitive()) {	            return new HashMap<TypeVariable<?>, Type>();	        }	        cls = ClassUtils.primitiveToWrapper(cls);	    }	    final HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);	    if (toClass.equals(cls)) {	        return typeVarAssigns;	    }	    return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);	}
static boolean containsTokenWithValue(final Token[] tokens, final Object value) {	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        if (tokens[i].getValue() == value) {	            return true;	        }	    }	    return false;	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public boolean isNegated() {	    return negated;	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static final String unescapeCsv(final String input) {	    return UNESCAPE_CSV.translate(input);	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static boolean isAllUpperCase(final CharSequence cs) {	    if (cs == null || isEmpty(cs)) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isUpperCase(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public String getNullText() {	    return nullText;	}
protected String getNullText() {	    return nullText;	}
public static CharRange isIn(final char start, final char end) {	    return new CharRange(start, end, false);	}
@Override	public void setValue(final Number value) {	    this.value = value.byteValue();	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public static Boolean[] nullToEmpty(final Boolean[] array) {	    if (array == null || array.length == 0) {	        return EMPTY_BOOLEAN_OBJECT_ARRAY;	    }	    return array;	}
public String getNullText() {	    return nullText;	}
public static <K, V> V createIfAbsent(final ConcurrentMap<K, V> map, final K key, final ConcurrentInitializer<V> init) throws ConcurrentException {	    if (map == null || init == null) {	        return null;	    }	    final V value = map.get(key);	    if (value == null) {	        return putIfAbsent(map, key, init.get());	    }	    return value;	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
@Override	public int length() {	    return size;	}
public StrBuilder replaceAll(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, -1);	}
public static boolean containsOnly(final CharSequence cs, final String validChars) {	    if (cs == null || validChars == null) {	        return false;	    }	    return containsOnly(cs, validChars.toCharArray());	}
public String getNullText() {	    return nullText;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
@Deprecated	public static Throwable getCause(final Throwable throwable, String[] methodNames) {	    if (throwable == null) {	        return null;	    }	    if (methodNames == null) {	        methodNames = CAUSE_METHOD_NAMES;	    }	    for (final String methodName : methodNames) {	        if (methodName != null) {	            final Throwable cause = getCauseUsingMethodName(throwable, methodName);	            if (cause != null) {	                return cause;	            }	        }	    }	    return null;	}
public int toComparison() {	    return comparison;	}
public static int reflectionHashCode(final Object object, final String... excludeFields) {	    return reflectionHashCode(17, 37, object, false, null, excludeFields);	}
public static String replaceEachRepeatedly(final String text, final String[] searchList, final String[] replacementList) {	    final int timeToLive = searchList == null ? 0 : searchList.length;	    return replaceEach(text, searchList, replacementList, true, timeToLive);	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
public void getChars(final int startIndex, final int endIndex, final char[] destination, final int destinationIndex) {	    if (startIndex < 0) {	        throw new StringIndexOutOfBoundsException(startIndex);	    }	    if (endIndex < 0 || endIndex > length()) {	        throw new StringIndexOutOfBoundsException(endIndex);	    }	    if (startIndex > endIndex) {	        throw new StringIndexOutOfBoundsException("end < start");	    }	    System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);	}
private static boolean endsWith(final CharSequence str, final CharSequence suffix, final boolean ignoreCase) {	    if (str == null || suffix == null) {	        return str == null && suffix == null;	    }	    if (suffix.length() > str.length()) {	        return false;	    }	    final int strOffset = str.length() - suffix.length();	    return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());	}
public boolean contains(final StrMatcher matcher) {	    return indexOf(matcher, 0) >= 0;	}
public StrBuilder deleteCharAt(final int index) {	    if (index < 0 || index >= size) {	        throw new StringIndexOutOfBoundsException(index);	    }	    deleteImpl(index, index + 1, 1);	    return this;	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
public static boolean[] intToBinary(final int src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {	    if (0 == nBools) {	        return dst;	    }	    if (nBools - 1 + srcPos >= 32) {	        throw new IllegalArgumentException("nBools-1+srcPos is greather or equal to than 32");	    }	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + srcPos;	        dst[dstPos + i] = ((0x1 & (src >> shift)) != 0);	    }	    return dst;	}
@Override	public T get(final long timeout, final TimeUnit unit) {	    return value;	}
public String leftString(final int length) {	    if (length <= 0) {	        return "";	    } else if (length >= size) {	        return new String(buffer, 0, size);	    } else {	        return new String(buffer, 0, length);	    }	}
protected void appendDetail(final StringBuffer buffer, final String fieldName, final boolean[] array) {	    buffer.append(arrayStart);	    for (int i = 0; i < array.length; i++) {	        if (i > 0) {	            buffer.append(arraySeparator);	        }	        appendDetail(buffer, fieldName, array[i]);	    }	    buffer.append(arrayEnd);	}
public static String right(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(str.length() - len);	}
public boolean isEmpty() {	    return size == 0;	}
@Override	public boolean equals(final Object obj2) {	    if (obj2 instanceof Token) {	        final Token tok2 = (Token) obj2;	        if (this.value.getClass() != tok2.value.getClass()) {	            return false;	        }	        if (this.count != tok2.count) {	            return false;	        }	        if (this.value instanceof StringBuilder) {	            return this.value.toString().equals(tok2.value.toString());	        } else if (this.value instanceof Number) {	            return this.value.equals(tok2.value);	        } else {	            return this.value == tok2.value;	        }	    }	    return false;	}
public int size() {	    return size;	}
public boolean isEmptyTokenAsNull() {	    return this.emptyAsNull;	}
public static boolean isAllUpperCase(final CharSequence cs) {	    if (cs == null || isEmpty(cs)) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isUpperCase(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public String leftString(final int length) {	    if (length <= 0) {	        return "";	    } else if (length >= size) {	        return new String(buffer, 0, size);	    } else {	        return new String(buffer, 0, length);	    }	}
@Override	public int length() {	    return size;	}
public int capacity() {	    return buffer.length;	}
public static <T> T initializeUnchecked(final ConcurrentInitializer<T> initializer) {	    try {	        return initialize(initializer);	    } catch (final ConcurrentException cex) {	        throw new ConcurrentRuntimeException(cex.getCause());	    }	}
public static long binaryToLong(final boolean[] src, final int srcPos, final long dstInit, final int dstPos, final int nBools) {	    if ((src.length == 0 && srcPos == 0) || 0 == nBools) {	        return dstInit;	    }	    if (nBools - 1 + dstPos >= 64) {	        throw new IllegalArgumentException("nBools-1+dstPos is greather or equal to than 64");	    }	    long out = dstInit;	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + dstPos;	        final long bits = (src[i + srcPos] ? 1L : 0) << shift;	        final long mask = 0x1L << shift;	        out = (out & ~mask) | bits;	    }	    return out;	}
protected void appendClassName(final StringBuffer buffer, final Object object) {	    if (useClassName && object != null) {	        register(object);	        if (useShortClassName) {	            buffer.append(getShortClassName(object.getClass()));	        } else {	            buffer.append(object.getClass().getName());	        }	    }	}
public int capacity() {	    return buffer.length;	}
@Override	public StringBuffer format(final Calendar calendar, final StringBuffer buf) {	    return applyRules(calendar, buf);	}
@Override	public boolean equals(final Object obj) {	    if (obj == this) {	        return true;	    }	    if (obj instanceof CharRange == false) {	        return false;	    }	    final CharRange other = (CharRange) obj;	    return start == other.start && end == other.end && negated == other.negated;	}
public static byte CONST_BYTE(final int v) throws IllegalArgumentException {	    if (v < Byte.MIN_VALUE || v > Byte.MAX_VALUE) {	        throw new IllegalArgumentException("Supplied value must be a valid byte literal between -128 and 127: [" + v + "]");	    }	    return (byte) v;	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
@Override	public TimeZone getTimeZone() {	    return mTimeZone;	}
public Range<T> intersectionWith(final Range<T> other) {	    if (!this.isOverlappedBy(other)) {	        throw new IllegalArgumentException(String.format("Cannot calculate intersection with non-overlapping range %s", other));	    }	    if (this.equals(other)) {	        return this;	    }	    final T min = getComparator().compare(minimum, other.minimum) < 0 ? other.minimum : minimum;	    final T max = getComparator().compare(maximum, other.maximum) < 0 ? maximum : other.maximum;	    return between(min, max, getComparator());	}
public static String randomAlphabetic(final int count) {	    return random(count, true, false);	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
@Override	public String previous() {	    if (hasPrevious()) {	        return tokens[--tokenPos];	    }	    throw new NoSuchElementException();	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
protected boolean isArrayContentDetail() {	    return arrayContentDetail;	}
public int toComparison() {	    return comparison;	}
public static <K, V> V createIfAbsent(final ConcurrentMap<K, V> map, final K key, final ConcurrentInitializer<V> init) throws ConcurrentException {	    if (map == null || init == null) {	        return null;	    }	    final V value = map.get(key);	    if (value == null) {	        return putIfAbsent(map, key, init.get());	    }	    return value;	}
public int capacity() {	    return buffer.length;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static int count(final String str, final String... set) {	    if (StringUtils.isEmpty(str) || deepEmpty(set)) {	        return 0;	    }	    final CharSet chars = CharSet.getInstance(set);	    int count = 0;	    for (final char c : str.toCharArray()) {	        if (chars.contains(c)) {	            count++;	        }	    }	    return count;	}
@Override	public double doubleValue() {	    return (double) numerator / (double) denominator;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static boolean isDigits(final String str) {	    if (StringUtils.isEmpty(str)) {	        return false;	    }	    for (int i = 0; i < str.length(); i++) {	        if (!Character.isDigit(str.charAt(i))) {	            return false;	        }	    }	    return true;	}
protected String getContentStart() {	    return contentStart;	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
public static Date parseDate(final String str, final Locale locale, final String... parsePatterns) throws ParseException {	    return parseDateWithLeniency(str, locale, parsePatterns, true);	}
public static String trimToNull(final String str) {	    final String ts = trim(str);	    return isEmpty(ts) ? null : ts;	}
public static boolean isBlank(final CharSequence cs) {	    int strLen;	    if (cs == null || (strLen = cs.length()) == 0) {	        return true;	    }	    for (int i = 0; i < strLen; i++) {	        if (Character.isWhitespace(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public String getNullText() {	    return nullText;	}
public static boolean[] hexDigitToBinary(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return new boolean[] { false, false, false, false };	        case '1':	            return new boolean[] { true, false, false, false };	        case '2':	            return new boolean[] { false, true, false, false };	        case '3':	            return new boolean[] { true, true, false, false };	        case '4':	            return new boolean[] { false, false, true, false };	        case '5':	            return new boolean[] { true, false, true, false };	        case '6':	            return new boolean[] { false, true, true, false };	        case '7':	            return new boolean[] { true, true, true, false };	        case '8':	            return new boolean[] { false, false, false, true };	        case '9':	            return new boolean[] { true, false, false, true };	        case 'a':	        case 'A':	            return new boolean[] { false, true, false, true };	        case 'b':	        case 'B':	            return new boolean[] { true, true, false, true };	        case 'c':	        case 'C':	            return new boolean[] { false, false, true, true };	        case 'd':	        case 'D':	            return new boolean[] { true, false, true, true };	        case 'e':	        case 'E':	            return new boolean[] { false, true, true, true };	        case 'f':	        case 'F':	            return new boolean[] { true, true, true, true };	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public static boolean isNumber(final String str) {	    if (StringUtils.isEmpty(str)) {	        return false;	    }	    final char[] chars = str.toCharArray();	    int sz = chars.length;	    boolean hasExp = false;	    boolean hasDecPoint = false;	    boolean allowSigns = false;	    boolean foundDigit = false;	    final int start = (chars[0] == '-') ? 1 : 0;	    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {	        int i = start + 2;	        if (i == sz) {	            return false;	        }	        for (; i < chars.length; i++) {	            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {	                return false;	            }	        }	        return true;	    }	    sz--;	    int i = start;	    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {	        if (chars[i] >= '0' && chars[i] <= '9') {	            foundDigit = true;	            allowSigns = false;	        } else if (chars[i] == '.') {	            if (hasDecPoint || hasExp) {	                return false;	            }	            hasDecPoint = true;	        } else if (chars[i] == 'e' || chars[i] == 'E') {	            if (hasExp) {	                return false;	            }	            if (!foundDigit) {	                return false;	            }	            hasExp = true;	            allowSigns = true;	        } else if (chars[i] == '+' || chars[i] == '-') {	            if (!allowSigns) {	                return false;	            }	            allowSigns = false;	            foundDigit = false;	        } else {	            return false;	        }	        i++;	    }	    if (i < chars.length) {	        if (chars[i] >= '0' && chars[i] <= '9') {	            return true;	        }	        if (chars[i] == 'e' || chars[i] == 'E') {	            return false;	        }	        if (chars[i] == '.') {	            if (hasDecPoint || hasExp) {	                return false;	            }	            return foundDigit;	        }	        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {	            return foundDigit;	        }	        if (chars[i] == 'l' || chars[i] == 'L') {	            return foundDigit && !hasExp && !hasDecPoint;	        }	        return false;	    }	    return !allowSigns && foundDigit;	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
public boolean contains(final StrMatcher matcher) {	    return indexOf(matcher, 0) >= 0;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static String capitalize(final String str, final char... delimiters) {	    final int delimLen = delimiters == null ? -1 : delimiters.length;	    if (StringUtils.isEmpty(str) || delimLen == 0) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    boolean capitalizeNext = true;	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (isDelimiter(ch, delimiters)) {	            capitalizeNext = true;	        } else if (capitalizeNext) {	            buffer[i] = Character.toTitleCase(ch);	            capitalizeNext = false;	        }	    }	    return new String(buffer);	}
@Override	public int hashCode() {	    return value ? Boolean.TRUE.hashCode() : Boolean.FALSE.hashCode();	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
public boolean isEmpty() {	    return size == 0;	}
public StrBuilder appendNewLine() {	    if (newLine == null) {	        append(SystemUtils.LINE_SEPARATOR);	        return this;	    }	    return append(newLine);	}
public char getEnd() {	    return this.end;	}
public static String randomAlphanumeric(final int count) {	    return random(count, true, true);	}
public void subtract(final Number operand) {	    this.value -= operand.doubleValue();	}
public HashCodeBuilder append(final short[] array) {	    if (array == null) {	        iTotal = iTotal * iConstant;	    } else {	        for (final short element : array) {	            append(element);	        }	    }	    return this;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public boolean isEmpty() {	    return size == 0;	}
static char[] toCharArray(final CharSequence cs) {	    if (cs instanceof String) {	        return ((String) cs).toCharArray();	    } else {	        final int sz = cs.length();	        final char[] array = new char[cs.length()];	        for (int i = 0; i < sz; i++) {	            array[i] = cs.charAt(i);	        }	        return array;	    }	}
public String replace(final Object source) {	    if (source == null) {	        return null;	    }	    final StrBuilder buf = new StrBuilder().append(source);	    substitute(buf, 0, buf.length());	    return buf.toString();	}
@Override	public int length() {	    return size;	}
public boolean isNegated() {	    return negated;	}
static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) {	    if (cs instanceof String && substring instanceof String) {	        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);	    } else {	        int index1 = thisStart;	        int index2 = start;	        int tmpLen = length;	        while (tmpLen-- > 0) {	            char c1 = cs.charAt(index1++);	            char c2 = substring.charAt(index2++);	            if (c1 == c2) {	                continue;	            }	            if (!ignoreCase) {	                return false;	            }	            if (Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {	                return false;	            }	        }	        return true;	    }	}
public int size() {	    return size;	}
public static boolean[] byteToBinary(final byte src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {	    if (0 == nBools) {	        return dst;	    }	    if (nBools - 1 + srcPos >= 8) {	        throw new IllegalArgumentException("nBools-1+srcPos is greather or equal to than 8");	    }	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + srcPos;	        dst[dstPos + i] = ((0x1 & (src >> shift)) != 0);	    }	    return dst;	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
static void unregister(final Object lhs, final Object rhs) {	    Set<Pair<IDKey, IDKey>> registry = getRegistry();	    if (registry != null) {	        final Pair<IDKey, IDKey> pair = getRegisterPair(lhs, rhs);	        registry.remove(pair);	        synchronized (EqualsBuilder.class) {	            registry = getRegistry();	            if (registry != null && registry.isEmpty()) {	                REGISTRY.remove();	            }	        }	    }	}
public static String removeStartIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (startsWithIgnoreCase(str, remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public StrBuilder setNullText(String nullText) {	    if (nullText != null && nullText.isEmpty()) {	        nullText = null;	    }	    this.nullText = nullText;	    return this;	}
@Override	public void setValue(final Number value) {	    this.value = value.intValue();	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
@Override	public int previousIndex() {	    return tokenPos - 1;	}
public int toComparison() {	    return comparison;	}
public StrBuilder appendWithSeparators(final Iterator<?> it, String separator) {	    if (it != null) {	        separator = ObjectUtils.toString(separator);	        while (it.hasNext()) {	            append(it.next());	            if (it.hasNext()) {	                append(separator);	            }	        }	    }	    return this;	}
public String getNewLineText() {	    return newLine;	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public String getNullText() {	    return nullText;	}
public static void identityToString(final StringBuilder builder, final Object object) {	    if (object == null) {	        throw new NullPointerException("Cannot get the toString of a null identity");	    }	    builder.append(object.getClass().getName()).append('@').append(Integer.toHexString(System.identityHashCode(object)));	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
public static Object readDeclaredField(final Object target, final String fieldName, final boolean forceAccess) throws IllegalAccessException {	    if (target == null) {	        throw new IllegalArgumentException("target object must not be null");	    }	    final Class<?> cls = target.getClass();	    final Field field = getDeclaredField(cls, fieldName, forceAccess);	    if (field == null) {	        throw new IllegalArgumentException("Cannot locate declared field " + cls.getName() + "." + fieldName);	    }	    return readField(field, target);	}
public boolean isNegated() {	    return negated;	}
public static String rightPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return rightPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return str.concat(padStr);	    } else if (pads < padLen) {	        return str.concat(padStr.substring(0, pads));	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return str.concat(new String(padding));	    }	}
public static String randomAlphabetic(final int count) {	    return random(count, true, false);	}
public int capacity() {	    return buffer.length;	}
public static int lastIndexOfIgnoreCase(final CharSequence str, final CharSequence searchStr, int startPos) {	    if (str == null || searchStr == null) {	        return INDEX_NOT_FOUND;	    }	    if (startPos > str.length() - searchStr.length()) {	        startPos = str.length() - searchStr.length();	    }	    if (startPos < 0) {	        return INDEX_NOT_FOUND;	    }	    if (searchStr.length() == 0) {	        return startPos;	    }	    for (int i = startPos; i >= 0; i--) {	        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public int set(final int holder) {	    return holder | _mask;	}
protected String getArrayStart() {	    return arrayStart;	}
public static boolean isBlank(final CharSequence cs) {	    int strLen;	    if (cs == null || (strLen = cs.length()) == 0) {	        return true;	    }	    for (int i = 0; i < strLen; i++) {	        if (Character.isWhitespace(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
public int toComparison() {	    return comparison;	}
public StrSubstitutor setVariableSuffix(final String suffix) {	    if (suffix == null) {	        throw new IllegalArgumentException("Variable suffix must not be null!");	    }	    return setVariableSuffixMatcher(StrMatcher.stringMatcher(suffix));	}
public static String stripAccents(final String input) {	    if (input == null) {	        return null;	    }	    final Pattern pattern = Pattern.compile("\\p{InCombiningDiacriticalMarks}+");	    final String decomposed = Normalizer.normalize(input, Normalizer.Form.NFD);	    return pattern.matcher(decomposed).replaceAll("");	}
public static String center(String str, final int size, String padStr) {	    if (str == null || size <= 0) {	        return str;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    str = leftPad(str, strLen + pads / 2, padStr);	    str = rightPad(str, size, padStr);	    return str;	}
public void increment() {	    value++;	}
public int toComparison() {	    return comparison;	}
private static String replaceEach(final String text, final String[] searchList, final String[] replacementList, final boolean repeat, final int timeToLive) {	    if (text == null || text.isEmpty() || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {	        return text;	    }	    if (timeToLive < 0) {	        throw new IllegalStateException("Aborting to protect against StackOverflowError - " + "output of one loop is the input of another");	    }	    final int searchLength = searchList.length;	    final int replacementLength = replacementList.length;	    if (searchLength != replacementLength) {	        throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs " + replacementLength);	    }	    final boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];	    int textIndex = -1;	    int replaceIndex = -1;	    int tempIndex = -1;	    for (int i = 0; i < searchLength; i++) {	        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {	            continue;	        }	        tempIndex = text.indexOf(searchList[i]);	        if (tempIndex == -1) {	            noMoreMatchesForReplIndex[i] = true;	        } else {	            if (textIndex == -1 || tempIndex < textIndex) {	                textIndex = tempIndex;	                replaceIndex = i;	            }	        }	    }	    if (textIndex == -1) {	        return text;	    }	    int start = 0;	    int increase = 0;	    for (int i = 0; i < searchList.length; i++) {	        if (searchList[i] == null || replacementList[i] == null) {	            continue;	        }	        final int greater = replacementList[i].length() - searchList[i].length();	        if (greater > 0) {	            increase += 3 * greater;	        }	    }	    increase = Math.min(increase, text.length() / 5);	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (textIndex != -1) {	        for (int i = start; i < textIndex; i++) {	            buf.append(text.charAt(i));	        }	        buf.append(replacementList[replaceIndex]);	        start = textIndex + searchList[replaceIndex].length();	        textIndex = -1;	        replaceIndex = -1;	        tempIndex = -1;	        for (int i = 0; i < searchLength; i++) {	            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {	                continue;	            }	            tempIndex = text.indexOf(searchList[i], start);	            if (tempIndex == -1) {	                noMoreMatchesForReplIndex[i] = true;	            } else {	                if (textIndex == -1 || tempIndex < textIndex) {	                    textIndex = tempIndex;	                    replaceIndex = i;	                }	            }	        }	    }	    final int textLength = text.length();	    for (int i = start; i < textLength; i++) {	        buf.append(text.charAt(i));	    }	    final String result = buf.toString();	    if (!repeat) {	        return result;	    }	    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);	}
public static String substringBefore(final String str, final String separator) {	    if (isEmpty(str) || separator == null) {	        return str;	    }	    if (separator.isEmpty()) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle, final TimeZone timeZone, final Locale locale) {	    return cache.getDateTimeInstance(dateStyle, timeStyle, timeZone, locale);	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static String right(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(str.length() - len);	}
public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, 1);	}
public static String[] splitByWholeSeparator(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, false);	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
@Override	public int hashCode() {	    return toHashCode();	}
public static <T extends CharSequence> T defaultIfBlank(final T str, final T defaultStr) {	    return StringUtils.isBlank(str) ? defaultStr : str;	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
@Override	public void mark(final int readAheadLimit) {	    mark = pos;	}
public static String substringBefore(final String str, final String separator) {	    if (isEmpty(str) || separator == null) {	        return str;	    }	    if (separator.isEmpty()) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
@Override	public int hashCode() {	    return (getLeft() == null ? 0 : getLeft().hashCode()) ^ (getMiddle() == null ? 0 : getMiddle().hashCode()) ^ (getRight() == null ? 0 : getRight().hashCode());	}
@Override	public int nextIndex() {	    return tokenPos;	}
private static long getFragment(final Calendar calendar, final int fragment, final int unit) {	    if (calendar == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final long millisPerUnit = getMillisPerUnit(unit);	    long result = 0;	    switch(fragment) {	        case Calendar.YEAR:	            result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;	            break;	        case Calendar.MONTH:	            result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;	            break;	    }	    switch(fragment) {	        case Calendar.YEAR:	        case Calendar.MONTH:	        case Calendar.DAY_OF_YEAR:	        case Calendar.DATE:	            result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;	        case Calendar.HOUR_OF_DAY:	            result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;	        case Calendar.MINUTE:	            result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;	        case Calendar.SECOND:	            result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;	            break;	        case Calendar.MILLISECOND:	            break;	        default:	            throw new IllegalArgumentException("The fragment " + fragment + " is not supported");	    }	    return result;	}
@Override	public boolean ready() {	    return pos < StrBuilder.this.size();	}
@Override	public TimeZone getTimeZone() {	    return timeZone;	}
public String getNewLineText() {	    return newLine;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
@Override	public int hashCode() {	    return toHashCode();	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public void getChars(final int startIndex, final int endIndex, final char[] destination, final int destinationIndex) {	    if (startIndex < 0) {	        throw new StringIndexOutOfBoundsException(startIndex);	    }	    if (endIndex < 0 || endIndex > length()) {	        throw new StringIndexOutOfBoundsException(endIndex);	    }	    if (startIndex > endIndex) {	        throw new StringIndexOutOfBoundsException("end < start");	    }	    System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);	}
public Fraction add(final Fraction fraction) {	    return addSub(fraction, true);	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
public static String normalizeSpace(final String str) {	    if (str == null) {	        return null;	    }	    return WHITESPACE_PATTERN.matcher(trim(str)).replaceAll(SPACE);	}
public static int indexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = Integer.MAX_VALUE;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.indexOf(str, search, 0);	        if (tmp == INDEX_NOT_FOUND) {	            continue;	        }	        if (tmp < ret) {	            ret = tmp;	        }	    }	    return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;	}
public static ConcurrentRuntimeException extractCauseUnchecked(final ExecutionException ex) {	    if (ex == null || ex.getCause() == null) {	        return null;	    }	    throwCause(ex);	    return new ConcurrentRuntimeException(ex.getMessage(), ex.getCause());	}
public final void translate(final CharSequence input, final Writer out) throws IOException {	    if (out == null) {	        throw new IllegalArgumentException("The Writer must not be null");	    }	    if (input == null) {	        return;	    }	    int pos = 0;	    final int len = input.length();	    while (pos < len) {	        final int consumed = translate(input, pos, out);	        if (consumed == 0) {	            final char[] c = Character.toChars(Character.codePointAt(input, pos));	            out.write(c);	            pos += c.length;	            continue;	        }	        for (int pt = 0; pt < consumed; pt++) {	            pos += Character.charCount(Character.codePointAt(input, pt));	        }	    }	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
public static <T> Constructor<T> getMatchingAccessibleConstructor(final Class<T> cls, final Class<?>... parameterTypes) {	    try {	        final Constructor<T> ctor = cls.getConstructor(parameterTypes);	        MemberUtils.setAccessibleWorkaround(ctor);	        return ctor;	    } catch (final NoSuchMethodException e) {	    }	    Constructor<T> result = null;	    final Constructor<?>[] ctors = cls.getConstructors();	    for (Constructor<?> ctor : ctors) {	        if (ClassUtils.isAssignable(parameterTypes, ctor.getParameterTypes(), true)) {	            ctor = getAccessibleConstructor(ctor);	            if (ctor != null) {	                MemberUtils.setAccessibleWorkaround(ctor);	                if (result == null || MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result.getParameterTypes(), parameterTypes) < 0) {	                    @SuppressWarnings("unchecked")	                    final Constructor<T> constructor = (Constructor<T>) ctor;	                    result = constructor;	                }	            }	        }	    }	    return result;	}
public static Iterator<?> iterator(final Object focus, final int rangeStyle) {	    if (focus == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    if (focus instanceof Date) {	        return iterator((Date) focus, rangeStyle);	    } else if (focus instanceof Calendar) {	        return iterator((Calendar) focus, rangeStyle);	    } else {	        throw new ClassCastException("Could not iterate based on " + focus);	    }	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
public static int countMatches(final CharSequence str, final CharSequence sub) {	    if (isEmpty(str) || isEmpty(sub)) {	        return 0;	    }	    int count = 0;	    int idx = 0;	    while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND) {	        count++;	        idx += sub.length();	    }	    return count;	}
static boolean isPackageAccess(final int modifiers) {	    return (modifiers & ACCESS_TEST) == 0;	}
public int indexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex < 0 ? 0 : startIndex);	    if (matcher == null || startIndex >= size) {	        return -1;	    }	    final int len = size;	    final char[] buf = buffer;	    for (int i = startIndex; i < len; i++) {	        if (matcher.isMatch(buf, i, startIndex, len) > 0) {	            return i;	        }	    }	    return -1;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
@Override	public final L getKey() {	    return getLeft();	}
protected boolean isArrayContentDetail() {	    return arrayContentDetail;	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
@Override	public float floatValue() {	    return (float) numerator / (float) denominator;	}
public static String upperCase(final String str, final Locale locale) {	    if (str == null) {	        return null;	    }	    return str.toUpperCase(locale);	}
public int getNumerator() {	    return numerator;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static final String unescapeHtml4(final String input) {	    return UNESCAPE_HTML4.translate(input);	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
protected String getContentStart() {	    return contentStart;	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
public static String prependIfMissing(final String str, final CharSequence prefix, final CharSequence... prefixes) {	    return prependIfMissing(str, prefix, false, prefixes);	}
@Override	public T get(final long timeout, final TimeUnit unit) {	    return value;	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
public static boolean endsWithAny(final CharSequence string, final CharSequence... searchStrings) {	    if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {	        return false;	    }	    for (final CharSequence searchString : searchStrings) {	        if (StringUtils.endsWith(string, searchString)) {	            return true;	        }	    }	    return false;	}
public boolean isEmptyTokenAsNull() {	    return this.emptyAsNull;	}
public static BigDecimal createBigDecimal(final String str) {	    if (str == null) {	        return null;	    }	    if (StringUtils.isBlank(str)) {	        throw new NumberFormatException("A blank string is not a valid number");	    }	    if (str.trim().startsWith("--")) {	        throw new NumberFormatException(str + " is not a valid number.");	    }	    return new BigDecimal(str);	}
public static boolean isAsciiAlphanumeric(final char ch) {	    return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9');	}
public static boolean[] removeElements(final boolean[] array, final boolean... values) {	    if (isEmpty(array) || isEmpty(values)) {	        return clone(array);	    }	    final HashMap<Boolean, MutableInt> occurrences = new HashMap<Boolean, MutableInt>(2);	    for (final boolean v : values) {	        final Boolean boxed = Boolean.valueOf(v);	        final MutableInt count = occurrences.get(boxed);	        if (count == null) {	            occurrences.put(boxed, new MutableInt(1));	        } else {	            count.increment();	        }	    }	    final BitSet toRemove = new BitSet();	    for (final Map.Entry<Boolean, MutableInt> e : occurrences.entrySet()) {	        final Boolean v = e.getKey();	        int found = 0;	        for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) {	            found = indexOf(array, v.booleanValue(), found);	            if (found < 0) {	                break;	            }	            toRemove.set(found++);	        }	    }	    return (boolean[]) removeAll(array, toRemove);	}
public static StrTokenizer getCSVInstance(final char[] input) {	    final StrTokenizer tok = getCSVClone();	    tok.reset(input);	    return tok;	}
public String getNullText() {	    return nullText;	}
public static <T> Range<T> between(final T fromInclusive, final T toInclusive, final Comparator<T> comparator) {	    return new Range<T>(fromInclusive, toInclusive, comparator);	}
public static String[] splitByWholeSeparator(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, false);	}
public static String random(final int count, final char... chars) {	    if (chars == null) {	        return random(count, 0, 0, false, false, null, RANDOM);	    }	    return random(count, 0, chars.length, false, false, chars, RANDOM);	}
public static List<Locale> localeLookupList(final Locale locale, final Locale defaultLocale) {	    final List<Locale> list = new ArrayList<Locale>(4);	    if (locale != null) {	        list.add(locale);	        if (locale.getVariant().length() > 0) {	            list.add(new Locale(locale.getLanguage(), locale.getCountry()));	        }	        if (locale.getCountry().length() > 0) {	            list.add(new Locale(locale.getLanguage(), ""));	        }	        if (list.contains(defaultLocale) == false) {	            list.add(defaultLocale);	        }	    }	    return Collections.unmodifiableList(list);	}
public static long toLong(final String str, final long defaultValue) {	    if (str == null) {	        return defaultValue;	    }	    try {	        return Long.parseLong(str);	    } catch (final NumberFormatException nfe) {	        return defaultValue;	    }	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public String getNullText() {	    return nullText;	}
public static File getJavaIoTmpDir() {	    return new File(System.getProperty(JAVA_IO_TMPDIR_KEY));	}
public boolean isEmpty() {	    return size == 0;	}
@Override	protected int getTaskCount() {	    int result = 1;	    for (final BackgroundInitializer<?> bi : childInitializers.values()) {	        result += bi.getTaskCount();	    }	    return result;	}
public static Type[] normalizeUpperBounds(final Type[] bounds) {	    if (bounds.length < 2) {	        return bounds;	    }	    final Set<Type> types = new HashSet<Type>(bounds.length);	    for (final Type type1 : bounds) {	        boolean subtypeFound = false;	        for (final Type type2 : bounds) {	            if (type1 != type2 && isAssignable(type2, type1, null)) {	                subtypeFound = true;	                break;	            }	        }	        if (!subtypeFound) {	            types.add(type1);	        }	    }	    return types.toArray(new Type[types.size()]);	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public int size() {	    return size;	}
public static StrTokenizer getTSVInstance(final char[] input) {	    final StrTokenizer tok = getTSVClone();	    tok.reset(input);	    return tok;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static String removeStartIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (startsWithIgnoreCase(str, remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public String rightString(final int length) {	    if (length <= 0) {	        return "";	    } else if (length >= size) {	        return new String(buffer, 0, size);	    } else {	        return new String(buffer, size - length, length);	    }	}
protected boolean isDefaultFullDetail() {	    return defaultFullDetail;	}
public static boolean isAllLowerCase(final CharSequence cs) {	    if (cs == null || isEmpty(cs)) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLowerCase(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static Boolean and(final Boolean... array) {	    if (array == null) {	        throw new IllegalArgumentException("The Array must not be null");	    }	    if (array.length == 0) {	        throw new IllegalArgumentException("Array is empty");	    }	    try {	        final boolean[] primitive = ArrayUtils.toPrimitive(array);	        return and(primitive) ? Boolean.TRUE : Boolean.FALSE;	    } catch (final NullPointerException ex) {	        throw new IllegalArgumentException("The array must not contain any null elements");	    }	}
public static String capitalize(final String str, final char... delimiters) {	    final int delimLen = delimiters == null ? -1 : delimiters.length;	    if (StringUtils.isEmpty(str) || delimLen == 0) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    boolean capitalizeNext = true;	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (isDelimiter(ch, delimiters)) {	            capitalizeNext = true;	        } else if (capitalizeNext) {	            buffer[i] = Character.toTitleCase(ch);	            capitalizeNext = false;	        }	    }	    return new String(buffer);	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
private static boolean endsWith(final CharSequence str, final CharSequence suffix, final boolean ignoreCase) {	    if (str == null || suffix == null) {	        return str == null && suffix == null;	    }	    if (suffix.length() > str.length()) {	        return false;	    }	    final int strOffset = str.length() - suffix.length();	    return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());	}
public boolean isEmpty() {	    return size == 0;	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
public boolean isEmptyTokenAsNull() {	    return this.emptyAsNull;	}
public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {	    if (array == null) {	        return null;	    }	    if (startIndexInclusive < 0) {	        startIndexInclusive = 0;	    }	    if (endIndexExclusive > array.length) {	        endIndexExclusive = array.length;	    }	    final int newSize = endIndexExclusive - startIndexInclusive;	    if (newSize <= 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] subarray = new boolean[newSize];	    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);	    return subarray;	}
public static boolean isAlpha(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static boolean containsOnly(final CharSequence cs, final String validChars) {	    if (cs == null || validChars == null) {	        return false;	    }	    return containsOnly(cs, validChars.toCharArray());	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static String center(String str, final int size, String padStr) {	    if (str == null || size <= 0) {	        return str;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    str = leftPad(str, strLen + pads / 2, padStr);	    str = rightPad(str, size, padStr);	    return str;	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
public static String formatDurationHMS(final long durationMillis) {	    return formatDuration(durationMillis, "H:mm:ss.SSS");	}
public boolean isEmpty() {	    return size == 0;	}
public boolean isEmpty() {	    return size == 0;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static String getMessage(final Throwable th) {	    if (th == null) {	        return "";	    }	    final String clsName = ClassUtils.getShortClassName(th, null);	    final String msg = th.getMessage();	    return clsName + ": " + StringUtils.defaultString(msg);	}
public static String substringBeforeLast(final String str, final String separator) {	    if (isEmpty(str) || isEmpty(separator)) {	        return str;	    }	    final int pos = str.lastIndexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
@Override	public int length() {	    return size;	}
@Override	public String previous() {	    if (hasPrevious()) {	        return tokens[--tokenPos];	    }	    throw new NoSuchElementException();	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
@Override	public StringBuffer format(final Calendar calendar, final StringBuffer buf) {	    return printer.format(calendar, buf);	}
public StrBuilder deleteFirst(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, 1);	}
public static String rightPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return rightPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return str.concat(padStr);	    } else if (pads < padLen) {	        return str.concat(padStr.substring(0, pads));	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return str.concat(new String(padding));	    }	}
public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {	    if (array == null) {	        return null;	    }	    if (startIndexInclusive < 0) {	        startIndexInclusive = 0;	    }	    if (endIndexExclusive > array.length) {	        endIndexExclusive = array.length;	    }	    final int newSize = endIndexExclusive - startIndexInclusive;	    if (newSize <= 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] subarray = new boolean[newSize];	    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);	    return subarray;	}
public int toComparison() {	    return comparison;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
public static boolean isInnerClass(final Class<?> cls) {	    return cls != null && cls.getEnclosingClass() != null;	}
public ReflectionToStringBuilder setExcludeFieldNames(final String... excludeFieldNamesParam) {	    if (excludeFieldNamesParam == null) {	        this.excludeFieldNames = null;	    } else {	        this.excludeFieldNames = toNoNullStringArray(excludeFieldNamesParam);	        Arrays.sort(this.excludeFieldNames);	    }	    return this;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static String substringAfter(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (separator == null) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
public int capacity() {	    return buffer.length;	}
public static String capitalize(final String str, final char... delimiters) {	    final int delimLen = delimiters == null ? -1 : delimiters.length;	    if (StringUtils.isEmpty(str) || delimLen == 0) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    boolean capitalizeNext = true;	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (isDelimiter(ch, delimiters)) {	            capitalizeNext = true;	        } else if (capitalizeNext) {	            buffer[i] = Character.toTitleCase(ch);	            capitalizeNext = false;	        }	    }	    return new String(buffer);	}
public static final String unescapeEcmaScript(final String input) {	    return UNESCAPE_ECMASCRIPT.translate(input);	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
public StrBuilder replaceAll(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, -1);	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
public static int reflectionCompare(final Object lhs, final Object rhs, final boolean compareTransients, final Class<?> reflectUpToClass, final String... excludeFields) {	    if (lhs == rhs) {	        return 0;	    }	    if (lhs == null || rhs == null) {	        throw new NullPointerException();	    }	    Class<?> lhsClazz = lhs.getClass();	    if (!lhsClazz.isInstance(rhs)) {	        throw new ClassCastException();	    }	    final CompareToBuilder compareToBuilder = new CompareToBuilder();	    reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);	    while (lhsClazz.getSuperclass() != null && lhsClazz != reflectUpToClass) {	        lhsClazz = lhsClazz.getSuperclass();	        reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);	    }	    return compareToBuilder.toComparison();	}
public static void identityToString(final StringBuilder builder, final Object object) {	    if (object == null) {	        throw new NullPointerException("Cannot get the toString of a null identity");	    }	    builder.append(object.getClass().getName()).append('@').append(Integer.toHexString(System.identityHashCode(object)));	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
private static String[] splitByCharacterType(final String str, final boolean camelCase) {	    if (str == null) {	        return null;	    }	    if (str.isEmpty()) {	        return ArrayUtils.EMPTY_STRING_ARRAY;	    }	    final char[] c = str.toCharArray();	    final List<String> list = new ArrayList<String>();	    int tokenStart = 0;	    int currentType = Character.getType(c[tokenStart]);	    for (int pos = tokenStart + 1; pos < c.length; pos++) {	        final int type = Character.getType(c[pos]);	        if (type == currentType) {	            continue;	        }	        if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {	            final int newTokenStart = pos - 1;	            if (newTokenStart != tokenStart) {	                list.add(new String(c, tokenStart, newTokenStart - tokenStart));	                tokenStart = newTokenStart;	            }	        } else {	            list.add(new String(c, tokenStart, pos - tokenStart));	            tokenStart = pos;	        }	        currentType = type;	    }	    list.add(new String(c, tokenStart, c.length - tokenStart));	    return list.toArray(new String[list.size()]);	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
protected String getFieldNameValueSeparator() {	    return fieldNameValueSeparator;	}
public static String overlay(final String str, String overlay, int start, int end) {	    if (str == null) {	        return null;	    }	    if (overlay == null) {	        overlay = EMPTY;	    }	    final int len = str.length();	    if (start < 0) {	        start = 0;	    }	    if (start > len) {	        start = len;	    }	    if (end < 0) {	        end = 0;	    }	    if (end > len) {	        end = len;	    }	    if (start > end) {	        final int temp = start;	        start = end;	        end = temp;	    }	    return new StringBuilder(len + start - end + overlay.length() + 1).append(str.substring(0, start)).append(overlay).append(str.substring(end)).toString();	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
@Override	public boolean markSupported() {	    return true;	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
public static String uncapitalize(final String str) {	    int strLen;	    if (str == null || (strLen = str.length()) == 0) {	        return str;	    }	    char firstChar = str.charAt(0);	    if (Character.isLowerCase(firstChar)) {	        return str;	    }	    return new StringBuilder(strLen).append(Character.toLowerCase(firstChar)).append(str.substring(1)).toString();	}
public synchronized int getAvailablePermits() {	    return getLimit() - getAcquireCount();	}
public static String abbreviateMiddle(final String str, final String middle, final int length) {	    if (isEmpty(str) || isEmpty(middle)) {	        return str;	    }	    if (length >= str.length() || length < middle.length() + 2) {	        return str;	    }	    final int targetSting = length - middle.length();	    final int startOffset = targetSting / 2 + targetSting % 2;	    final int endOffset = str.length() - targetSting / 2;	    final StringBuilder builder = new StringBuilder(length);	    builder.append(str.substring(0, startOffset));	    builder.append(middle);	    builder.append(str.substring(endOffset));	    return builder.toString();	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public Builder wrappedFactory(final ThreadFactory factory) {	    if (factory == null) {	        throw new NullPointerException("Wrapped ThreadFactory must not be null!");	    }	    wrappedFactory = factory;	    return this;	}
public static String trim(final String str) {	    return str == null ? null : str.trim();	}
public static String defaultString(final String str, final String defaultStr) {	    return str == null ? defaultStr : str;	}
public static StrMatcher trimMatcher() {	    return TRIM_MATCHER;	}
public static String removePattern(final String source, final String regex) {	    return replacePattern(source, regex, StringUtils.EMPTY);	}
public static <K, V> V putIfAbsent(final ConcurrentMap<K, V> map, final K key, final V value) {	    if (map == null) {	        return null;	    }	    final V result = map.putIfAbsent(key, value);	    return result != null ? result : value;	}
public boolean isEmpty() {	    return size == 0;	}
public boolean isIgnoreEmptyTokens() {	    return ignoreEmptyTokens;	}
public int size() {	    return size;	}
public static int reflectionHashCode(final Object object, final String... excludeFields) {	    return reflectionHashCode(17, 37, object, false, null, excludeFields);	}
public static <E extends Enum<E>> Map<String, E> getEnumMap(final Class<E> enumClass) {	    final Map<String, E> map = new LinkedHashMap<String, E>();	    for (final E e : enumClass.getEnumConstants()) {	        map.put(e.name(), e);	    }	    return map;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
@Deprecated	public static String chomp(final String str, final String separator) {	    return removeEnd(str, separator);	}
public static boolean startsWithAny(final CharSequence string, final CharSequence... searchStrings) {	    if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {	        return false;	    }	    for (final CharSequence searchString : searchStrings) {	        if (StringUtils.startsWith(string, searchString)) {	            return true;	        }	    }	    return false;	}
protected boolean isUseFieldNames() {	    return useFieldNames;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public static String deleteWhitespace(final String str) {	    if (isEmpty(str)) {	        return str;	    }	    final int sz = str.length();	    final char[] chs = new char[sz];	    int count = 0;	    for (int i = 0; i < sz; i++) {	        if (!Character.isWhitespace(str.charAt(i))) {	            chs[count++] = str.charAt(i);	        }	    }	    if (count == sz) {	        return str;	    }	    return new String(chs, 0, count);	}
public static String center(String str, final int size, String padStr) {	    if (str == null || size <= 0) {	        return str;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    str = leftPad(str, strLen + pads / 2, padStr);	    str = rightPad(str, size, padStr);	    return str;	}
@Override	public String getFormattedExceptionMessage(final String baseMessage) {	    return exceptionContext.getFormattedExceptionMessage(baseMessage);	}
protected String getContentStart() {	    return contentStart;	}
public static StrTokenizer getTSVInstance(final char[] input) {	    final StrTokenizer tok = getTSVClone();	    tok.reset(input);	    return tok;	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public static Number createNumber(final String str) throws NumberFormatException {	    if (str == null) {	        return null;	    }	    if (StringUtils.isBlank(str)) {	        throw new NumberFormatException("A blank string is not a valid number");	    }	    final String[] hex_prefixes = { "0x", "0X", "-0x", "-0X", "#", "-#" };	    int pfxLen = 0;	    for (final String pfx : hex_prefixes) {	        if (str.startsWith(pfx)) {	            pfxLen += pfx.length();	            break;	        }	    }	    if (pfxLen > 0) {	        final int hexDigits = str.length() - pfxLen;	        if (hexDigits > 16) {	            return createBigInteger(str);	        }	        if (hexDigits > 8) {	            return createLong(str);	        }	        return createInteger(str);	    }	    final char lastChar = str.charAt(str.length() - 1);	    String mant;	    String dec;	    String exp;	    final int decPos = str.indexOf('.');	    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;	    int numDecimals = 0;	    if (decPos > -1) {	        if (expPos > -1) {	            if (expPos < decPos || expPos > str.length()) {	                throw new NumberFormatException(str + " is not a valid number.");	            }	            dec = str.substring(decPos + 1, expPos);	        } else {	            dec = str.substring(decPos + 1);	        }	        mant = str.substring(0, decPos);	        numDecimals = dec.length();	    } else {	        if (expPos > -1) {	            if (expPos > str.length()) {	                throw new NumberFormatException(str + " is not a valid number.");	            }	            mant = str.substring(0, expPos);	        } else {	            mant = str;	        }	        dec = null;	    }	    if (!Character.isDigit(lastChar) && lastChar != '.') {	        if (expPos > -1 && expPos < str.length() - 1) {	            exp = str.substring(expPos + 1, str.length() - 1);	        } else {	            exp = null;	        }	        final String numeric = str.substring(0, str.length() - 1);	        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);	        switch(lastChar) {	            case 'l':	            case 'L':	                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {	                    try {	                        return createLong(numeric);	                    } catch (final NumberFormatException nfe) {	                    }	                    return createBigInteger(numeric);	                }	                throw new NumberFormatException(str + " is not a valid number.");	            case 'f':	            case 'F':	                try {	                    final Float f = NumberUtils.createFloat(numeric);	                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {	                        return f;	                    }	                } catch (final NumberFormatException nfe) {	                }	            case 'd':	            case 'D':	                try {	                    final Double d = NumberUtils.createDouble(numeric);	                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {	                        return d;	                    }	                } catch (final NumberFormatException nfe) {	                }	                try {	                    return createBigDecimal(numeric);	                } catch (final NumberFormatException e) {	                }	            default:	                throw new NumberFormatException(str + " is not a valid number.");	        }	    }	    if (expPos > -1 && expPos < str.length() - 1) {	        exp = str.substring(expPos + 1, str.length());	    } else {	        exp = null;	    }	    if (dec == null && exp == null) {	        try {	            return createInteger(str);	        } catch (final NumberFormatException nfe) {	        }	        try {	            return createLong(str);	        } catch (final NumberFormatException nfe) {	        }	        return createBigInteger(str);	    }	    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);	    try {	        if (numDecimals <= 7) {	            final Float f = createFloat(str);	            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {	                return f;	            }	        }	    } catch (final NumberFormatException nfe) {	    }	    try {	        if (numDecimals <= 16) {	            final Double d = createDouble(str);	            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {	                return d;	            }	        }	    } catch (final NumberFormatException nfe) {	    }	    return createBigDecimal(str);	}
public static int indexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = Integer.MAX_VALUE;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.indexOf(str, search, 0);	        if (tmp == INDEX_NOT_FOUND) {	            continue;	        }	        if (tmp < ret) {	            ret = tmp;	        }	    }	    return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;	}
@Override	public int length() {	    return size;	}
public boolean contains(final StrMatcher matcher) {	    return indexOf(matcher, 0) >= 0;	}
public static boolean isAlphanumeric(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetterOrDigit(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static String capitalize(final String str, final char... delimiters) {	    final int delimLen = delimiters == null ? -1 : delimiters.length;	    if (StringUtils.isEmpty(str) || delimLen == 0) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    boolean capitalizeNext = true;	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (isDelimiter(ch, delimiters)) {	            capitalizeNext = true;	        } else if (capitalizeNext) {	            buffer[i] = Character.toTitleCase(ch);	            capitalizeNext = false;	        }	    }	    return new String(buffer);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static <T> Range<T> between(final T fromInclusive, final T toInclusive, final Comparator<T> comparator) {	    return new Range<T>(fromInclusive, toInclusive, comparator);	}
public StrSubstitutor setVariableSuffixMatcher(final StrMatcher suffixMatcher) {	    if (suffixMatcher == null) {	        throw new IllegalArgumentException("Variable suffix matcher must not be null!");	    }	    this.suffixMatcher = suffixMatcher;	    return this;	}
public boolean isEquals() {	    return this.isEquals;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public static String abbreviate(final String str, int offset, final int maxWidth) {	    if (str == null) {	        return null;	    }	    if (maxWidth < 4) {	        throw new IllegalArgumentException("Minimum abbreviation width is 4");	    }	    if (str.length() <= maxWidth) {	        return str;	    }	    if (offset > str.length()) {	        offset = str.length();	    }	    if (str.length() - offset < maxWidth - 3) {	        offset = str.length() - (maxWidth - 3);	    }	    final String abrevMarker = "...";	    if (offset <= 4) {	        return str.substring(0, maxWidth - 3) + abrevMarker;	    }	    if (maxWidth < 7) {	        throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");	    }	    if (offset + maxWidth - 3 < str.length()) {	        return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);	    }	    return abrevMarker + str.substring(str.length() - (maxWidth - 3));	}
public static char toChar(final String str, final char defaultValue) {	    if (StringUtils.isEmpty(str)) {	        return defaultValue;	    }	    return str.charAt(0);	}
public static long intArrayToLong(final int[] src, final int srcPos, final long dstInit, final int dstPos, final int nInts) {	    if ((src.length == 0 && srcPos == 0) || 0 == nInts) {	        return dstInit;	    }	    if ((nInts - 1) * 32 + dstPos >= 64) {	        throw new IllegalArgumentException("(nInts-1)*32+dstPos is greather or equal to than 64");	    }	    long out = dstInit;	    int shift = 0;	    for (int i = 0; i < nInts; i++) {	        shift = i * 32 + dstPos;	        final long bits = ((0xffffffffL & src[i + srcPos]) << shift);	        final long mask = 0xffffffffL << shift;	        out = (out & ~mask) | bits;	    }	    return out;	}
public boolean isSuccessful() {	    return exceptions.isEmpty();	}
public StrBuilder appendWithSeparators(final Iterator<?> it, String separator) {	    if (it != null) {	        separator = ObjectUtils.toString(separator);	        while (it.hasNext()) {	            append(it.next());	            if (it.hasNext()) {	                append(separator);	            }	        }	    }	    return this;	}
public static Object readField(final Object target, final String fieldName, final boolean forceAccess) throws IllegalAccessException {	    if (target == null) {	        throw new IllegalArgumentException("target object must not be null");	    }	    final Class<?> cls = target.getClass();	    final Field field = getField(cls, fieldName, forceAccess);	    if (field == null) {	        throw new IllegalArgumentException("Cannot locate field " + fieldName + " on " + cls);	    }	    return readField(field, target);	}
public static Fraction getReducedFraction(int numerator, int denominator) {	    if (denominator == 0) {	        throw new ArithmeticException("The denominator must not be zero");	    }	    if (numerator == 0) {	        return ZERO;	    }	    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {	        numerator /= 2;	        denominator /= 2;	    }	    if (denominator < 0) {	        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {	            throw new ArithmeticException("overflow: can't negate");	        }	        numerator = -numerator;	        denominator = -denominator;	    }	    final int gcd = greatestCommonDivisor(numerator, denominator);	    numerator /= gcd;	    denominator /= gcd;	    return new Fraction(numerator, denominator);	}
public static CharRange is(final char ch) {	    return new CharRange(ch, ch, false);	}
public static int indexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = Integer.MAX_VALUE;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.indexOf(str, search, 0);	        if (tmp == INDEX_NOT_FOUND) {	            continue;	        }	        if (tmp < ret) {	            ret = tmp;	        }	    }	    return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;	}
protected StringBuffer applyRules(final Calendar calendar, final StringBuffer buf) {	    for (final Rule rule : mRules) {	        rule.appendTo(buf, calendar);	    }	    return buf;	}
public static short binaryToShort(final boolean[] src, final int srcPos, final short dstInit, final int dstPos, final int nBools) {	    if ((src.length == 0 && srcPos == 0) || 0 == nBools) {	        return dstInit;	    }	    if (nBools - 1 + dstPos >= 16) {	        throw new IllegalArgumentException("nBools-1+dstPos is greather or equal to than 16");	    }	    short out = dstInit;	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + dstPos;	        final int bits = (src[i + srcPos] ? 1 : 0) << shift;	        final int mask = 0x1 << shift;	        out = (short) ((out & ~mask) | bits);	    }	    return out;	}
public static byte[] serialize(final Serializable obj) {	    final ByteArrayOutputStream baos = new ByteArrayOutputStream(512);	    serialize(obj, baos);	    return baos.toByteArray();	}
public static int reflectionCompare(final Object lhs, final Object rhs, final boolean compareTransients, final Class<?> reflectUpToClass, final String... excludeFields) {	    if (lhs == rhs) {	        return 0;	    }	    if (lhs == null || rhs == null) {	        throw new NullPointerException();	    }	    Class<?> lhsClazz = lhs.getClass();	    if (!lhsClazz.isInstance(rhs)) {	        throw new ClassCastException();	    }	    final CompareToBuilder compareToBuilder = new CompareToBuilder();	    reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);	    while (lhsClazz.getSuperclass() != null && lhsClazz != reflectUpToClass) {	        lhsClazz = lhsClazz.getSuperclass();	        reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);	    }	    return compareToBuilder.toComparison();	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
@Override	public int length() {	    return size;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static String removeEndIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (endsWithIgnoreCase(str, remove)) {	        return str.substring(0, str.length() - remove.length());	    }	    return str;	}
public static String trim(final String str) {	    return str == null ? null : str.trim();	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public StrBuilder setCharAt(final int index, final char ch) {	    if (index < 0 || index >= length()) {	        throw new StringIndexOutOfBoundsException(index);	    }	    buffer[index] = ch;	    return this;	}
@Override	public ContextedRuntimeException setContextValue(final String label, final Object value) {	    exceptionContext.setContextValue(label, value);	    return this;	}
public boolean isEmpty() {	    return size == 0;	}
public StrBuilder setNullText(String nullText) {	    if (nullText != null && nullText.isEmpty()) {	        nullText = null;	    }	    this.nullText = nullText;	    return this;	}
public static Fraction getFraction(String str) {	    if (str == null) {	        throw new IllegalArgumentException("The string must not be null");	    }	    int pos = str.indexOf('.');	    if (pos >= 0) {	        return getFraction(Double.parseDouble(str));	    }	    pos = str.indexOf(' ');	    if (pos > 0) {	        final int whole = Integer.parseInt(str.substring(0, pos));	        str = str.substring(pos + 1);	        pos = str.indexOf('/');	        if (pos < 0) {	            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");	        } else {	            final int numer = Integer.parseInt(str.substring(0, pos));	            final int denom = Integer.parseInt(str.substring(pos + 1));	            return getFraction(whole, numer, denom);	        }	    }	    pos = str.indexOf('/');	    if (pos < 0) {	        return getFraction(Integer.parseInt(str), 1);	    } else {	        final int numer = Integer.parseInt(str.substring(0, pos));	        final int denom = Integer.parseInt(str.substring(pos + 1));	        return getFraction(numer, denom);	    }	}
public int capacity() {	    return buffer.length;	}
public static String replaceChars(final String str, final String searchChars, String replaceChars) {	    if (isEmpty(str) || isEmpty(searchChars)) {	        return str;	    }	    if (replaceChars == null) {	        replaceChars = EMPTY;	    }	    boolean modified = false;	    final int replaceCharsLength = replaceChars.length();	    final int strLength = str.length();	    final StringBuilder buf = new StringBuilder(strLength);	    for (int i = 0; i < strLength; i++) {	        final char ch = str.charAt(i);	        final int index = searchChars.indexOf(ch);	        if (index >= 0) {	            modified = true;	            if (index < replaceCharsLength) {	                buf.append(replaceChars.charAt(index));	            }	        } else {	            buf.append(ch);	        }	    }	    if (modified) {	        return buf.toString();	    }	    return str;	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
public static boolean containsNone(final CharSequence cs, final String invalidChars) {	    if (cs == null || invalidChars == null) {	        return true;	    }	    return containsNone(cs, invalidChars.toCharArray());	}
public static boolean containsWhitespace(final CharSequence seq) {	    if (isEmpty(seq)) {	        return false;	    }	    final int strLen = seq.length();	    for (int i = 0; i < strLen; i++) {	        if (Character.isWhitespace(seq.charAt(i))) {	            return true;	        }	    }	    return false;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public boolean isTrue() {	    return value == true;	}
public static boolean containsOnly(final CharSequence cs, final String validChars) {	    if (cs == null || validChars == null) {	        return false;	    }	    return containsOnly(cs, validChars.toCharArray());	}
public HashCodeBuilder append(final short[] array) {	    if (array == null) {	        iTotal = iTotal * iConstant;	    } else {	        for (final short element : array) {	            append(element);	        }	    }	    return this;	}
public static String random(final int count, final char... chars) {	    if (chars == null) {	        return random(count, 0, 0, false, false, null, RANDOM);	    }	    return random(count, 0, chars.length, false, false, chars, RANDOM);	}
public static String getRootCauseMessage(final Throwable th) {	    Throwable root = ExceptionUtils.getRootCause(th);	    root = root == null ? th : root;	    return getMessage(root);	}
public boolean contains(final char ch) {	    for (final CharRange range : set) {	        if (range.contains(ch)) {	            return true;	        }	    }	    return false;	}
public static boolean containsOnly(final CharSequence cs, final String validChars) {	    if (cs == null || validChars == null) {	        return false;	    }	    return containsOnly(cs, validChars.toCharArray());	}
protected String getContentEnd() {	    return contentEnd;	}
public synchronized boolean start() {	    if (!isStarted()) {	        ExecutorService tempExec;	        executor = getExternalExecutor();	        if (executor == null) {	            executor = tempExec = createExecutor();	        } else {	            tempExec = null;	        }	        future = executor.submit(createTask(tempExec));	        return true;	    }	    return false;	}
public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {	    if ((src.length == 0 && srcPos == 0) || 0 == nBools) {	        return dstInit;	    }	    if (nBools - 1 + dstPos >= 32) {	        throw new IllegalArgumentException("nBools-1+dstPos is greather or equal to than 32");	    }	    int out = dstInit;	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + dstPos;	        final int bits = (src[i + srcPos] ? 1 : 0) << shift;	        final int mask = 0x1 << shift;	        out = (out & ~mask) | bits;	    }	    return out;	}
public int capacity() {	    return buffer.length;	}
@Deprecated	public static String chomp(final String str, final String separator) {	    return removeEnd(str, separator);	}
public static Type[] normalizeUpperBounds(final Type[] bounds) {	    if (bounds.length < 2) {	        return bounds;	    }	    final Set<Type> types = new HashSet<Type>(bounds.length);	    for (final Type type1 : bounds) {	        boolean subtypeFound = false;	        for (final Type type2 : bounds) {	            if (type1 != type2 && isAssignable(type2, type1, null)) {	                subtypeFound = true;	                break;	            }	        }	        if (!subtypeFound) {	            types.add(type1);	        }	    }	    return types.toArray(new Type[types.size()]);	}
@Override	public void setFormatByArgumentIndex(final int argumentIndex, final Format newFormat) {	    throw new UnsupportedOperationException();	}
public static long binaryToLong(final boolean[] src, final int srcPos, final long dstInit, final int dstPos, final int nBools) {	    if ((src.length == 0 && srcPos == 0) || 0 == nBools) {	        return dstInit;	    }	    if (nBools - 1 + dstPos >= 64) {	        throw new IllegalArgumentException("nBools-1+dstPos is greather or equal to than 64");	    }	    long out = dstInit;	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + dstPos;	        final long bits = (src[i + srcPos] ? 1L : 0) << shift;	        final long mask = 0x1L << shift;	        out = (out & ~mask) | bits;	    }	    return out;	}
@Override	public Date parse(final String source, final ParsePosition pos) {	    return parser.parse(source, pos);	}
@Override	public Object getFirstContextValue(final String label) {	    return this.exceptionContext.getFirstContextValue(label);	}
public int size() {	    return size;	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
@Override	public Date parse(final String source, final ParsePosition pos) {	    return parser.parse(source, pos);	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static boolean isWhitespace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isWhitespace(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static boolean isFalse(final Boolean bool) {	    return Boolean.FALSE.equals(bool);	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static String getRootCauseMessage(final Throwable th) {	    Throwable root = ExceptionUtils.getRootCause(th);	    root = root == null ? th : root;	    return getMessage(root);	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static Fraction getFraction(String str) {	    if (str == null) {	        throw new IllegalArgumentException("The string must not be null");	    }	    int pos = str.indexOf('.');	    if (pos >= 0) {	        return getFraction(Double.parseDouble(str));	    }	    pos = str.indexOf(' ');	    if (pos > 0) {	        final int whole = Integer.parseInt(str.substring(0, pos));	        str = str.substring(pos + 1);	        pos = str.indexOf('/');	        if (pos < 0) {	            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");	        } else {	            final int numer = Integer.parseInt(str.substring(0, pos));	            final int denom = Integer.parseInt(str.substring(pos + 1));	            return getFraction(whole, numer, denom);	        }	    }	    pos = str.indexOf('/');	    if (pos < 0) {	        return getFraction(Integer.parseInt(str), 1);	    } else {	        final int numer = Integer.parseInt(str.substring(0, pos));	        final int denom = Integer.parseInt(str.substring(pos + 1));	        return getFraction(numer, denom);	    }	}
public static void handleCauseUnchecked(final ExecutionException ex) {	    final ConcurrentRuntimeException crex = extractCauseUnchecked(ex);	    if (crex != null) {	        throw crex;	    }	}
@Override	public DefaultExceptionContext setContextValue(final String label, final Object value) {	    for (final Iterator<Pair<String, Object>> iter = contextValues.iterator(); iter.hasNext(); ) {	        final Pair<String, Object> p = iter.next();	        if (StringUtils.equals(label, p.getKey())) {	            iter.remove();	        }	    }	    addContextValue(label, value);	    return this;	}
protected String getSizeEndText() {	    return sizeEndText;	}
@Override	public boolean markSupported() {	    return true;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public int getProperWhole() {	    return numerator / denominator;	}
public static char binaryToHexDigit(final boolean[] src, final int srcPos) {	    if (src.length == 0) {	        throw new IllegalArgumentException("Cannot convert an empty array.");	    }	    if (src.length > srcPos + 3 && src[srcPos + 3]) {	        if (src.length > srcPos + 2 && src[srcPos + 2]) {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'f';	                } else {	                    return 'e';	                }	            } else {	                if (src[srcPos]) {	                    return 'd';	                } else {	                    return 'c';	                }	            }	        } else {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'b';	                } else {	                    return 'a';	                }	            } else {	                if (src[srcPos]) {	                    return '9';	                } else {	                    return '8';	                }	            }	        }	    } else {	        if (src.length > srcPos + 2 && src[srcPos + 2]) {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return '7';	                } else {	                    return '6';	                }	            } else {	                if (src[srcPos]) {	                    return '5';	                } else {	                    return '4';	                }	            }	        } else {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return '3';	                } else {	                    return '2';	                }	            } else {	                if (src[srcPos]) {	                    return '1';	                } else {	                    return '0';	                }	            }	        }	    }	}
public static String randomAlphabetic(final int count) {	    return random(count, true, false);	}
@Override	public R getRight() {	    return right;	}
public static String toStringYesNo(final boolean bool) {	    return toString(bool, "yes", "no");	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
@Override	public int length() {	    return size;	}
public static String substringAfter(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (separator == null) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
static void register(final Object lhs, final Object rhs) {	    synchronized (EqualsBuilder.class) {	        if (getRegistry() == null) {	            REGISTRY.set(new HashSet<Pair<IDKey, IDKey>>());	        }	    }	    final Set<Pair<IDKey, IDKey>> registry = getRegistry();	    final Pair<IDKey, IDKey> pair = getRegisterPair(lhs, rhs);	    registry.add(pair);	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
public static String substringBefore(final String str, final String separator) {	    if (isEmpty(str) || separator == null) {	        return str;	    }	    if (separator.isEmpty()) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public static <T> void exclusiveBetween(final T start, final T end, final Comparable<T> value, final String message, final Object... values) {	    if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0) {	        throw new IllegalArgumentException(String.format(message, values));	    }	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
@Override	public float floatValue() {	    return (float) numerator / (float) denominator;	}
public static String substringAfter(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (separator == null) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
static boolean isAccessible(final Member m) {	    return m != null && Modifier.isPublic(m.getModifiers()) && !m.isSynthetic();	}
public static String removeStart(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (str.startsWith(remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public static boolean toBoolean(final String str, final String trueString, final String falseString) {	    if (str == trueString) {	        return true;	    } else if (str == falseString) {	        return false;	    } else if (str != null) {	        if (str.equals(trueString)) {	            return true;	        } else if (str.equals(falseString)) {	            return false;	        }	    }	    throw new IllegalArgumentException("The String did not match either specified value");	}
public static float toFloat(final String str, final float defaultValue) {	    if (str == null) {	        return defaultValue;	    }	    try {	        return Float.parseFloat(str);	    } catch (final NumberFormatException nfe) {	        return defaultValue;	    }	}
public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {	    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {	        return false;	    }	    return true;	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public int size() {	    return size;	}
public static String removeEndIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (endsWithIgnoreCase(str, remove)) {	        return str.substring(0, str.length() - remove.length());	    }	    return str;	}
public static String[] splitByWholeSeparator(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, false);	}
public int getDenominator() {	    return denominator;	}
public boolean isEmpty() {	    return size == 0;	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public static int lastOrdinalIndexOf(final CharSequence str, final CharSequence searchStr, final int ordinal) {	    return ordinalIndexOf(str, searchStr, ordinal, true);	}
public static String formatUTC(final Date date, final String pattern, final Locale locale) {	    return format(date, pattern, UTC_TIME_ZONE, locale);	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
@Override	public String next() {	    if (hasNext()) {	        return tokens[tokenPos++];	    }	    throw new NoSuchElementException();	}
public static String right(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(str.length() - len);	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
public static int hexDigitMsb0ToInt(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return 0x0;	        case '1':	            return 0x8;	        case '2':	            return 0x4;	        case '3':	            return 0xC;	        case '4':	            return 0x2;	        case '5':	            return 0xA;	        case '6':	            return 0x6;	        case '7':	            return 0xE;	        case '8':	            return 0x1;	        case '9':	            return 0x9;	        case 'a':	        case 'A':	            return 0x5;	        case 'b':	        case 'B':	            return 0xD;	        case 'c':	        case 'C':	            return 0x3;	        case 'd':	        case 'D':	            return 0xB;	        case 'e':	        case 'E':	            return 0x7;	        case 'f':	        case 'F':	            return 0xF;	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public EqualsBuilder appendSuper(final boolean superEquals) {	    if (isEquals == false) {	        return this;	    }	    isEquals = superEquals;	    return this;	}
@Override	public boolean equals(final Object obj) {	    if (obj == this) {	        return true;	    }	    if (obj instanceof Triple<?, ?, ?>) {	        final Triple<?, ?, ?> other = (Triple<?, ?, ?>) obj;	        return ObjectUtils.equals(getLeft(), other.getLeft()) && ObjectUtils.equals(getMiddle(), other.getMiddle()) && ObjectUtils.equals(getRight(), other.getRight());	    }	    return false;	}
public int capacity() {	    return buffer.length;	}
@Override	protected List<String> tokenize(final char[] chars, final int offset, final int count) {	    if (chars == null) {	        return super.tokenize(StrBuilder.this.buffer, 0, StrBuilder.this.size());	    }	    return super.tokenize(chars, offset, count);	}
public static StrMatcher stringMatcher(final String str) {	    if (StringUtils.isEmpty(str)) {	        return NONE_MATCHER;	    }	    return new StringMatcher(str);	}
@Override	public int translate(final CharSequence input, final int index, final Writer out) throws IOException {	    if (input.charAt(index) == '\\' && index + 1 < input.length() && input.charAt(index + 1) == 'u') {	        int i = 2;	        while (index + i < input.length() && input.charAt(index + i) == 'u') {	            i++;	        }	        if (index + i < input.length() && input.charAt(index + i) == '+') {	            i++;	        }	        if (index + i + 4 <= input.length()) {	            final CharSequence unicode = input.subSequence(index + i, index + i + 4);	            try {	                final int value = Integer.parseInt(unicode.toString(), 16);	                out.write((char) value);	            } catch (final NumberFormatException nfe) {	                throw new IllegalArgumentException("Unable to parse unicode value: " + unicode, nfe);	            }	            return i + 4;	        } else {	            throw new IllegalArgumentException("Less than 4 hex digits in unicode value: '" + input.subSequence(index, input.length()) + "' due to end of CharSequence");	        }	    }	    return 0;	}
public static boolean reflectionEquals(final Object lhs, final Object rhs, final boolean testTransients, final Class<?> reflectUpToClass, final String... excludeFields) {	    if (lhs == rhs) {	        return true;	    }	    if (lhs == null || rhs == null) {	        return false;	    }	    final Class<?> lhsClass = lhs.getClass();	    final Class<?> rhsClass = rhs.getClass();	    Class<?> testClass;	    if (lhsClass.isInstance(rhs)) {	        testClass = lhsClass;	        if (!rhsClass.isInstance(lhs)) {	            testClass = rhsClass;	        }	    } else if (rhsClass.isInstance(lhs)) {	        testClass = rhsClass;	        if (!lhsClass.isInstance(rhs)) {	            testClass = lhsClass;	        }	    } else {	        return false;	    }	    final EqualsBuilder equalsBuilder = new EqualsBuilder();	    try {	        reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);	        while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {	            testClass = testClass.getSuperclass();	            reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);	        }	    } catch (final IllegalArgumentException e) {	        return false;	    }	    return equalsBuilder.isEquals();	}
public StrBuilder appendAll(final Iterator<?> it) {	    if (it != null) {	        while (it.hasNext()) {	            append(it.next());	        }	    }	    return this;	}
@Deprecated	public static Throwable getCause(final Throwable throwable, String[] methodNames) {	    if (throwable == null) {	        return null;	    }	    if (methodNames == null) {	        methodNames = CAUSE_METHOD_NAMES;	    }	    for (final String methodName : methodNames) {	        if (methodName != null) {	            final Throwable cause = getCauseUsingMethodName(throwable, methodName);	            if (cause != null) {	                return cause;	            }	        }	    }	    return null;	}
public static String getStackTrace(final Throwable throwable) {	    final StringWriter sw = new StringWriter();	    final PrintWriter pw = new PrintWriter(sw, true);	    throwable.printStackTrace(pw);	    return sw.getBuffer().toString();	}
public String getNewLineText() {	    return newLine;	}
@Override	public T get(final long timeout, final TimeUnit unit) {	    return value;	}
private static boolean endsWith(final CharSequence str, final CharSequence suffix, final boolean ignoreCase) {	    if (str == null || suffix == null) {	        return str == null && suffix == null;	    }	    if (suffix.length() > str.length()) {	        return false;	    }	    final int strOffset = str.length() - suffix.length();	    return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());	}
public static <E extends Enum<E>> long generateBitVector(final Class<E> enumClass, final E... values) {	    Validate.noNullElements(values);	    return generateBitVector(enumClass, Arrays.<E>asList(values));	}
public synchronized void shutdown() {	    if (!shutdown) {	        if (ownExecutor) {	            getExecutorService().shutdownNow();	        }	        if (task != null) {	            task.cancel(false);	        }	        shutdown = true;	    }	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public String substring(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    return new String(buffer, startIndex, endIndex - startIndex);	}
public static int indexOfAnyBut(final CharSequence seq, final CharSequence searchChars) {	    if (isEmpty(seq) || isEmpty(searchChars)) {	        return INDEX_NOT_FOUND;	    }	    final int strLen = seq.length();	    for (int i = 0; i < strLen; i++) {	        final char ch = seq.charAt(i);	        final boolean chFound = CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0;	        if (i + 1 < strLen && Character.isHighSurrogate(ch)) {	            final char ch2 = seq.charAt(i + 1);	            if (chFound && CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0) {	                return i;	            }	        } else {	            if (!chFound) {	                return i;	            }	        }	    }	    return INDEX_NOT_FOUND;	}
@Deprecated	public static String chomp(final String str, final String separator) {	    return removeEnd(str, separator);	}
protected boolean isArrayContentDetail() {	    return arrayContentDetail;	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public static String trimToNull(final String str) {	    final String ts = trim(str);	    return isEmpty(ts) ? null : ts;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public void subtract(final Number operand) {	    this.value -= operand.doubleValue();	}
public static boolean containsOnly(final CharSequence cs, final String validChars) {	    if (cs == null || validChars == null) {	        return false;	    }	    return containsOnly(cs, validChars.toCharArray());	}
public static String appendIfMissing(final String str, final CharSequence suffix, final CharSequence... suffixes) {	    return appendIfMissing(str, suffix, false, suffixes);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
protected void appendDetail(final StringBuffer buffer, final String fieldName, final boolean[] array) {	    buffer.append(arrayStart);	    for (int i = 0; i < array.length; i++) {	        if (i > 0) {	            buffer.append(arraySeparator);	        }	        appendDetail(buffer, fieldName, array[i]);	    }	    buffer.append(arrayEnd);	}
public static final String escapeEcmaScript(final String input) {	    return ESCAPE_ECMASCRIPT.translate(input);	}
public static float max(final float a, final float b) {	    if (Float.isNaN(a)) {	        return b;	    } else if (Float.isNaN(b)) {	        return a;	    } else {	        return Math.max(a, b);	    }	}
protected String getSummaryObjectStartText() {	    return summaryObjectStartText;	}
public static String substringBetween(final String str, final String open, final String close) {	    if (str == null || open == null || close == null) {	        return null;	    }	    final int start = str.indexOf(open);	    if (start != INDEX_NOT_FOUND) {	        final int end = str.indexOf(close, start + open.length());	        if (end != INDEX_NOT_FOUND) {	            return str.substring(start + open.length(), end);	        }	    }	    return null;	}
public static String removeStart(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (str.startsWith(remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public static boolean isAlphanumericSpace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetterOrDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {	            return false;	        }	    }	    return true;	}
public static void handleCauseUnchecked(final ExecutionException ex) {	    final ConcurrentRuntimeException crex = extractCauseUnchecked(ex);	    if (crex != null) {	        throw crex;	    }	}
protected int validateRange(final int startIndex, int endIndex) {	    if (startIndex < 0) {	        throw new StringIndexOutOfBoundsException(startIndex);	    }	    if (endIndex > size) {	        endIndex = size;	    }	    if (startIndex > endIndex) {	        throw new StringIndexOutOfBoundsException("end < start");	    }	    return endIndex;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
public StrBuilder clear() {	    size = 0;	    return this;	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
protected String getArraySeparator() {	    return arraySeparator;	}
public StrBuilder deleteFirst(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, 1);	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
public static int hashCode(final Object obj) {	    return obj == null ? 0 : obj.hashCode();	}
public boolean isEmpty() {	    return size == 0;	}
@Override	public int intValue() {	    return (int) value;	}
public boolean isNegated() {	    return negated;	}
public int capacity() {	    return buffer.length;	}
public int getDenominator() {	    return denominator;	}
public static <T> T invokeExactConstructor(final Class<T> cls, Object[] args, Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {	    if (args == null) {	        args = ArrayUtils.EMPTY_OBJECT_ARRAY;	    }	    if (parameterTypes == null) {	        parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;	    }	    final Constructor<T> ctor = getAccessibleConstructor(cls, parameterTypes);	    if (ctor == null) {	        throw new NoSuchMethodException("No such accessible constructor on object: " + cls.getName());	    }	    return ctor.newInstance(args);	}
public static boolean isWhitespace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isWhitespace(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public static boolean containsOnly(final CharSequence cs, final String validChars) {	    if (cs == null || validChars == null) {	        return false;	    }	    return containsOnly(cs, validChars.toCharArray());	}
public String midString(int index, final int length) {	    if (index < 0) {	        index = 0;	    }	    if (length <= 0 || index >= size) {	        return "";	    }	    if (size <= index + length) {	        return new String(buffer, index, size - index);	    }	    return new String(buffer, index, length);	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static <T extends CharSequence> T notEmpty(final T chars) {	    return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);	}
public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle, final TimeZone timeZone, final Locale locale) {	    return cache.getDateTimeInstance(dateStyle, timeStyle, timeZone, locale);	}
public Builder uncaughtExceptionHandler(final Thread.UncaughtExceptionHandler handler) {	    if (handler == null) {	        throw new NullPointerException("Uncaught exception handler must not be null!");	    }	    exceptionHandler = handler;	    return this;	}
public static Class<?> wrapperToPrimitive(final Class<?> cls) {	    return wrapperPrimitiveMap.get(cls);	}
public static <E extends Enum<E>> long generateBitVector(final Class<E> enumClass, final E... values) {	    Validate.noNullElements(values);	    return generateBitVector(enumClass, Arrays.<E>asList(values));	}
public int lastIndexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex >= size ? size - 1 : startIndex);	    if (matcher == null || startIndex < 0) {	        return -1;	    }	    final char[] buf = buffer;	    final int endIndex = startIndex + 1;	    for (int i = startIndex; i >= 0; i--) {	        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {	            return i;	        }	    }	    return -1;	}
@Override	public String toString() {	    return new String(buffer, 0, size);	}
public boolean isFalse() {	    return value == false;	}
public static Date ceiling(final Object date, final int field) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    if (date instanceof Date) {	        return ceiling((Date) date, field);	    } else if (date instanceof Calendar) {	        return ceiling((Calendar) date, field).getTime();	    } else {	        throw new ClassCastException("Could not find ceiling of for type: " + date.getClass());	    }	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
public boolean isEmpty() {	    return size == 0;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public String getNewLineText() {	    return newLine;	}
@Override	public String toString() {	    if (this.getObject() == null) {	        return this.getStyle().getNullText();	    }	    Class<?> clazz = this.getObject().getClass();	    this.appendFieldsIn(clazz);	    while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {	        clazz = clazz.getSuperclass();	        this.appendFieldsIn(clazz);	    }	    return super.toString();	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public boolean isEmpty() {	    return size == 0;	}
@Override	public int length() {	    return size;	}
public int capacity() {	    return buffer.length;	}
private static boolean startsWith(final CharSequence str, final CharSequence prefix, final boolean ignoreCase) {	    if (str == null || prefix == null) {	        return str == null && prefix == null;	    }	    if (prefix.length() > str.length()) {	        return false;	    }	    return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());	}
public int toComparison() {	    return comparison;	}
public ToStringStyle getStyle() {	    return style;	}
public static void isTrue(final boolean expression) {	    if (expression == false) {	        throw new IllegalArgumentException(DEFAULT_IS_TRUE_EX_MESSAGE);	    }	}
public static String intToHex(final int src, final int srcPos, final String dstInit, final int dstPos, final int nHexs) {	    if (0 == nHexs) {	        return dstInit;	    }	    if ((nHexs - 1) * 4 + srcPos >= 32) {	        throw new IllegalArgumentException("(nHexs-1)*4+srcPos is greather or equal to than 32");	    }	    final StringBuilder sb = new StringBuilder(dstInit);	    int shift = 0;	    int append = sb.length();	    for (int i = 0; i < nHexs; i++) {	        shift = i * 4 + srcPos;	        final int bits = 0xF & (src >> shift);	        if (dstPos + i == append) {	            ++append;	            sb.append(intToHexDigit(bits));	        } else {	            sb.setCharAt(dstPos + i, intToHexDigit(bits));	        }	    }	    return sb.toString();	}
public static String center(String str, final int size, String padStr) {	    if (str == null || size <= 0) {	        return str;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    str = leftPad(str, strLen + pads / 2, padStr);	    str = rightPad(str, size, padStr);	    return str;	}
public boolean isEmpty() {	    return size == 0;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static char binaryToHexDigit(final boolean[] src, final int srcPos) {	    if (src.length == 0) {	        throw new IllegalArgumentException("Cannot convert an empty array.");	    }	    if (src.length > srcPos + 3 && src[srcPos + 3]) {	        if (src.length > srcPos + 2 && src[srcPos + 2]) {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'f';	                } else {	                    return 'e';	                }	            } else {	                if (src[srcPos]) {	                    return 'd';	                } else {	                    return 'c';	                }	            }	        } else {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'b';	                } else {	                    return 'a';	                }	            } else {	                if (src[srcPos]) {	                    return '9';	                } else {	                    return '8';	                }	            }	        }	    } else {	        if (src.length > srcPos + 2 && src[srcPos + 2]) {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return '7';	                } else {	                    return '6';	                }	            } else {	                if (src[srcPos]) {	                    return '5';	                } else {	                    return '4';	                }	            }	        } else {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return '3';	                } else {	                    return '2';	                }	            } else {	                if (src[srcPos]) {	                    return '1';	                } else {	                    return '0';	                }	            }	        }	    }	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static final String escapeHtml4(final String input) {	    return ESCAPE_HTML4.translate(input);	}
public static final String escapeHtml3(final String input) {	    return ESCAPE_HTML3.translate(input);	}
public StrBuilder appendFixedWidthPadRight(final int value, final int width, final char padChar) {	    return appendFixedWidthPadRight(String.valueOf(value), width, padChar);	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
@Override	public T call() throws Exception {	    try {	        return initialize();	    } finally {	        if (execFinally != null) {	            execFinally.shutdown();	        }	    }	}
public static String reverse(final String str) {	    if (str == null) {	        return null;	    }	    return new StringBuilder(str).reverse().toString();	}
public int size() {	    return size;	}
public static char toChar(final String str, final char defaultValue) {	    if (StringUtils.isEmpty(str)) {	        return defaultValue;	    }	    return str.charAt(0);	}
public static boolean[] clone(final boolean[] array) {	    if (array == null) {	        return null;	    }	    return array.clone();	}
public boolean isEmpty() {	    return size == 0;	}
public boolean isEquals() {	    return this.isEquals;	}
public static String formatPeriod(final long startMillis, final long endMillis, final String format, final boolean padWithZeros, final TimeZone timezone) {	    final Token[] tokens = lexx(format);	    final Calendar start = Calendar.getInstance(timezone);	    start.setTime(new Date(startMillis));	    final Calendar end = Calendar.getInstance(timezone);	    end.setTime(new Date(endMillis));	    int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);	    int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);	    int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);	    int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);	    int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);	    int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);	    int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);	    while (milliseconds < 0) {	        milliseconds += 1000;	        seconds -= 1;	    }	    while (seconds < 0) {	        seconds += 60;	        minutes -= 1;	    }	    while (minutes < 0) {	        minutes += 60;	        hours -= 1;	    }	    while (hours < 0) {	        hours += 24;	        days -= 1;	    }	    if (Token.containsTokenWithValue(tokens, M)) {	        while (days < 0) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            months -= 1;	            start.add(Calendar.MONTH, 1);	        }	        while (months < 0) {	            months += 12;	            years -= 1;	        }	        if (!Token.containsTokenWithValue(tokens, y) && years != 0) {	            while (years != 0) {	                months += 12 * years;	                years = 0;	            }	        }	    } else {	        if (!Token.containsTokenWithValue(tokens, y)) {	            int target = end.get(Calendar.YEAR);	            if (months < 0) {	                target -= 1;	            }	            while (start.get(Calendar.YEAR) != target) {	                days += start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);	                if (start instanceof GregorianCalendar && start.get(Calendar.MONTH) == Calendar.FEBRUARY && start.get(Calendar.DAY_OF_MONTH) == 29) {	                    days += 1;	                }	                start.add(Calendar.YEAR, 1);	                days += start.get(Calendar.DAY_OF_YEAR);	            }	            years = 0;	        }	        while (start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            start.add(Calendar.MONTH, 1);	        }	        months = 0;	        while (days < 0) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            months -= 1;	            start.add(Calendar.MONTH, 1);	        }	    }	    if (!Token.containsTokenWithValue(tokens, d)) {	        hours += 24 * days;	        days = 0;	    }	    if (!Token.containsTokenWithValue(tokens, H)) {	        minutes += 60 * hours;	        hours = 0;	    }	    if (!Token.containsTokenWithValue(tokens, m)) {	        seconds += 60 * minutes;	        minutes = 0;	    }	    if (!Token.containsTokenWithValue(tokens, s)) {	        milliseconds += 1000 * seconds;	        seconds = 0;	    }	    return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);	}
@Override	public boolean markSupported() {	    return true;	}
public static Map<Object, Object> toMap(final Object[] array) {	    if (array == null) {	        return null;	    }	    final Map<Object, Object> map = new HashMap<Object, Object>((int) (array.length * 1.5));	    for (int i = 0; i < array.length; i++) {	        final Object object = array[i];	        if (object instanceof Map.Entry<?, ?>) {	            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) object;	            map.put(entry.getKey(), entry.getValue());	        } else if (object instanceof Object[]) {	            final Object[] entry = (Object[]) object;	            if (entry.length < 2) {	                throw new IllegalArgumentException("Array element " + i + ", '" + object + "', has a length less than 2");	            }	            map.put(entry[0], entry[1]);	        } else {	            throw new IllegalArgumentException("Array element " + i + ", '" + object + "', is neither of type Map.Entry nor an Array");	        }	    }	    return map;	}
public String getNullText() {	    return nullText;	}
@Override	public String toString() {	    return new String(buffer, 0, size);	}
public static void matchesPattern(final CharSequence input, final String pattern, final String message, final Object... values) {	    if (Pattern.matches(pattern, input) == false) {	        throw new IllegalArgumentException(String.format(message, values));	    }	}
@Override	public long longValue() {	    return value;	}
static Pair<IDKey, IDKey> getRegisterPair(final Object lhs, final Object rhs) {	    final IDKey left = new IDKey(lhs);	    final IDKey right = new IDKey(rhs);	    return Pair.of(left, right);	}
public static String chop(final String str) {	    if (str == null) {	        return null;	    }	    final int strLen = str.length();	    if (strLen < 2) {	        return EMPTY;	    }	    final int lastIdx = strLen - 1;	    final String ret = str.substring(0, lastIdx);	    final char last = str.charAt(lastIdx);	    if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {	        return ret.substring(0, lastIdx - 1);	    }	    return ret;	}
public static void handleCauseUnchecked(final ExecutionException ex) {	    final ConcurrentRuntimeException crex = extractCauseUnchecked(ex);	    if (crex != null) {	        throw crex;	    }	}
protected abstract T initialize() throws Exception;
@Override	public int previousIndex() {	    return tokenPos - 1;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static String substringAfter(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (separator == null) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
@Override	public Object parseObject(final String source, final ParsePosition pos) {	    return parser.parseObject(source, pos);	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public String replace(final Object source) {	    if (source == null) {	        return null;	    }	    final StrBuilder buf = new StrBuilder().append(source);	    substitute(buf, 0, buf.length());	    return buf.toString();	}
@Override	public int length() {	    return size;	}
public String getNewLineText() {	    return newLine;	}
@Override	public Long getValue() {	    return Long.valueOf(this.value);	}
public static String chop(final String str) {	    if (str == null) {	        return null;	    }	    final int strLen = str.length();	    if (strLen < 2) {	        return EMPTY;	    }	    final int lastIdx = strLen - 1;	    final String ret = str.substring(0, lastIdx);	    final char last = str.charAt(lastIdx);	    if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {	        return ret.substring(0, lastIdx - 1);	    }	    return ret;	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public long getThreadCount() {	    return threadCounter.get();	}
public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {	    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {	        return false;	    }	    return true;	}
@Override	public Double getValue() {	    return Double.valueOf(this.value);	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static Fraction getReducedFraction(int numerator, int denominator) {	    if (denominator == 0) {	        throw new ArithmeticException("The denominator must not be zero");	    }	    if (numerator == 0) {	        return ZERO;	    }	    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {	        numerator /= 2;	        denominator /= 2;	    }	    if (denominator < 0) {	        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {	            throw new ArithmeticException("overflow: can't negate");	        }	        numerator = -numerator;	        denominator = -denominator;	    }	    final int gcd = greatestCommonDivisor(numerator, denominator);	    numerator /= gcd;	    denominator /= gcd;	    return new Fraction(numerator, denominator);	}
@Override	public int hashCode() {	    return toHashCode();	}
public char getEnd() {	    return this.end;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
public static void removeCommonFrames(final List<String> causeFrames, final List<String> wrapperFrames) {	    if (causeFrames == null || wrapperFrames == null) {	        throw new IllegalArgumentException("The List must not be null");	    }	    int causeFrameIndex = causeFrames.size() - 1;	    int wrapperFrameIndex = wrapperFrames.size() - 1;	    while (causeFrameIndex >= 0 && wrapperFrameIndex >= 0) {	        final String causeFrame = causeFrames.get(causeFrameIndex);	        final String wrapperFrame = wrapperFrames.get(wrapperFrameIndex);	        if (causeFrame.equals(wrapperFrame)) {	            causeFrames.remove(causeFrameIndex);	        }	        causeFrameIndex--;	        wrapperFrameIndex--;	    }	}
static Object removeAll(final Object array, final BitSet indices) {	    final int srcLength = ArrayUtils.getLength(array);	    final int removals = indices.cardinality();	    final Object result = Array.newInstance(array.getClass().getComponentType(), srcLength - removals);	    int srcIndex = 0;	    int destIndex = 0;	    int count;	    int set;	    while ((set = indices.nextSetBit(srcIndex)) != -1) {	        count = set - srcIndex;	        if (count > 0) {	            System.arraycopy(array, srcIndex, result, destIndex, count);	            destIndex += count;	        }	        srcIndex = indices.nextClearBit(set);	    }	    count = srcLength - srcIndex;	    if (count > 0) {	        System.arraycopy(array, srcIndex, result, destIndex, count);	    }	    return result;	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
public static String difference(final String str1, final String str2) {	    if (str1 == null) {	        return str2;	    }	    if (str2 == null) {	        return str1;	    }	    final int at = indexOfDifference(str1, str2);	    if (at == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str2.substring(at);	}
public int size() {	    return size;	}
public Fraction subtract(final Fraction fraction) {	    return addSub(fraction, false);	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
static Pair<IDKey, IDKey> getRegisterPair(final Object lhs, final Object rhs) {	    final IDKey left = new IDKey(lhs);	    final IDKey right = new IDKey(rhs);	    return Pair.of(left, right);	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
public static Boolean or(final Boolean... array) {	    if (array == null) {	        throw new IllegalArgumentException("The Array must not be null");	    }	    if (array.length == 0) {	        throw new IllegalArgumentException("Array is empty");	    }	    try {	        final boolean[] primitive = ArrayUtils.toPrimitive(array);	        return or(primitive) ? Boolean.TRUE : Boolean.FALSE;	    } catch (final NullPointerException ex) {	        throw new IllegalArgumentException("The array must not contain any null elements");	    }	}
protected String getNullText() {	    return nullText;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static boolean isAssignable(Class<?> cls, final Class<?> toClass, final boolean autoboxing) {	    if (toClass == null) {	        return false;	    }	    if (cls == null) {	        return !toClass.isPrimitive();	    }	    if (autoboxing) {	        if (cls.isPrimitive() && !toClass.isPrimitive()) {	            cls = primitiveToWrapper(cls);	            if (cls == null) {	                return false;	            }	        }	        if (toClass.isPrimitive() && !cls.isPrimitive()) {	            cls = wrapperToPrimitive(cls);	            if (cls == null) {	                return false;	            }	        }	    }	    if (cls.equals(toClass)) {	        return true;	    }	    if (cls.isPrimitive()) {	        if (toClass.isPrimitive() == false) {	            return false;	        }	        if (Integer.TYPE.equals(cls)) {	            return Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Long.TYPE.equals(cls)) {	            return Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Boolean.TYPE.equals(cls)) {	            return false;	        }	        if (Double.TYPE.equals(cls)) {	            return false;	        }	        if (Float.TYPE.equals(cls)) {	            return Double.TYPE.equals(toClass);	        }	        if (Character.TYPE.equals(cls)) {	            return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Short.TYPE.equals(cls)) {	            return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Byte.TYPE.equals(cls)) {	            return Short.TYPE.equals(toClass) || Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        return false;	    }	    return toClass.isAssignableFrom(cls);	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static int reflectionCompare(final Object lhs, final Object rhs, final boolean compareTransients, final Class<?> reflectUpToClass, final String... excludeFields) {	    if (lhs == rhs) {	        return 0;	    }	    if (lhs == null || rhs == null) {	        throw new NullPointerException();	    }	    Class<?> lhsClazz = lhs.getClass();	    if (!lhsClazz.isInstance(rhs)) {	        throw new ClassCastException();	    }	    final CompareToBuilder compareToBuilder = new CompareToBuilder();	    reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);	    while (lhsClazz.getSuperclass() != null && lhsClazz != reflectUpToClass) {	        lhsClazz = lhsClazz.getSuperclass();	        reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);	    }	    return compareToBuilder.toComparison();	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
public static boolean isSameLocalTime(final Calendar cal1, final Calendar cal2) {	    if (cal1 == null || cal2 == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());	}
public boolean isIgnoreEmptyTokens() {	    return ignoreEmptyTokens;	}
public String getNewLineText() {	    return newLine;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
@Override	public boolean equals(final Object obj) {	    if (obj == this) {	        return true;	    }	    if (obj instanceof Fraction == false) {	        return false;	    }	    final Fraction other = (Fraction) obj;	    return getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator();	}
public static boolean isAllUpperCase(final CharSequence cs) {	    if (cs == null || isEmpty(cs)) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isUpperCase(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
@Override	public void setArrayContentDetail(final boolean arrayContentDetail) {	    super.setArrayContentDetail(arrayContentDetail);	}
@Override	public int previousIndex() {	    return tokenPos - 1;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static String initials(final String str, final char... delimiters) {	    if (StringUtils.isEmpty(str)) {	        return str;	    }	    if (delimiters != null && delimiters.length == 0) {	        return "";	    }	    final int strLen = str.length();	    final char[] buf = new char[strLen / 2 + 1];	    int count = 0;	    boolean lastWasGap = true;	    for (int i = 0; i < strLen; i++) {	        final char ch = str.charAt(i);	        if (isDelimiter(ch, delimiters)) {	            lastWasGap = true;	        } else if (lastWasGap) {	            buf[count++] = ch;	            lastWasGap = false;	        } else {	            continue;	        }	    }	    return new String(buf, 0, count);	}
public static Date ceiling(final Object date, final int field) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    if (date instanceof Date) {	        return ceiling((Date) date, field);	    } else if (date instanceof Calendar) {	        return ceiling((Calendar) date, field).getTime();	    } else {	        throw new ClassCastException("Could not find ceiling of for type: " + date.getClass());	    }	}
public static String difference(final String str1, final String str2) {	    if (str1 == null) {	        return str2;	    }	    if (str2 == null) {	        return str1;	    }	    final int at = indexOfDifference(str1, str2);	    if (at == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str2.substring(at);	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public static char binaryToHexDigitMsb0_4bits(final boolean[] src, final int srcPos) {	    if (src.length > 8) {	        throw new IllegalArgumentException("src.length>8: src.length=" + src.length);	    }	    if (src.length - srcPos < 4) {	        throw new IllegalArgumentException("src.length-srcPos<4: src.length=" + src.length + ", srcPos=" + srcPos);	    }	    if (src[srcPos + 3]) {	        if (src[srcPos + 2]) {	            if (src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'f';	                } else {	                    return '7';	                }	            } else {	                if (src[srcPos]) {	                    return 'b';	                } else {	                    return '3';	                }	            }	        } else {	            if (src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'd';	                } else {	                    return '5';	                }	            } else {	                if (src[srcPos]) {	                    return '9';	                } else {	                    return '1';	                }	            }	        }	    } else {	        if (src[srcPos + 2]) {	            if (src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'e';	                } else {	                    return '6';	                }	            } else {	                if (src[srcPos]) {	                    return 'a';	                } else {	                    return '2';	                }	            }	        } else {	            if (src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'c';	                } else {	                    return '4';	                }	            } else {	                if (src[srcPos]) {	                    return '8';	                } else {	                    return '0';	                }	            }	        }	    }	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public static String formatPeriod(final long startMillis, final long endMillis, final String format, final boolean padWithZeros, final TimeZone timezone) {	    final Token[] tokens = lexx(format);	    final Calendar start = Calendar.getInstance(timezone);	    start.setTime(new Date(startMillis));	    final Calendar end = Calendar.getInstance(timezone);	    end.setTime(new Date(endMillis));	    int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);	    int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);	    int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);	    int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);	    int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);	    int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);	    int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);	    while (milliseconds < 0) {	        milliseconds += 1000;	        seconds -= 1;	    }	    while (seconds < 0) {	        seconds += 60;	        minutes -= 1;	    }	    while (minutes < 0) {	        minutes += 60;	        hours -= 1;	    }	    while (hours < 0) {	        hours += 24;	        days -= 1;	    }	    if (Token.containsTokenWithValue(tokens, M)) {	        while (days < 0) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            months -= 1;	            start.add(Calendar.MONTH, 1);	        }	        while (months < 0) {	            months += 12;	            years -= 1;	        }	        if (!Token.containsTokenWithValue(tokens, y) && years != 0) {	            while (years != 0) {	                months += 12 * years;	                years = 0;	            }	        }	    } else {	        if (!Token.containsTokenWithValue(tokens, y)) {	            int target = end.get(Calendar.YEAR);	            if (months < 0) {	                target -= 1;	            }	            while (start.get(Calendar.YEAR) != target) {	                days += start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);	                if (start instanceof GregorianCalendar && start.get(Calendar.MONTH) == Calendar.FEBRUARY && start.get(Calendar.DAY_OF_MONTH) == 29) {	                    days += 1;	                }	                start.add(Calendar.YEAR, 1);	                days += start.get(Calendar.DAY_OF_YEAR);	            }	            years = 0;	        }	        while (start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            start.add(Calendar.MONTH, 1);	        }	        months = 0;	        while (days < 0) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            months -= 1;	            start.add(Calendar.MONTH, 1);	        }	    }	    if (!Token.containsTokenWithValue(tokens, d)) {	        hours += 24 * days;	        days = 0;	    }	    if (!Token.containsTokenWithValue(tokens, H)) {	        minutes += 60 * hours;	        hours = 0;	    }	    if (!Token.containsTokenWithValue(tokens, m)) {	        seconds += 60 * minutes;	        minutes = 0;	    }	    if (!Token.containsTokenWithValue(tokens, s)) {	        milliseconds += 1000 * seconds;	        seconds = 0;	    }	    return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public StrTokenizer reset(final char[] input) {	    reset();	    this.chars = ArrayUtils.clone(input);	    return this;	}
protected boolean isUseFieldNames() {	    return useFieldNames;	}
public static String shortToHex(final short src, final int srcPos, final String dstInit, final int dstPos, final int nHexs) {	    if (0 == nHexs) {	        return dstInit;	    }	    if ((nHexs - 1) * 4 + srcPos >= 16) {	        throw new IllegalArgumentException("(nHexs-1)*4+srcPos is greather or equal to than 16");	    }	    final StringBuilder sb = new StringBuilder(dstInit);	    int shift = 0;	    int append = sb.length();	    for (int i = 0; i < nHexs; i++) {	        shift = i * 4 + srcPos;	        final int bits = 0xF & (src >> shift);	        if (dstPos + i == append) {	            ++append;	            sb.append(intToHexDigit(bits));	        } else {	            sb.setCharAt(dstPos + i, intToHexDigit(bits));	        }	    }	    return sb.toString();	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {	    if (array == null) {	        return null;	    }	    if (startIndexInclusive < 0) {	        startIndexInclusive = 0;	    }	    if (endIndexExclusive > array.length) {	        endIndexExclusive = array.length;	    }	    final int newSize = endIndexExclusive - startIndexInclusive;	    if (newSize <= 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] subarray = new boolean[newSize];	    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);	    return subarray;	}
public int indexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex < 0 ? 0 : startIndex);	    if (matcher == null || startIndex >= size) {	        return -1;	    }	    final int len = size;	    final char[] buf = buffer;	    for (int i = startIndex; i < len; i++) {	        if (matcher.isMatch(buf, i, startIndex, len) > 0) {	            return i;	        }	    }	    return -1;	}
public String getNullText() {	    return nullText;	}
@Override	public boolean hasPrevious() {	    checkTokenized();	    return tokenPos > 0;	}
public static boolean toBoolean(final String str, final String trueString, final String falseString) {	    if (str == trueString) {	        return true;	    } else if (str == falseString) {	        return false;	    } else if (str != null) {	        if (str.equals(trueString)) {	            return true;	        } else if (str.equals(falseString)) {	            return false;	        }	    }	    throw new IllegalArgumentException("The String did not match either specified value");	}
public static Date round(final Object date, final int field) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    if (date instanceof Date) {	        return round((Date) date, field);	    } else if (date instanceof Calendar) {	        return round((Calendar) date, field).getTime();	    } else {	        throw new ClassCastException("Could not round " + date);	    }	}
public boolean isEmpty() {	    return size == 0;	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public static Fraction getReducedFraction(int numerator, int denominator) {	    if (denominator == 0) {	        throw new ArithmeticException("The denominator must not be zero");	    }	    if (numerator == 0) {	        return ZERO;	    }	    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {	        numerator /= 2;	        denominator /= 2;	    }	    if (denominator < 0) {	        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {	            throw new ArithmeticException("overflow: can't negate");	        }	        numerator = -numerator;	        denominator = -denominator;	    }	    final int gcd = greatestCommonDivisor(numerator, denominator);	    numerator /= gcd;	    denominator /= gcd;	    return new Fraction(numerator, denominator);	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof MutableByte) {	        return value == ((MutableByte) obj).byteValue();	    }	    return false;	}
public static ConcurrentException extractCause(final ExecutionException ex) {	    if (ex == null || ex.getCause() == null) {	        return null;	    }	    throwCause(ex);	    return new ConcurrentException(ex.getMessage(), ex.getCause());	}
@Override	public Date parse(final String source, final ParsePosition pos) {	    return parser.parse(source, pos);	}
public String getNewLineText() {	    return newLine;	}
public int size() {	    return size;	}
@Override	public String next() {	    if (hasNext()) {	        return tokens[tokenPos++];	    }	    throw new NoSuchElementException();	}
@Override	public final void applyPattern(final String pattern) {	    if (registry == null) {	        super.applyPattern(pattern);	        toPattern = super.toPattern();	        return;	    }	    final ArrayList<Format> foundFormats = new ArrayList<Format>();	    final ArrayList<String> foundDescriptions = new ArrayList<String>();	    final StringBuilder stripCustom = new StringBuilder(pattern.length());	    final ParsePosition pos = new ParsePosition(0);	    final char[] c = pattern.toCharArray();	    int fmtCount = 0;	    while (pos.getIndex() < pattern.length()) {	        switch(c[pos.getIndex()]) {	            case QUOTE:	                appendQuotedString(pattern, pos, stripCustom, true);	                break;	            case START_FE:	                fmtCount++;	                seekNonWs(pattern, pos);	                final int start = pos.getIndex();	                final int index = readArgumentIndex(pattern, next(pos));	                stripCustom.append(START_FE).append(index);	                seekNonWs(pattern, pos);	                Format format = null;	                String formatDescription = null;	                if (c[pos.getIndex()] == START_FMT) {	                    formatDescription = parseFormatDescription(pattern, next(pos));	                    format = getFormat(formatDescription);	                    if (format == null) {	                        stripCustom.append(START_FMT).append(formatDescription);	                    }	                }	                foundFormats.add(format);	                foundDescriptions.add(format == null ? null : formatDescription);	                Validate.isTrue(foundFormats.size() == fmtCount);	                Validate.isTrue(foundDescriptions.size() == fmtCount);	                if (c[pos.getIndex()] != END_FE) {	                    throw new IllegalArgumentException("Unreadable format element at position " + start);	                }	            default:	                stripCustom.append(c[pos.getIndex()]);	                next(pos);	        }	    }	    super.applyPattern(stripCustom.toString());	    toPattern = insertFormats(super.toPattern(), foundDescriptions);	    if (containsElements(foundFormats)) {	        final Format[] origFormats = getFormats();	        int i = 0;	        for (final Iterator<Format> it = foundFormats.iterator(); it.hasNext(); i++) {	            final Format f = it.next();	            if (f != null) {	                origFormats[i] = f;	            }	        }	        super.setFormats(origFormats);	    }	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static boolean isAlpha(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
@Override	public String toString() {	    return new String(buffer, 0, size);	}
protected boolean isFieldSeparatorAtStart() {	    return fieldSeparatorAtStart;	}
public static int indexOfDifference(final CharSequence... css) {	    if (css == null || css.length <= 1) {	        return INDEX_NOT_FOUND;	    }	    boolean anyStringNull = false;	    boolean allStringsNull = true;	    final int arrayLen = css.length;	    int shortestStrLen = Integer.MAX_VALUE;	    int longestStrLen = 0;	    for (int i = 0; i < arrayLen; i++) {	        if (css[i] == null) {	            anyStringNull = true;	            shortestStrLen = 0;	        } else {	            allStringsNull = false;	            shortestStrLen = Math.min(css[i].length(), shortestStrLen);	            longestStrLen = Math.max(css[i].length(), longestStrLen);	        }	    }	    if (allStringsNull || longestStrLen == 0 && !anyStringNull) {	        return INDEX_NOT_FOUND;	    }	    if (shortestStrLen == 0) {	        return 0;	    }	    int firstDiff = -1;	    for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {	        final char comparisonChar = css[0].charAt(stringPos);	        for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {	            if (css[arrayPos].charAt(stringPos) != comparisonChar) {	                firstDiff = stringPos;	                break;	            }	        }	        if (firstDiff != -1) {	            break;	        }	    }	    if (firstDiff == -1 && shortestStrLen != longestStrLen) {	        return shortestStrLen;	    }	    return firstDiff;	}
public static String removeStart(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (str.startsWith(remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
@Override	public int length() {	    return size;	}
public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, 1);	}
public int capacity() {	    return buffer.length;	}
public String getNewLineText() {	    return newLine;	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
protected String getSummaryObjectEndText() {	    return summaryObjectEndText;	}
public static String intToHex(final int src, final int srcPos, final String dstInit, final int dstPos, final int nHexs) {	    if (0 == nHexs) {	        return dstInit;	    }	    if ((nHexs - 1) * 4 + srcPos >= 32) {	        throw new IllegalArgumentException("(nHexs-1)*4+srcPos is greather or equal to than 32");	    }	    final StringBuilder sb = new StringBuilder(dstInit);	    int shift = 0;	    int append = sb.length();	    for (int i = 0; i < nHexs; i++) {	        shift = i * 4 + srcPos;	        final int bits = 0xF & (src >> shift);	        if (dstPos + i == append) {	            ++append;	            sb.append(intToHexDigit(bits));	        } else {	            sb.setCharAt(dstPos + i, intToHexDigit(bits));	        }	    }	    return sb.toString();	}
@Override	protected List<String> tokenize(final char[] chars, final int offset, final int count) {	    if (chars == null) {	        return super.tokenize(StrBuilder.this.buffer, 0, StrBuilder.this.size());	    }	    return super.tokenize(chars, offset, count);	}
public boolean isAfterRange(final Range<T> otherRange) {	    if (otherRange == null) {	        return false;	    }	    return isAfter(otherRange.maximum);	}
public boolean isEmptyTokenAsNull() {	    return this.emptyAsNull;	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
@Override	public String toString() {	    return new String(buffer, 0, size);	}
public static final String escapeJson(final String input) {	    return ESCAPE_JSON.translate(input);	}
public static int indexOfThrowable(final Throwable throwable, final Class<?> clazz, final int fromIndex) {	    return indexOf(throwable, clazz, fromIndex, false);	}
protected String getContentEnd() {	    return contentEnd;	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
public boolean isAppendStatics() {	    return this.appendStatics;	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public boolean contains(final StrMatcher matcher) {	    return indexOf(matcher, 0) >= 0;	}
@Override	public String toString() {	    return new String(buffer, 0, size);	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public int size() {	    return size;	}
@Override	public int length() {	    return size;	}
public static String toString(final boolean bool, final String trueString, final String falseString) {	    return bool ? trueString : falseString;	}
@Override	public int intValue() {	    return (int) value;	}
protected String getFieldSeparator() {	    return fieldSeparator;	}
public String getNullText() {	    return nullText;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static boolean isAvailableLocale(final Locale locale) {	    return availableLocaleList().contains(locale);	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static String upperCase(final String str, final Locale locale) {	    if (str == null) {	        return null;	    }	    return str.toUpperCase(locale);	}
public Builder priority(final int prio) {	    priority = Integer.valueOf(prio);	    return this;	}
public String getNullText() {	    return nullText;	}
public static String stripStart(final String str, final String stripChars) {	    int strLen;	    if (str == null || (strLen = str.length()) == 0) {	        return str;	    }	    int start = 0;	    if (stripChars == null) {	        while (start != strLen && Character.isWhitespace(str.charAt(start))) {	            start++;	        }	    } else if (stripChars.isEmpty()) {	        return str;	    } else {	        while (start != strLen && stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND) {	            start++;	        }	    }	    return str.substring(start);	}
public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {	    if (array == null) {	        return null;	    }	    if (startIndexInclusive < 0) {	        startIndexInclusive = 0;	    }	    if (endIndexExclusive > array.length) {	        endIndexExclusive = array.length;	    }	    final int newSize = endIndexExclusive - startIndexInclusive;	    if (newSize <= 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] subarray = new boolean[newSize];	    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);	    return subarray;	}
@Override	public StringBuffer format(final Calendar calendar, final StringBuffer buf) {	    return applyRules(calendar, buf);	}
public int size() {	    return size;	}
@Override	public Object parseObject(final String source, final ParsePosition pos) {	    return parse(source, pos);	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static <K, V> V putIfAbsent(final ConcurrentMap<K, V> map, final K key, final V value) {	    if (map == null) {	        return null;	    }	    final V result = map.putIfAbsent(key, value);	    return result != null ? result : value;	}
void increment() {	    count++;	}
public static Boolean negate(final Boolean bool) {	    if (bool == null) {	        return null;	    }	    return bool.booleanValue() ? Boolean.FALSE : Boolean.TRUE;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static boolean isAlphaSpace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false && cs.charAt(i) != ' ') {	            return false;	        }	    }	    return true;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public boolean isEmpty() {	    return size == 0;	}
public static String formatDuration(long durationMillis, final String format, final boolean padWithZeros) {	    final Token[] tokens = lexx(format);	    int days = 0;	    int hours = 0;	    int minutes = 0;	    int seconds = 0;	    int milliseconds = 0;	    if (Token.containsTokenWithValue(tokens, d)) {	        days = (int) (durationMillis / DateUtils.MILLIS_PER_DAY);	        durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY);	    }	    if (Token.containsTokenWithValue(tokens, H)) {	        hours = (int) (durationMillis / DateUtils.MILLIS_PER_HOUR);	        durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR);	    }	    if (Token.containsTokenWithValue(tokens, m)) {	        minutes = (int) (durationMillis / DateUtils.MILLIS_PER_MINUTE);	        durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE);	    }	    if (Token.containsTokenWithValue(tokens, s)) {	        seconds = (int) (durationMillis / DateUtils.MILLIS_PER_SECOND);	        durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND);	    }	    if (Token.containsTokenWithValue(tokens, S)) {	        milliseconds = (int) durationMillis;	    }	    return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros);	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static String substringBeforeLast(final String str, final String separator) {	    if (isEmpty(str) || isEmpty(separator)) {	        return str;	    }	    final int pos = str.lastIndexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
static String format(final Token[] tokens, final int years, final int months, final int days, final int hours, final int minutes, final int seconds, int milliseconds, final boolean padWithZeros) {	    final StringBuilder buffer = new StringBuilder();	    boolean lastOutputSeconds = false;	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        final Token token = tokens[i];	        final Object value = token.getValue();	        final int count = token.getCount();	        if (value instanceof StringBuilder) {	            buffer.append(value.toString());	        } else {	            if (value == y) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer.toString(years));	                lastOutputSeconds = false;	            } else if (value == M) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer.toString(months));	                lastOutputSeconds = false;	            } else if (value == d) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer.toString(days));	                lastOutputSeconds = false;	            } else if (value == H) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer.toString(hours));	                lastOutputSeconds = false;	            } else if (value == m) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer.toString(minutes));	                lastOutputSeconds = false;	            } else if (value == s) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer.toString(seconds));	                lastOutputSeconds = true;	            } else if (value == S) {	                if (lastOutputSeconds) {	                    milliseconds += 1000;	                    final String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds);	                    buffer.append(str.substring(1));	                } else {	                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds));	                }	                lastOutputSeconds = false;	            }	        }	    }	    return buffer.toString();	}
public static Iterator<?> iterator(final Object focus, final int rangeStyle) {	    if (focus == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    if (focus instanceof Date) {	        return iterator((Date) focus, rangeStyle);	    } else if (focus instanceof Calendar) {	        return iterator((Calendar) focus, rangeStyle);	    } else {	        throw new ClassCastException("Could not iterate based on " + focus);	    }	}
@Override	public DefaultExceptionContext setContextValue(final String label, final Object value) {	    for (final Iterator<Pair<String, Object>> iter = contextValues.iterator(); iter.hasNext(); ) {	        final Pair<String, Object> p = iter.next();	        if (StringUtils.equals(label, p.getKey())) {	            iter.remove();	        }	    }	    addContextValue(label, value);	    return this;	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
@Override	public boolean ready() {	    return pos < StrBuilder.this.size();	}
public static float max(final float a, final float b, final float c) {	    return Math.max(Math.max(a, b), c);	}
public short getShortRawValue(final short holder) {	    return (short) getRawValue(holder);	}
public int capacity() {	    return buffer.length;	}
private static boolean endsWith(final CharSequence str, final CharSequence suffix, final boolean ignoreCase) {	    if (str == null || suffix == null) {	        return str == null && suffix == null;	    }	    if (suffix.length() > str.length()) {	        return false;	    }	    final int strOffset = str.length() - suffix.length();	    return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());	}
public StrBuilder trim() {	    if (size == 0) {	        return this;	    }	    int len = size;	    final char[] buf = buffer;	    int pos = 0;	    while (pos < len && buf[pos] <= ' ') {	        pos++;	    }	    while (pos < len && buf[len - 1] <= ' ') {	        len--;	    }	    if (len < size) {	        delete(len, size);	    }	    if (pos > 0) {	        delete(0, pos);	    }	    return this;	}
public int capacity() {	    return buffer.length;	}
public static float max(final float a, final float b) {	    if (Float.isNaN(a)) {	        return b;	    } else if (Float.isNaN(b)) {	        return a;	    } else {	        return Math.max(a, b);	    }	}
public int indexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex < 0 ? 0 : startIndex);	    if (matcher == null || startIndex >= size) {	        return -1;	    }	    final int len = size;	    final char[] buf = buffer;	    for (int i = startIndex; i < len; i++) {	        if (matcher.isMatch(buf, i, startIndex, len) > 0) {	            return i;	        }	    }	    return -1;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static <T extends CharSequence> T notEmpty(final T chars) {	    return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
public static float max(final float a, final float b) {	    if (Float.isNaN(a)) {	        return b;	    } else if (Float.isNaN(b)) {	        return a;	    } else {	        return Math.max(a, b);	    }	}
public boolean isEmpty() {	    return size == 0;	}
public String previousToken() {	    if (hasPrevious()) {	        return tokens[--tokenPos];	    }	    return null;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public String nextToken() {	    if (hasNext()) {	        return tokens[tokenPos++];	    }	    return null;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
@Override	public String getFieldNameValueSeparator() {	    return super.getFieldNameValueSeparator();	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof MutableInt) {	        return value == ((MutableInt) obj).intValue();	    }	    return false;	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
public char getEnd() {	    return this.end;	}
private static Date set(final Date date, final int calendarField, final int amount) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final Calendar c = Calendar.getInstance();	    c.setLenient(false);	    c.setTime(date);	    c.set(calendarField, amount);	    return c.getTime();	}
public char getEscapeChar() {	    return this.escapeChar;	}
public static boolean isAlphanumeric(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetterOrDigit(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public int capacity() {	    return buffer.length;	}
public String midString(int index, final int length) {	    if (index < 0) {	        index = 0;	    }	    if (length <= 0 || index >= size) {	        return "";	    }	    if (size <= index + length) {	        return new String(buffer, index, size - index);	    }	    return new String(buffer, index, length);	}
public static boolean isAssignable(Class<?> cls, final Class<?> toClass, final boolean autoboxing) {	    if (toClass == null) {	        return false;	    }	    if (cls == null) {	        return !toClass.isPrimitive();	    }	    if (autoboxing) {	        if (cls.isPrimitive() && !toClass.isPrimitive()) {	            cls = primitiveToWrapper(cls);	            if (cls == null) {	                return false;	            }	        }	        if (toClass.isPrimitive() && !cls.isPrimitive()) {	            cls = wrapperToPrimitive(cls);	            if (cls == null) {	                return false;	            }	        }	    }	    if (cls.equals(toClass)) {	        return true;	    }	    if (cls.isPrimitive()) {	        if (toClass.isPrimitive() == false) {	            return false;	        }	        if (Integer.TYPE.equals(cls)) {	            return Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Long.TYPE.equals(cls)) {	            return Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Boolean.TYPE.equals(cls)) {	            return false;	        }	        if (Double.TYPE.equals(cls)) {	            return false;	        }	        if (Float.TYPE.equals(cls)) {	            return Double.TYPE.equals(toClass);	        }	        if (Character.TYPE.equals(cls)) {	            return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Short.TYPE.equals(cls)) {	            return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Byte.TYPE.equals(cls)) {	            return Short.TYPE.equals(toClass) || Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        return false;	    }	    return toClass.isAssignableFrom(cls);	}
protected ScheduledFuture<?> startTimer() {	    return getExecutorService().scheduleAtFixedRate(new Runnable() {		        @Override	        public void run() {	            endOfPeriod();	        }	    }, getPeriod(), getPeriod(), getUnit());	}
public static boolean isAllUpperCase(final CharSequence cs) {	    if (cs == null || isEmpty(cs)) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isUpperCase(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public int toComparison() {	    return comparison;	}
public static String toString(final boolean bool, final String trueString, final String falseString) {	    return bool ? trueString : falseString;	}
public static String mid(final String str, int pos, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0 || pos > str.length()) {	        return EMPTY;	    }	    if (pos < 0) {	        pos = 0;	    }	    if (str.length() <= pos + len) {	        return str.substring(pos);	    }	    return str.substring(pos, pos + len);	}
@Override	public void write(final String str, final int off, final int len) {	    StrBuilder.this.append(str, off, len);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
@Override	public int previousIndex() {	    return tokenPos - 1;	}
public static boolean[] clone(final boolean[] array) {	    if (array == null) {	        return null;	    }	    return array.clone();	}
@Override	public int compareTo(final MutableBoolean other) {	    final boolean anotherVal = other.value;	    return value == anotherVal ? 0 : (value ? 1 : -1);	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
@Override	public int translate(final CharSequence input, final int index, final Writer out) throws IOException {	    if (input.charAt(index) == '\\' && index < (input.length() - 1) && Character.isDigit(input.charAt(index + 1))) {	        final int start = index + 1;	        int end = index + 2;	        while (end < input.length() && Character.isDigit(input.charAt(end))) {	            end++;	            if (Integer.parseInt(input.subSequence(start, end).toString(), 10) > OCTAL_MAX) {	                end--;	                break;	            }	        }	        out.write(Integer.parseInt(input.subSequence(start, end).toString(), 8));	        return 1 + end - start;	    }	    return 0;	}
public boolean isAppendStatics() {	    return this.appendStatics;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static int indexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = Integer.MAX_VALUE;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.indexOf(str, search, 0);	        if (tmp == INDEX_NOT_FOUND) {	            continue;	        }	        if (tmp < ret) {	            ret = tmp;	        }	    }	    return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
protected boolean isUseClassName() {	    return useClassName;	}
@Override	public int length() {	    return size;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static boolean isAlphanumericSpace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetterOrDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {	            return false;	        }	    }	    return true;	}
public static boolean isAscii(final char ch) {	    return ch < 128;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static String leftPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return leftPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return padStr.concat(str);	    } else if (pads < padLen) {	        return padStr.substring(0, pads).concat(str);	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return new String(padding).concat(str);	    }	}
public int size() {	    return size;	}
public static void identityToString(final StringBuilder builder, final Object object) {	    if (object == null) {	        throw new NullPointerException("Cannot get the toString of a null identity");	    }	    builder.append(object.getClass().getName()).append('@').append(Integer.toHexString(System.identityHashCode(object)));	}
public static <K, V> V createIfAbsentUnchecked(final ConcurrentMap<K, V> map, final K key, final ConcurrentInitializer<V> init) {	    try {	        return createIfAbsent(map, key, init);	    } catch (final ConcurrentException cex) {	        throw new ConcurrentRuntimeException(cex.getCause());	    }	}
public static String trim(final String str) {	    return str == null ? null : str.trim();	}
public void reset() {	    this.isEquals = true;	}
public int size() {	    return size;	}
public String getNewLineText() {	    return newLine;	}
public StrBuilder deleteCharAt(final int index) {	    if (index < 0 || index >= size) {	        throw new StringIndexOutOfBoundsException(index);	    }	    deleteImpl(index, index + 1, 1);	    return this;	}
@Override	public int hashCode() {	    return toHashCode();	}
public static boolean toBoolean(final String str, final String trueString, final String falseString) {	    if (str == trueString) {	        return true;	    } else if (str == falseString) {	        return false;	    } else if (str != null) {	        if (str.equals(trueString)) {	            return true;	        } else if (str.equals(falseString)) {	            return false;	        }	    }	    throw new IllegalArgumentException("The String did not match either specified value");	}
@Override	public String toString() {	    return "FastDateFormat[" + printer.getPattern() + "," + printer.getLocale() + "," + printer.getTimeZone().getID() + "]";	}
public static Class<?> getClass(final String className, final boolean initialize) throws ClassNotFoundException {	    final ClassLoader contextCL = Thread.currentThread().getContextClassLoader();	    final ClassLoader loader = contextCL == null ? ClassUtils.class.getClassLoader() : contextCL;	    return getClass(loader, className, initialize);	}
protected String getArrayEnd() {	    return arrayEnd;	}
public static FastDateFormat getInstance(final String pattern, final TimeZone timeZone, final Locale locale) {	    return cache.getInstance(pattern, timeZone, locale);	}
@Override	public M getMiddle() {	    return middle;	}
@Override	public String toString() {	    return "FastDateParser[" + pattern + "," + locale + "," + timeZone.getID() + "]";	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
@Override	public boolean markSupported() {	    return true;	}
protected String getSummaryObjectEndText() {	    return summaryObjectEndText;	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public static String[][] invert(final String[][] array) {	    final String[][] newarray = new String[array.length][2];	    for (int i = 0; i < array.length; i++) {	        newarray[i][0] = array[i][1];	        newarray[i][1] = array[i][0];	    }	    return newarray;	}
@Override	public int translate(final CharSequence input, final int index, final Writer out) throws IOException {	    final int seqEnd = input.length();	    if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {	        int start = index + 2;	        boolean isHex = false;	        final char firstChar = input.charAt(start);	        if (firstChar == 'x' || firstChar == 'X') {	            start++;	            isHex = true;	            if (start == seqEnd) {	                return 0;	            }	        }	        int end = start;	        while (end < seqEnd && (input.charAt(end) >= '0' && input.charAt(end) <= '9' || input.charAt(end) >= 'a' && input.charAt(end) <= 'f' || input.charAt(end) >= 'A' && input.charAt(end) <= 'F')) {	            end++;	        }	        final boolean semiNext = end != seqEnd && input.charAt(end) == ';';	        if (!semiNext) {	            if (isSet(OPTION.semiColonRequired)) {	                return 0;	            } else if (isSet(OPTION.errorIfNoSemiColon)) {	                throw new IllegalArgumentException("Semi-colon required at end of numeric entity");	            }	        }	        int entityValue;	        try {	            if (isHex) {	                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);	            } else {	                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);	            }	        } catch (final NumberFormatException nfe) {	            return 0;	        }	        if (entityValue > 0xFFFF) {	            final char[] chrs = Character.toChars(entityValue);	            out.write(chrs[0]);	            out.write(chrs[1]);	        } else {	            out.write(entityValue);	        }	        return 2 + end - start + (isHex ? 1 : 0) + (semiNext ? 1 : 0);	    }	    return 0;	}
public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final E... values) {	    asEnum(enumClass);	    Validate.noNullElements(values);	    final EnumSet<E> condensed = EnumSet.noneOf(enumClass);	    Collections.addAll(condensed, values);	    final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];	    for (final E value : condensed) {	        result[value.ordinal() / Long.SIZE] |= 1 << (value.ordinal() % Long.SIZE);	    }	    ArrayUtils.reverse(result);	    return result;	}
private static long getFragment(final Calendar calendar, final int fragment, final int unit) {	    if (calendar == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final long millisPerUnit = getMillisPerUnit(unit);	    long result = 0;	    switch(fragment) {	        case Calendar.YEAR:	            result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;	            break;	        case Calendar.MONTH:	            result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;	            break;	    }	    switch(fragment) {	        case Calendar.YEAR:	        case Calendar.MONTH:	        case Calendar.DAY_OF_YEAR:	        case Calendar.DATE:	            result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;	        case Calendar.HOUR_OF_DAY:	            result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;	        case Calendar.MINUTE:	            result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;	        case Calendar.SECOND:	            result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;	            break;	        case Calendar.MILLISECOND:	            break;	        default:	            throw new IllegalArgumentException("The fragment " + fragment + " is not supported");	    }	    return result;	}
public static int lastIndexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = INDEX_NOT_FOUND;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.lastIndexOf(str, search, str.length());	        if (tmp > ret) {	            ret = tmp;	        }	    }	    return ret;	}
public boolean isNegated() {	    return negated;	}
public Writer asWriter() {	    return new StrBuilderWriter();	}
public String getNullText() {	    return nullText;	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
public static boolean isSameInstant(final Calendar cal1, final Calendar cal2) {	    if (cal1 == null || cal2 == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    return cal1.getTime().getTime() == cal2.getTime().getTime();	}
protected String getContentStart() {	    return contentStart;	}
protected boolean isUseShortClassName() {	    return useShortClassName;	}
public int size() {	    return size;	}
public static byte[] uuidToByteArray(final UUID src, final byte[] dst, final int dstPos, final int nBytes) {	    if (0 == nBytes) {	        return dst;	    }	    if (nBytes > 16) {	        throw new IllegalArgumentException("nBytes is greather than 16");	    }	    longToByteArray(src.getMostSignificantBits(), 0, dst, dstPos, nBytes > 8 ? 8 : nBytes);	    if (nBytes >= 8) {	        longToByteArray(src.getLeastSignificantBits(), 0, dst, dstPos + 8, nBytes - 8);	    }	    return dst;	}
public static String capitalize(final String str) {	    int strLen;	    if (str == null || (strLen = str.length()) == 0) {	        return str;	    }	    char firstChar = str.charAt(0);	    if (Character.isTitleCase(firstChar)) {	        return str;	    }	    return new StringBuilder(strLen).append(Character.toTitleCase(firstChar)).append(str.substring(1)).toString();	}
public boolean isEmpty() {	    return size == 0;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public String getNullText() {	    return nullText;	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
public static String prependIfMissing(final String str, final CharSequence prefix, final CharSequence... prefixes) {	    return prependIfMissing(str, prefix, false, prefixes);	}
public static boolean isAsciiAlpha(final char ch) {	    return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z');	}
public String getNullText() {	    return nullText;	}
public static String squeeze(final String str, final String... set) {	    if (StringUtils.isEmpty(str) || deepEmpty(set)) {	        return str;	    }	    final CharSet chars = CharSet.getInstance(set);	    final StringBuilder buffer = new StringBuilder(str.length());	    final char[] chrs = str.toCharArray();	    final int sz = chrs.length;	    char lastChar = ' ';	    char ch = ' ';	    for (int i = 0; i < sz; i++) {	        ch = chrs[i];	        if (ch == lastChar && i != 0 && chars.contains(ch)) {	            continue;	        }	        buffer.append(ch);	        lastChar = ch;	    }	    return buffer.toString();	}
public static float min(final float a, final float b, final float c) {	    return Math.min(Math.min(a, b), c);	}
public static boolean[] clone(final boolean[] array) {	    if (array == null) {	        return null;	    }	    return array.clone();	}
public StrBuilder appendFixedWidthPadLeft(final int value, final int width, final char padChar) {	    return appendFixedWidthPadLeft(String.valueOf(value), width, padChar);	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
@Override	public int length() {	    return size;	}
public int size() {	    return size;	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
public final synchronized ExecutorService getExternalExecutor() {	    return externalExecutor;	}
public static boolean isAssignable(Class<?> cls, final Class<?> toClass, final boolean autoboxing) {	    if (toClass == null) {	        return false;	    }	    if (cls == null) {	        return !toClass.isPrimitive();	    }	    if (autoboxing) {	        if (cls.isPrimitive() && !toClass.isPrimitive()) {	            cls = primitiveToWrapper(cls);	            if (cls == null) {	                return false;	            }	        }	        if (toClass.isPrimitive() && !cls.isPrimitive()) {	            cls = wrapperToPrimitive(cls);	            if (cls == null) {	                return false;	            }	        }	    }	    if (cls.equals(toClass)) {	        return true;	    }	    if (cls.isPrimitive()) {	        if (toClass.isPrimitive() == false) {	            return false;	        }	        if (Integer.TYPE.equals(cls)) {	            return Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Long.TYPE.equals(cls)) {	            return Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Boolean.TYPE.equals(cls)) {	            return false;	        }	        if (Double.TYPE.equals(cls)) {	            return false;	        }	        if (Float.TYPE.equals(cls)) {	            return Double.TYPE.equals(toClass);	        }	        if (Character.TYPE.equals(cls)) {	            return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Short.TYPE.equals(cls)) {	            return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Byte.TYPE.equals(cls)) {	            return Short.TYPE.equals(toClass) || Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        return false;	    }	    return toClass.isAssignableFrom(cls);	}
public static String repeat(final char ch, final int repeat) {	    final char[] buf = new char[repeat];	    for (int i = repeat - 1; i >= 0; i--) {	        buf[i] = ch;	    }	    return new String(buf);	}
public int capacity() {	    return buffer.length;	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
@Override	public int hashCode() {	    return value == null ? 0 : value.hashCode();	}
public int toComparison() {	    return comparison;	}
public int set(final int holder) {	    return holder | _mask;	}
public int lastIndexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex >= size ? size - 1 : startIndex);	    if (matcher == null || startIndex < 0) {	        return -1;	    }	    final char[] buf = buffer;	    final int endIndex = startIndex + 1;	    for (int i = startIndex; i >= 0; i--) {	        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {	            return i;	        }	    }	    return -1;	}
public String replace(final Object source) {	    if (source == null) {	        return null;	    }	    final StrBuilder buf = new StrBuilder().append(source);	    substitute(buf, 0, buf.length());	    return buf.toString();	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
@Override	public boolean translate(final int codepoint, final Writer out) throws IOException {	    if (between) {	        if (codepoint < below || codepoint > above) {	            return false;	        }	    } else {	        if (codepoint >= below && codepoint <= above) {	            return false;	        }	    }	    if (codepoint > 0xffff) {	        out.write(toUtf16Escape(codepoint));	    } else if (codepoint > 0xfff) {	        out.write("\\u" + hex(codepoint));	    } else if (codepoint > 0xff) {	        out.write("\\u0" + hex(codepoint));	    } else if (codepoint > 0xf) {	        out.write("\\u00" + hex(codepoint));	    } else {	        out.write("\\u000" + hex(codepoint));	    }	    return true;	}
public boolean isNegated() {	    return negated;	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
public void stop() {	    if (this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {	        throw new IllegalStateException("Stopwatch is not running. ");	    }	    if (this.runningState == STATE_RUNNING) {	        this.stopTime = System.nanoTime();	    }	    this.runningState = STATE_STOPPED;	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public static String swapCase(final String str) {	    if (StringUtils.isEmpty(str)) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (Character.isUpperCase(ch)) {	            buffer[i] = Character.toLowerCase(ch);	        } else if (Character.isTitleCase(ch)) {	            buffer[i] = Character.toLowerCase(ch);	        } else if (Character.isLowerCase(ch)) {	            buffer[i] = Character.toUpperCase(ch);	        }	    }	    return new String(buffer);	}
protected String getSummaryObjectStartText() {	    return summaryObjectStartText;	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
@Override	public int length() {	    return size;	}
public StrBuilder setLength(final int length) {	    if (length < 0) {	        throw new StringIndexOutOfBoundsException(length);	    }	    if (length < size) {	        size = length;	    } else if (length > size) {	        ensureCapacity(length);	        final int oldEnd = size;	        final int newEnd = length;	        size = length;	        for (int i = oldEnd; i < newEnd; i++) {	            buffer[i] = '\0';	        }	    }	    return this;	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
public static String stripEnd(final String str, final String stripChars) {	    int end;	    if (str == null || (end = str.length()) == 0) {	        return str;	    }	    if (stripChars == null) {	        while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {	            end--;	        }	    } else if (stripChars.isEmpty()) {	        return str;	    } else {	        while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND) {	            end--;	        }	    }	    return str.substring(0, end);	}
public String getNewLineText() {	    return newLine;	}
public String getNullText() {	    return nullText;	}
public StrTokenizer setDelimiterString(final String delim) {	    return setDelimiterMatcher(StrMatcher.stringMatcher(delim));	}
public static String removeStartIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (startsWithIgnoreCase(str, remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public int getValue(final int holder) {	    return getRawValue(holder) >> _shift_count;	}
public String getNullText() {	    return nullText;	}
public static String substringBefore(final String str, final String separator) {	    if (isEmpty(str) || separator == null) {	        return str;	    }	    if (separator.isEmpty()) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
public static final String escapeHtml3(final String input) {	    return ESCAPE_HTML3.translate(input);	}
public String getNewLineText() {	    return newLine;	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static String center(String str, final int size, String padStr) {	    if (str == null || size <= 0) {	        return str;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    str = leftPad(str, strLen + pads / 2, padStr);	    str = rightPad(str, size, padStr);	    return str;	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle, final TimeZone timeZone, final Locale locale) {	    return cache.getDateTimeInstance(dateStyle, timeStyle, timeZone, locale);	}
public static String reverse(final String str) {	    if (str == null) {	        return null;	    }	    return new StringBuilder(str).reverse().toString();	}
public static String upperCase(final String str, final Locale locale) {	    if (str == null) {	        return null;	    }	    return str.toUpperCase(locale);	}
public StrBuilder appendWithSeparators(final Iterator<?> it, String separator) {	    if (it != null) {	        separator = ObjectUtils.toString(separator);	        while (it.hasNext()) {	            append(it.next());	            if (it.hasNext()) {	                append(separator);	            }	        }	    }	    return this;	}
public String getNewLineText() {	    return newLine;	}
public static String toStringExclude(final Object object, final String... excludeFieldNames) {	    return new ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();	}
protected boolean isFieldSeparatorAtStart() {	    return fieldSeparatorAtStart;	}
public int size() {	    return size;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static String substringBetween(final String str, final String open, final String close) {	    if (str == null || open == null || close == null) {	        return null;	    }	    final int start = str.indexOf(open);	    if (start != INDEX_NOT_FOUND) {	        final int end = str.indexOf(close, start + open.length());	        if (end != INDEX_NOT_FOUND) {	            return str.substring(start + open.length(), end);	        }	    }	    return null;	}
public boolean isBefore(final T element) {	    if (element == null) {	        return false;	    }	    return comparator.compare(element, maximum) > 0;	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
public static float max(final float a, final float b, final float c) {	    return Math.max(Math.max(a, b), c);	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public static boolean isNotEmpty(final CharSequence cs) {	    return !StringUtils.isEmpty(cs);	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
private static boolean startsWith(final CharSequence str, final CharSequence prefix, final boolean ignoreCase) {	    if (str == null || prefix == null) {	        return str == null && prefix == null;	    }	    if (prefix.length() > str.length()) {	        return false;	    }	    return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());	}
public static Boolean[] toObject(final boolean[] array) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_OBJECT_ARRAY;	    }	    final Boolean[] result = new Boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);	    }	    return result;	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
protected String getArrayEnd() {	    return arrayEnd;	}
public static boolean isAsciiPrintable(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (CharUtils.isAsciiPrintable(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {	    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {	        return false;	    }	    return true;	}
private static boolean startsWith(final CharSequence str, final CharSequence prefix, final boolean ignoreCase) {	    if (str == null || prefix == null) {	        return str == null && prefix == null;	    }	    if (prefix.length() > str.length()) {	        return false;	    }	    return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());	}
public static int indexOfIgnoreCase(final CharSequence str, final CharSequence searchStr, int startPos) {	    if (str == null || searchStr == null) {	        return INDEX_NOT_FOUND;	    }	    if (startPos < 0) {	        startPos = 0;	    }	    final int endLimit = str.length() - searchStr.length() + 1;	    if (startPos > endLimit) {	        return INDEX_NOT_FOUND;	    }	    if (searchStr.length() == 0) {	        return startPos;	    }	    for (int i = startPos; i < endLimit; i++) {	        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static String chop(final String str) {	    if (str == null) {	        return null;	    }	    final int strLen = str.length();	    if (strLen < 2) {	        return EMPTY;	    }	    final int lastIdx = strLen - 1;	    final String ret = str.substring(0, lastIdx);	    final char last = str.charAt(lastIdx);	    if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {	        return ret.substring(0, lastIdx - 1);	    }	    return ret;	}
public int capacity() {	    return buffer.length;	}
private static long getFragment(final Calendar calendar, final int fragment, final int unit) {	    if (calendar == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final long millisPerUnit = getMillisPerUnit(unit);	    long result = 0;	    switch(fragment) {	        case Calendar.YEAR:	            result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;	            break;	        case Calendar.MONTH:	            result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;	            break;	    }	    switch(fragment) {	        case Calendar.YEAR:	        case Calendar.MONTH:	        case Calendar.DAY_OF_YEAR:	        case Calendar.DATE:	            result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;	        case Calendar.HOUR_OF_DAY:	            result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;	        case Calendar.MINUTE:	            result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;	        case Calendar.SECOND:	            result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;	            break;	        case Calendar.MILLISECOND:	            break;	        default:	            throw new IllegalArgumentException("The fragment " + fragment + " is not supported");	    }	    return result;	}
@Override	public TimeZone getTimeZone() {	    return mTimeZone;	}
public StrBuilder appendWithSeparators(final Iterator<?> it, String separator) {	    if (it != null) {	        separator = ObjectUtils.toString(separator);	        while (it.hasNext()) {	            append(it.next());	            if (it.hasNext()) {	                append(separator);	            }	        }	    }	    return this;	}
@Override	public String lookup(final String key) {	    if (map == null) {	        return null;	    }	    final Object obj = map.get(key);	    if (obj == null) {	        return null;	    }	    return obj.toString();	}
public static long getFragmentInDays(final Calendar calendar, final int fragment) {	    return getFragment(calendar, fragment, Calendar.DAY_OF_YEAR);	}
public static String stripToEmpty(final String str) {	    return str == null ? EMPTY : strip(str, null);	}
@Override	public void flush() {	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] result = new boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        final Boolean b = array[i];	        result[i] = (b == null ? valueForNull : b.booleanValue());	    }	    return result;	}
public int indexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex < 0 ? 0 : startIndex);	    if (matcher == null || startIndex >= size) {	        return -1;	    }	    final int len = size;	    final char[] buf = buffer;	    for (int i = startIndex; i < len; i++) {	        if (matcher.isMatch(buf, i, startIndex, len) > 0) {	            return i;	        }	    }	    return -1;	}
public int size() {	    return size;	}
protected String getContentEnd() {	    return contentEnd;	}
@Override	public T get(final long timeout, final TimeUnit unit) {	    return value;	}
public static Fraction getFraction(String str) {	    if (str == null) {	        throw new IllegalArgumentException("The string must not be null");	    }	    int pos = str.indexOf('.');	    if (pos >= 0) {	        return getFraction(Double.parseDouble(str));	    }	    pos = str.indexOf(' ');	    if (pos > 0) {	        final int whole = Integer.parseInt(str.substring(0, pos));	        str = str.substring(pos + 1);	        pos = str.indexOf('/');	        if (pos < 0) {	            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");	        } else {	            final int numer = Integer.parseInt(str.substring(0, pos));	            final int denom = Integer.parseInt(str.substring(pos + 1));	            return getFraction(whole, numer, denom);	        }	    }	    pos = str.indexOf('/');	    if (pos < 0) {	        return getFraction(Integer.parseInt(str), 1);	    } else {	        final int numer = Integer.parseInt(str.substring(0, pos));	        final int denom = Integer.parseInt(str.substring(pos + 1));	        return getFraction(numer, denom);	    }	}
@Override	public String next() {	    if (hasNext()) {	        return tokens[tokenPos++];	    }	    throw new NoSuchElementException();	}
public static boolean isNumericSpace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {	            return false;	        }	    }	    return true;	}
public static String formatDurationISO(final long durationMillis) {	    return formatDuration(durationMillis, ISO_EXTENDED_FORMAT_PATTERN, false);	}
public static String substringAfter(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (separator == null) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
private static long getFragment(final Calendar calendar, final int fragment, final int unit) {	    if (calendar == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final long millisPerUnit = getMillisPerUnit(unit);	    long result = 0;	    switch(fragment) {	        case Calendar.YEAR:	            result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;	            break;	        case Calendar.MONTH:	            result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;	            break;	    }	    switch(fragment) {	        case Calendar.YEAR:	        case Calendar.MONTH:	        case Calendar.DAY_OF_YEAR:	        case Calendar.DATE:	            result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;	        case Calendar.HOUR_OF_DAY:	            result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;	        case Calendar.MINUTE:	            result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;	        case Calendar.SECOND:	            result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;	            break;	        case Calendar.MILLISECOND:	            break;	        default:	            throw new IllegalArgumentException("The fragment " + fragment + " is not supported");	    }	    return result;	}
public static long getFragmentInSeconds(final Calendar calendar, final int fragment) {	    return getFragment(calendar, fragment, Calendar.SECOND);	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
@Override	public int length() {	    return size;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public int capacity() {	    return buffer.length;	}
public boolean isEmpty() {	    return size == 0;	}
public boolean isEmpty() {	    return size == 0;	}
public static int toInteger(final Boolean bool, final int trueValue, final int falseValue, final int nullValue) {	    if (bool == null) {	        return nullValue;	    }	    return bool.booleanValue() ? trueValue : falseValue;	}
public boolean isNegated() {	    return negated;	}
public static String getPackageCanonicalName(final String canonicalName) {	    return ClassUtils.getPackageName(getCanonicalName(canonicalName));	}
public static StrTokenizer getCSVInstance(final char[] input) {	    final StrTokenizer tok = getCSVClone();	    tok.reset(input);	    return tok;	}
protected String getFieldSeparator() {	    return fieldSeparator;	}
public static final String escapeEcmaScript(final String input) {	    return ESCAPE_ECMASCRIPT.translate(input);	}
public static String defaultString(final String str, final String defaultStr) {	    return str == null ? defaultStr : str;	}
public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final E... values) {	    asEnum(enumClass);	    Validate.noNullElements(values);	    final EnumSet<E> condensed = EnumSet.noneOf(enumClass);	    Collections.addAll(condensed, values);	    final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];	    for (final E value : condensed) {	        result[value.ordinal() / Long.SIZE] |= 1 << (value.ordinal() % Long.SIZE);	    }	    ArrayUtils.reverse(result);	    return result;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public int size() {	    return size;	}
@Override	public boolean ready() {	    return pos < StrBuilder.this.size();	}
public static FastDateFormat getDateInstance(final int style, final TimeZone timeZone, final Locale locale) {	    return cache.getDateInstance(style, timeZone, locale);	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static String removeStart(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (str.startsWith(remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public EqualsBuilder appendSuper(final boolean superEquals) {	    if (isEquals == false) {	        return this;	    }	    isEquals = superEquals;	    return this;	}
@Override	public float floatValue() {	    return (float) numerator / (float) denominator;	}
@Override	public Date parse(final String source, final ParsePosition pos) {	    return parser.parse(source, pos);	}
public static String uncapitalize(final String str) {	    int strLen;	    if (str == null || (strLen = str.length()) == 0) {	        return str;	    }	    char firstChar = str.charAt(0);	    if (Character.isLowerCase(firstChar)) {	        return str;	    }	    return new StringBuilder(strLen).append(Character.toLowerCase(firstChar)).append(str.substring(1)).toString();	}
static void register(final Object lhs, final Object rhs) {	    synchronized (EqualsBuilder.class) {	        if (getRegistry() == null) {	            REGISTRY.set(new HashSet<Pair<IDKey, IDKey>>());	        }	    }	    final Set<Pair<IDKey, IDKey>> registry = getRegistry();	    final Pair<IDKey, IDKey> pair = getRegisterPair(lhs, rhs);	    registry.add(pair);	}
@Override	public int compare(final Object obj1, final Object obj2) {	    return ((Comparable) obj1).compareTo(obj2);	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
@Override	public boolean isDone() {	    return true;	}
protected boolean isDefaultFullDetail() {	    return defaultFullDetail;	}
protected boolean isUseClassName() {	    return useClassName;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
@Override	public int length() {	    return size;	}
public synchronized void acquire() throws InterruptedException {	    if (isShutdown()) {	        throw new IllegalStateException("TimedSemaphore is shut down!");	    }	    if (task == null) {	        task = startTimer();	    }	    boolean canPass = false;	    do {	        canPass = getLimit() <= NO_LIMIT || acquireCount < getLimit();	        if (!canPass) {	            wait();	        } else {	            acquireCount++;	        }	    } while (!canPass);	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
public static String rightPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return rightPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return str.concat(padStr);	    } else if (pads < padLen) {	        return str.concat(padStr.substring(0, pads));	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return str.concat(new String(padding));	    }	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
public HashCodeBuilder append(final short[] array) {	    if (array == null) {	        iTotal = iTotal * iConstant;	    } else {	        for (final short element : array) {	            append(element);	        }	    }	    return this;	}
public String getNullText() {	    return nullText;	}
public static <T> T invokeConstructor(final Class<T> cls, Object[] args, Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {	    if (parameterTypes == null) {	        parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;	    }	    if (args == null) {	        args = ArrayUtils.EMPTY_OBJECT_ARRAY;	    }	    final Constructor<T> ctor = getMatchingAccessibleConstructor(cls, parameterTypes);	    if (ctor == null) {	        throw new NoSuchMethodException("No such accessible constructor on object: " + cls.getName());	    }	    return ctor.newInstance(args);	}
public int size() {	    return size;	}
public static int indexOfType(final Throwable throwable, final Class<?> type, final int fromIndex) {	    return indexOf(throwable, type, fromIndex, true);	}
public int capacity() {	    return buffer.length;	}
public HashCodeBuilder append(final short[] array) {	    if (array == null) {	        iTotal = iTotal * iConstant;	    } else {	        for (final short element : array) {	            append(element);	        }	    }	    return this;	}
@Override	public int translate(final CharSequence input, final int index, final Writer out) throws IOException {	    int max = longest;	    if (index + longest > input.length()) {	        max = input.length() - index;	    }	    for (int i = max; i >= shortest; i--) {	        final CharSequence subSeq = input.subSequence(index, index + i);	        final CharSequence result = lookupMap.get(subSeq.toString());	        if (result != null) {	            out.write(result.toString());	            return i;	        }	    }	    return 0;	}
public static <T> void exclusiveBetween(final T start, final T end, final Comparable<T> value, final String message, final Object... values) {	    if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0) {	        throw new IllegalArgumentException(String.format(message, values));	    }	}
public static String mid(final String str, int pos, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0 || pos > str.length()) {	        return EMPTY;	    }	    if (pos < 0) {	        pos = 0;	    }	    if (str.length() <= pos + len) {	        return str.substring(pos);	    }	    return str.substring(pos, pos + len);	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static CharRange isNot(final char ch) {	    return new CharRange(ch, ch, true);	}
public static String random(final int count, final char... chars) {	    if (chars == null) {	        return random(count, 0, 0, false, false, null, RANDOM);	    }	    return random(count, 0, chars.length, false, false, chars, RANDOM);	}
protected String getSummaryObjectStartText() {	    return summaryObjectStartText;	}
@Override	public int previousIndex() {	    return tokenPos - 1;	}
public boolean atLeast(final JavaVersion requiredVersion) {	    return this.value >= requiredVersion.value;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
static Pair<IDKey, IDKey> getRegisterPair(final Object lhs, final Object rhs) {	    final IDKey left = new IDKey(lhs);	    final IDKey right = new IDKey(rhs);	    return Pair.of(left, right);	}
public static Class<?>[] toClass(final Object... array) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return ArrayUtils.EMPTY_CLASS_ARRAY;	    }	    final Class<?>[] classes = new Class[array.length];	    for (int i = 0; i < array.length; i++) {	        classes[i] = array[i] == null ? null : array[i].getClass();	    }	    return classes;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public Format getFormatter() {	    return this.formatter;	}
public static boolean toBoolean(final String str, final String trueString, final String falseString) {	    if (str == trueString) {	        return true;	    } else if (str == falseString) {	        return false;	    } else if (str != null) {	        if (str.equals(trueString)) {	            return true;	        } else if (str.equals(falseString)) {	            return false;	        }	    }	    throw new IllegalArgumentException("The String did not match either specified value");	}
public static FastDateFormat getInstance(final String pattern, final TimeZone timeZone, final Locale locale) {	    return cache.getInstance(pattern, timeZone, locale);	}
public StrBuilder deleteFirst(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, 1);	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
public static Fraction getFraction(String str) {	    if (str == null) {	        throw new IllegalArgumentException("The string must not be null");	    }	    int pos = str.indexOf('.');	    if (pos >= 0) {	        return getFraction(Double.parseDouble(str));	    }	    pos = str.indexOf(' ');	    if (pos > 0) {	        final int whole = Integer.parseInt(str.substring(0, pos));	        str = str.substring(pos + 1);	        pos = str.indexOf('/');	        if (pos < 0) {	            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");	        } else {	            final int numer = Integer.parseInt(str.substring(0, pos));	            final int denom = Integer.parseInt(str.substring(pos + 1));	            return getFraction(whole, numer, denom);	        }	    }	    pos = str.indexOf('/');	    if (pos < 0) {	        return getFraction(Integer.parseInt(str), 1);	    } else {	        final int numer = Integer.parseInt(str.substring(0, pos));	        final int denom = Integer.parseInt(str.substring(pos + 1));	        return getFraction(numer, denom);	    }	}
public static boolean isAlpha(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public boolean contains(final T element) {	    if (element == null) {	        return false;	    }	    return comparator.compare(element, minimum) > -1 && comparator.compare(element, maximum) < 1;	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static Date parseDate(final String str, final Locale locale, final String... parsePatterns) throws ParseException {	    return parseDateWithLeniency(str, locale, parsePatterns, true);	}
protected boolean isUseFieldNames() {	    return useFieldNames;	}
@Override	public int length() {	    return size;	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
@Override	public void mark(final int readAheadLimit) {	    mark = pos;	}
protected String getSummaryObjectStartText() {	    return summaryObjectStartText;	}
public static String toString(final Object obj, final String nullStr) {	    return obj == null ? nullStr : obj.toString();	}
public byte clearByte(final byte holder) {	    return (byte) clear(holder);	}
public void suspend() {	    if (this.runningState != STATE_RUNNING) {	        throw new IllegalStateException("Stopwatch must be running to suspend. ");	    }	    this.stopTime = System.nanoTime();	    this.runningState = STATE_SUSPENDED;	}
public boolean isEquals() {	    return this.isEquals;	}
@Override	public String toString() {	    if (this.getObject() == null) {	        return this.getStyle().getNullText();	    }	    Class<?> clazz = this.getObject().getClass();	    this.appendFieldsIn(clazz);	    while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {	        clazz = clazz.getSuperclass();	        this.appendFieldsIn(clazz);	    }	    return super.toString();	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
static int lastIndexOf(final CharSequence cs, final CharSequence searchChar, final int start) {	    return cs.toString().lastIndexOf(searchChar.toString(), start);	}
public static boolean isSameLocalTime(final Calendar cal1, final Calendar cal2) {	    if (cal1 == null || cal2 == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public static <K, V> V createIfAbsent(final ConcurrentMap<K, V> map, final K key, final ConcurrentInitializer<V> init) throws ConcurrentException {	    if (map == null || init == null) {	        return null;	    }	    final V value = map.get(key);	    if (value == null) {	        return putIfAbsent(map, key, init.get());	    }	    return value;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public StrSubstitutor setVariablePrefixMatcher(final StrMatcher prefixMatcher) {	    if (prefixMatcher == null) {	        throw new IllegalArgumentException("Variable prefix matcher must not be null!");	    }	    this.prefixMatcher = prefixMatcher;	    return this;	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
public static <E extends Enum<E>> long generateBitVector(final Class<E> enumClass, final E... values) {	    Validate.noNullElements(values);	    return generateBitVector(enumClass, Arrays.<E>asList(values));	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public int capacity() {	    return buffer.length;	}
public String getNullText() {	    return nullText;	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public StrBuilder deleteCharAt(final int index) {	    if (index < 0 || index >= size) {	        throw new StringIndexOutOfBoundsException(index);	    }	    deleteImpl(index, index + 1, 1);	    return this;	}
@Override	public T get() throws ConcurrentException {	    try {	        return getFuture().get();	    } catch (final ExecutionException execex) {	        ConcurrentUtils.handleCause(execex);	        return null;	    } catch (final InterruptedException iex) {	        Thread.currentThread().interrupt();	        throw new ConcurrentException(iex);	    }	}
private static long getFragment(final Calendar calendar, final int fragment, final int unit) {	    if (calendar == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final long millisPerUnit = getMillisPerUnit(unit);	    long result = 0;	    switch(fragment) {	        case Calendar.YEAR:	            result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;	            break;	        case Calendar.MONTH:	            result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;	            break;	    }	    switch(fragment) {	        case Calendar.YEAR:	        case Calendar.MONTH:	        case Calendar.DAY_OF_YEAR:	        case Calendar.DATE:	            result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;	        case Calendar.HOUR_OF_DAY:	            result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;	        case Calendar.MINUTE:	            result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;	        case Calendar.SECOND:	            result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;	            break;	        case Calendar.MILLISECOND:	            break;	        default:	            throw new IllegalArgumentException("The fragment " + fragment + " is not supported");	    }	    return result;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
void increment() {	    count++;	}
public boolean isEmpty() {	    return size == 0;	}
public synchronized boolean start() {	    if (!isStarted()) {	        ExecutorService tempExec;	        executor = getExternalExecutor();	        if (executor == null) {	            executor = tempExec = createExecutor();	        } else {	            tempExec = null;	        }	        future = executor.submit(createTask(tempExec));	        return true;	    }	    return false;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
@Override	public int length() {	    return size;	}
public StrBuilder appendFixedWidthPadLeft(final int value, final int width, final char padChar) {	    return appendFixedWidthPadLeft(String.valueOf(value), width, padChar);	}
static Object removeAll(final Object array, final BitSet indices) {	    final int srcLength = ArrayUtils.getLength(array);	    final int removals = indices.cardinality();	    final Object result = Array.newInstance(array.getClass().getComponentType(), srcLength - removals);	    int srcIndex = 0;	    int destIndex = 0;	    int count;	    int set;	    while ((set = indices.nextSetBit(srcIndex)) != -1) {	        count = set - srcIndex;	        if (count > 0) {	            System.arraycopy(array, srcIndex, result, destIndex, count);	            destIndex += count;	        }	        srcIndex = indices.nextClearBit(set);	    }	    count = srcLength - srcIndex;	    if (count > 0) {	        System.arraycopy(array, srcIndex, result, destIndex, count);	    }	    return result;	}
public static String formatPeriod(final long startMillis, final long endMillis, final String format, final boolean padWithZeros, final TimeZone timezone) {	    final Token[] tokens = lexx(format);	    final Calendar start = Calendar.getInstance(timezone);	    start.setTime(new Date(startMillis));	    final Calendar end = Calendar.getInstance(timezone);	    end.setTime(new Date(endMillis));	    int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);	    int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);	    int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);	    int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);	    int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);	    int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);	    int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);	    while (milliseconds < 0) {	        milliseconds += 1000;	        seconds -= 1;	    }	    while (seconds < 0) {	        seconds += 60;	        minutes -= 1;	    }	    while (minutes < 0) {	        minutes += 60;	        hours -= 1;	    }	    while (hours < 0) {	        hours += 24;	        days -= 1;	    }	    if (Token.containsTokenWithValue(tokens, M)) {	        while (days < 0) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            months -= 1;	            start.add(Calendar.MONTH, 1);	        }	        while (months < 0) {	            months += 12;	            years -= 1;	        }	        if (!Token.containsTokenWithValue(tokens, y) && years != 0) {	            while (years != 0) {	                months += 12 * years;	                years = 0;	            }	        }	    } else {	        if (!Token.containsTokenWithValue(tokens, y)) {	            int target = end.get(Calendar.YEAR);	            if (months < 0) {	                target -= 1;	            }	            while (start.get(Calendar.YEAR) != target) {	                days += start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);	                if (start instanceof GregorianCalendar && start.get(Calendar.MONTH) == Calendar.FEBRUARY && start.get(Calendar.DAY_OF_MONTH) == 29) {	                    days += 1;	                }	                start.add(Calendar.YEAR, 1);	                days += start.get(Calendar.DAY_OF_YEAR);	            }	            years = 0;	        }	        while (start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            start.add(Calendar.MONTH, 1);	        }	        months = 0;	        while (days < 0) {	            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);	            months -= 1;	            start.add(Calendar.MONTH, 1);	        }	    }	    if (!Token.containsTokenWithValue(tokens, d)) {	        hours += 24 * days;	        days = 0;	    }	    if (!Token.containsTokenWithValue(tokens, H)) {	        minutes += 60 * hours;	        hours = 0;	    }	    if (!Token.containsTokenWithValue(tokens, m)) {	        seconds += 60 * minutes;	        minutes = 0;	    }	    if (!Token.containsTokenWithValue(tokens, s)) {	        milliseconds += 1000 * seconds;	        seconds = 0;	    }	    return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);	}
public int lastIndexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex >= size ? size - 1 : startIndex);	    if (matcher == null || startIndex < 0) {	        return -1;	    }	    final char[] buf = buffer;	    final int endIndex = startIndex + 1;	    for (int i = startIndex; i >= 0; i--) {	        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {	            return i;	        }	    }	    return -1;	}
@Override	public boolean translate(final int codepoint, final Writer out) throws IOException {	    if (between) {	        if (codepoint < below || codepoint > above) {	            return false;	        }	    } else {	        if (codepoint >= below && codepoint <= above) {	            return false;	        }	    }	    out.write("&#");	    out.write(Integer.toString(codepoint, 10));	    out.write(';');	    return true;	}
public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {	    if (array == null) {	        return null;	    }	    if (startIndexInclusive < 0) {	        startIndexInclusive = 0;	    }	    if (endIndexExclusive > array.length) {	        endIndexExclusive = array.length;	    }	    final int newSize = endIndexExclusive - startIndexInclusive;	    if (newSize <= 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] subarray = new boolean[newSize];	    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);	    return subarray;	}
public static String longToHex(final long src, final int srcPos, final String dstInit, final int dstPos, final int nHexs) {	    if (0 == nHexs) {	        return dstInit;	    }	    if ((nHexs - 1) * 4 + srcPos >= 64) {	        throw new IllegalArgumentException("(nHexs-1)*4+srcPos is greather or equal to than 64");	    }	    final StringBuilder sb = new StringBuilder(dstInit);	    int shift = 0;	    int append = sb.length();	    for (int i = 0; i < nHexs; i++) {	        shift = i * 4 + srcPos;	        final int bits = (int) (0xF & (src >> shift));	        if (dstPos + i == append) {	            ++append;	            sb.append(intToHexDigit(bits));	        } else {	            sb.setCharAt(dstPos + i, intToHexDigit(bits));	        }	    }	    return sb.toString();	}
public static <T> T clone(final T obj) {	    if (obj instanceof Cloneable) {	        final Object result;	        if (obj.getClass().isArray()) {	            final Class<?> componentType = obj.getClass().getComponentType();	            if (!componentType.isPrimitive()) {	                result = ((Object[]) obj).clone();	            } else {	                int length = Array.getLength(obj);	                result = Array.newInstance(componentType, length);	                while (length-- > 0) {	                    Array.set(result, length, Array.get(obj, length));	                }	            }	        } else {	            try {	                final Method clone = obj.getClass().getMethod("clone");	                result = clone.invoke(obj);	            } catch (final NoSuchMethodException e) {	                throw new CloneFailedException("Cloneable type " + obj.getClass().getName() + " has no clone method", e);	            } catch (final IllegalAccessException e) {	                throw new CloneFailedException("Cannot clone Cloneable type " + obj.getClass().getName(), e);	            } catch (final InvocationTargetException e) {	                throw new CloneFailedException("Exception cloning Cloneable type " + obj.getClass().getName(), e.getCause());	            }	        }	        @SuppressWarnings("unchecked")	        final T checked = (T) result;	        return checked;	    }	    return null;	}
public boolean isEmpty() {	    return size == 0;	}
public static String removeStartIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (startsWithIgnoreCase(str, remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
synchronized void endOfPeriod() {	    lastCallsPerPeriod = acquireCount;	    totalAcquireCount += acquireCount;	    periodCount++;	    acquireCount = 0;	    notifyAll();	}
@Override	public void add(final String obj) {	    throw new UnsupportedOperationException("add() is unsupported");	}
public static BigInteger createBigInteger(final String str) {	    if (str == null) {	        return null;	    }	    int pos = 0;	    int radix = 10;	    boolean negate = false;	    if (str.startsWith("-")) {	        negate = true;	        pos = 1;	    }	    if (str.startsWith("0x", pos) || str.startsWith("0x", pos)) {	        radix = 16;	        pos += 2;	    } else if (str.startsWith("#", pos)) {	        radix = 16;	        pos++;	    } else if (str.startsWith("0", pos) && str.length() > pos + 1) {	        radix = 8;	        pos++;	    }	    final BigInteger value = new BigInteger(str.substring(pos), radix);	    return negate ? value.negate() : value;	}
public static String removeEndIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (endsWithIgnoreCase(str, remove)) {	        return str.substring(0, str.length() - remove.length());	    }	    return str;	}
public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, 1);	}
private static Date set(final Date date, final int calendarField, final int amount) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final Calendar c = Calendar.getInstance();	    c.setLenient(false);	    c.setTime(date);	    c.set(calendarField, amount);	    return c.getTime();	}
public static Boolean[] toObject(final boolean[] array) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_OBJECT_ARRAY;	    }	    final Boolean[] result = new Boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);	    }	    return result;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public String getNewLineText() {	    return newLine;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static boolean isNotBlank(final CharSequence cs) {	    return !StringUtils.isBlank(cs);	}
public final synchronized ExecutorService getExternalExecutor() {	    return externalExecutor;	}
public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {	    if (array == null) {	        return null;	    }	    if (startIndexInclusive < 0) {	        startIndexInclusive = 0;	    }	    if (endIndexExclusive > array.length) {	        endIndexExclusive = array.length;	    }	    final int newSize = endIndexExclusive - startIndexInclusive;	    if (newSize <= 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] subarray = new boolean[newSize];	    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);	    return subarray;	}
public static boolean isSameDay(final Calendar cal1, final Calendar cal2) {	    if (cal1 == null || cal2 == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));	}
protected String getNullText() {	    return nullText;	}
public static boolean isAllLowerCase(final CharSequence cs) {	    if (cs == null || isEmpty(cs)) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLowerCase(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public boolean contains(final StrMatcher matcher) {	    return indexOf(matcher, 0) >= 0;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public int size() {	    return size;	}
public static int indexOfDifference(final CharSequence... css) {	    if (css == null || css.length <= 1) {	        return INDEX_NOT_FOUND;	    }	    boolean anyStringNull = false;	    boolean allStringsNull = true;	    final int arrayLen = css.length;	    int shortestStrLen = Integer.MAX_VALUE;	    int longestStrLen = 0;	    for (int i = 0; i < arrayLen; i++) {	        if (css[i] == null) {	            anyStringNull = true;	            shortestStrLen = 0;	        } else {	            allStringsNull = false;	            shortestStrLen = Math.min(css[i].length(), shortestStrLen);	            longestStrLen = Math.max(css[i].length(), longestStrLen);	        }	    }	    if (allStringsNull || longestStrLen == 0 && !anyStringNull) {	        return INDEX_NOT_FOUND;	    }	    if (shortestStrLen == 0) {	        return 0;	    }	    int firstDiff = -1;	    for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {	        final char comparisonChar = css[0].charAt(stringPos);	        for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {	            if (css[arrayPos].charAt(stringPos) != comparisonChar) {	                firstDiff = stringPos;	                break;	            }	        }	        if (firstDiff != -1) {	            break;	        }	    }	    if (firstDiff == -1 && shortestStrLen != longestStrLen) {	        return shortestStrLen;	    }	    return firstDiff;	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
public static int indexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = Integer.MAX_VALUE;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.indexOf(str, search, 0);	        if (tmp == INDEX_NOT_FOUND) {	            continue;	        }	        if (tmp < ret) {	            ret = tmp;	        }	    }	    return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;	}
public int capacity() {	    return buffer.length;	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static CharRange isIn(final char start, final char end) {	    return new CharRange(start, end, false);	}
public static String[] splitByWholeSeparator(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, false);	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
@Override	public boolean cancel(final boolean mayInterruptIfRunning) {	    return false;	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public static int hexDigitMsb0ToInt(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return 0x0;	        case '1':	            return 0x8;	        case '2':	            return 0x4;	        case '3':	            return 0xC;	        case '4':	            return 0x2;	        case '5':	            return 0xA;	        case '6':	            return 0x6;	        case '7':	            return 0xE;	        case '8':	            return 0x1;	        case '9':	            return 0x9;	        case 'a':	        case 'A':	            return 0x5;	        case 'b':	        case 'B':	            return 0xD;	        case 'c':	        case 'C':	            return 0x3;	        case 'd':	        case 'D':	            return 0xB;	        case 'e':	        case 'E':	            return 0x7;	        case 'f':	        case 'F':	            return 0xF;	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public synchronized Future<T> getFuture() {	    if (future == null) {	        throw new IllegalStateException("start() must be called first!");	    }	    return future;	}
public String leftString(final int length) {	    if (length <= 0) {	        return "";	    } else if (length >= size) {	        return new String(buffer, 0, size);	    } else {	        return new String(buffer, 0, length);	    }	}
private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, final Class<?> toClass, final Map<TypeVariable<?>, Type> subtypeVarAssigns) {	    if (!isAssignable(cls, toClass)) {	        return null;	    }	    if (cls.isPrimitive()) {	        if (toClass.isPrimitive()) {	            return new HashMap<TypeVariable<?>, Type>();	        }	        cls = ClassUtils.primitiveToWrapper(cls);	    }	    final HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);	    if (toClass.equals(cls)) {	        return typeVarAssigns;	    }	    return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);	}
public static Character toCharacterObject(final String str) {	    if (StringUtils.isEmpty(str)) {	        return null;	    }	    return Character.valueOf(str.charAt(0));	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
public String replace(final Object source) {	    if (source == null) {	        return null;	    }	    final StrBuilder buf = new StrBuilder().append(source);	    substitute(buf, 0, buf.length());	    return buf.toString();	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public StrBuilder replaceAll(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, -1);	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
public static String chop(final String str) {	    if (str == null) {	        return null;	    }	    final int strLen = str.length();	    if (strLen < 2) {	        return EMPTY;	    }	    final int lastIdx = strLen - 1;	    final String ret = str.substring(0, lastIdx);	    final char last = str.charAt(lastIdx);	    if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {	        return ret.substring(0, lastIdx - 1);	    }	    return ret;	}
public static <T> EventListenerSupport<T> create(final Class<T> listenerInterface) {	    return new EventListenerSupport<T>(listenerInterface);	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
public HashCodeBuilder append(final short[] array) {	    if (array == null) {	        iTotal = iTotal * iConstant;	    } else {	        for (final short element : array) {	            append(element);	        }	    }	    return this;	}
public void appendToString(final StringBuffer buffer, final String toString) {	    if (toString != null) {	        final int pos1 = toString.indexOf(contentStart) + contentStart.length();	        final int pos2 = toString.lastIndexOf(contentEnd);	        if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {	            final String data = toString.substring(pos1, pos2);	            if (fieldSeparatorAtStart) {	                removeLastFieldSeparator(buffer);	            }	            buffer.append(data);	            appendFieldSeparator(buffer);	        }	    }	}
@Override	public int compare(final Object obj1, final Object obj2) {	    return ((Comparable) obj1).compareTo(obj2);	}
@Override	public int compareTo(final Fraction other) {	    if (this == other) {	        return 0;	    }	    if (numerator == other.numerator && denominator == other.denominator) {	        return 0;	    }	    final long first = (long) numerator * (long) other.denominator;	    final long second = (long) other.numerator * (long) denominator;	    if (first == second) {	        return 0;	    } else if (first < second) {	        return -1;	    } else {	        return 1;	    }	}
public boolean containsRange(final Range<T> otherRange) {	    if (otherRange == null) {	        return false;	    }	    return contains(otherRange.minimum) && contains(otherRange.maximum);	}
public static int indexOfIgnoreCase(final CharSequence str, final CharSequence searchStr, int startPos) {	    if (str == null || searchStr == null) {	        return INDEX_NOT_FOUND;	    }	    if (startPos < 0) {	        startPos = 0;	    }	    final int endLimit = str.length() - searchStr.length() + 1;	    if (startPos > endLimit) {	        return INDEX_NOT_FOUND;	    }	    if (searchStr.length() == 0) {	        return startPos;	    }	    for (int i = startPos; i < endLimit; i++) {	        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static String leftPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return leftPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return padStr.concat(str);	    } else if (pads < padLen) {	        return padStr.substring(0, pads).concat(str);	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return new String(padding).concat(str);	    }	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public int size() {	    return size;	}
public static Boolean or(final Boolean... array) {	    if (array == null) {	        throw new IllegalArgumentException("The Array must not be null");	    }	    if (array.length == 0) {	        throw new IllegalArgumentException("Array is empty");	    }	    try {	        final boolean[] primitive = ArrayUtils.toPrimitive(array);	        return or(primitive) ? Boolean.TRUE : Boolean.FALSE;	    } catch (final NullPointerException ex) {	        throw new IllegalArgumentException("The array must not contain any null elements");	    }	}
public static <T extends Comparable<? super T>> T min(final T... values) {	    T result = null;	    if (values != null) {	        for (final T value : values) {	            if (compare(value, result, true) < 0) {	                result = value;	            }	        }	    }	    return result;	}
public static String substringAfterLast(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (isEmpty(separator)) {	        return EMPTY;	    }	    final int pos = str.lastIndexOf(separator);	    if (pos == INDEX_NOT_FOUND || pos == str.length() - separator.length()) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
public StringBuilder toStringBuilder() {	    return new StringBuilder(size).append(buffer, 0, size);	}
public int size() {	    return size;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public static StrTokenizer getTSVInstance(final char[] input) {	    final StrTokenizer tok = getTSVClone();	    tok.reset(input);	    return tok;	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
@Deprecated	public static String chomp(final String str, final String separator) {	    return removeEnd(str, separator);	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public boolean contains(final CharRange range) {	    if (range == null) {	        throw new IllegalArgumentException("The Range must not be null");	    }	    if (negated) {	        if (range.negated) {	            return start >= range.start && end <= range.end;	        }	        return range.end < start || range.start > end;	    }	    if (range.negated) {	        return start == 0 && end == Character.MAX_VALUE;	    }	    return start <= range.start && end >= range.end;	}
public static StrTokenizer getTSVInstance(final char[] input) {	    final StrTokenizer tok = getTSVClone();	    tok.reset(input);	    return tok;	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
public static <T> T CONST(final T v) {	    return v;	}
public StringBuffer toStringBuffer() {	    return new StringBuffer(size).append(buffer, 0, size);	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public int indexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex < 0 ? 0 : startIndex);	    if (matcher == null || startIndex >= size) {	        return -1;	    }	    final int len = size;	    final char[] buf = buffer;	    for (int i = startIndex; i < len; i++) {	        if (matcher.isMatch(buf, i, startIndex, len) > 0) {	            return i;	        }	    }	    return -1;	}
public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] result = new boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        final Boolean b = array[i];	        result[i] = (b == null ? valueForNull : b.booleanValue());	    }	    return result;	}
public static String removeStartIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (startsWithIgnoreCase(str, remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public int indexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex < 0 ? 0 : startIndex);	    if (matcher == null || startIndex >= size) {	        return -1;	    }	    final int len = size;	    final char[] buf = buffer;	    for (int i = startIndex; i < len; i++) {	        if (matcher.isMatch(buf, i, startIndex, len) > 0) {	            return i;	        }	    }	    return -1;	}
public static Date parseDateStrictly(final String str, final Locale locale, final String... parsePatterns) throws ParseException {	    return parseDateWithLeniency(str, null, parsePatterns, false);	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
public boolean containsRange(final Range<T> otherRange) {	    if (otherRange == null) {	        return false;	    }	    return contains(otherRange.minimum) && contains(otherRange.maximum);	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public int size() {	    return size;	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public StrBuilder appendAll(final Iterator<?> it) {	    if (it != null) {	        while (it.hasNext()) {	            append(it.next());	        }	    }	    return this;	}
public String replace(final Object source) {	    if (source == null) {	        return null;	    }	    final StrBuilder buf = new StrBuilder().append(source);	    substitute(buf, 0, buf.length());	    return buf.toString();	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
public static Date round(final Object date, final int field) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    if (date instanceof Date) {	        return round((Date) date, field);	    } else if (date instanceof Calendar) {	        return round((Calendar) date, field).getTime();	    } else {	        throw new ClassCastException("Could not round " + date);	    }	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
@Override	public int length() {	    return size;	}
@Override	public int length() {	    return size;	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public StrBuilder appendNull() {	    if (nullText == null) {	        return this;	    }	    return append(nullText);	}
public String getNullText() {	    return nullText;	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public char getStart() {	    return this.start;	}
protected String getSummaryObjectStartText() {	    return summaryObjectStartText;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public static Date round(final Object date, final int field) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    if (date instanceof Date) {	        return round((Date) date, field);	    } else if (date instanceof Calendar) {	        return round((Calendar) date, field).getTime();	    } else {	        throw new ClassCastException("Could not round " + date);	    }	}
public static String upperCase(final String str, final Locale locale) {	    if (str == null) {	        return null;	    }	    return str.toUpperCase(locale);	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public static boolean reflectionEquals(final Object lhs, final Object rhs, final boolean testTransients, final Class<?> reflectUpToClass, final String... excludeFields) {	    if (lhs == rhs) {	        return true;	    }	    if (lhs == null || rhs == null) {	        return false;	    }	    final Class<?> lhsClass = lhs.getClass();	    final Class<?> rhsClass = rhs.getClass();	    Class<?> testClass;	    if (lhsClass.isInstance(rhs)) {	        testClass = lhsClass;	        if (!rhsClass.isInstance(lhs)) {	            testClass = rhsClass;	        }	    } else if (rhsClass.isInstance(lhs)) {	        testClass = rhsClass;	        if (!lhsClass.isInstance(rhs)) {	            testClass = lhsClass;	        }	    } else {	        return false;	    }	    final EqualsBuilder equalsBuilder = new EqualsBuilder();	    try {	        reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);	        while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {	            testClass = testClass.getSuperclass();	            reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);	        }	    } catch (final IllegalArgumentException e) {	        return false;	    }	    return equalsBuilder.isEquals();	}
public boolean isEquals() {	    return this.isEquals;	}
public static boolean endsWithIgnoreCase(final CharSequence str, final CharSequence suffix) {	    return endsWith(str, suffix, true);	}
protected void appendDetail(final StringBuffer buffer, final String fieldName, final boolean[] array) {	    buffer.append(arrayStart);	    for (int i = 0; i < array.length; i++) {	        if (i > 0) {	            buffer.append(arraySeparator);	        }	        appendDetail(buffer, fieldName, array[i]);	    }	    buffer.append(arrayEnd);	}
public static String removePattern(final String source, final String regex) {	    return replacePattern(source, regex, StringUtils.EMPTY);	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
protected boolean isArrayContentDetail() {	    return arrayContentDetail;	}
public boolean isEmpty() {	    return size == 0;	}
public char[] toCharArray(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len == 0) {	        return ArrayUtils.EMPTY_CHAR_ARRAY;	    }	    final char[] chars = new char[len];	    System.arraycopy(buffer, startIndex, chars, 0, len);	    return chars;	}
protected String getFieldNameValueSeparator() {	    return fieldNameValueSeparator;	}
public boolean isEmpty() {	    return size == 0;	}
public StrTokenizer setIgnoreEmptyTokens(final boolean ignoreEmptyTokens) {	    this.ignoreEmptyTokens = ignoreEmptyTokens;	    return this;	}
public static boolean containsOnly(final CharSequence cs, final String validChars) {	    if (cs == null || validChars == null) {	        return false;	    }	    return containsOnly(cs, validChars.toCharArray());	}
protected String getSummaryObjectStartText() {	    return summaryObjectStartText;	}
protected boolean isUseClassName() {	    return useClassName;	}
@Override	public void setFormats(final Format[] newFormats) {	    throw new UnsupportedOperationException();	}
@Override	public float floatValue() {	    return (float) numerator / (float) denominator;	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
public static int indexOfAnyBut(final CharSequence seq, final CharSequence searchChars) {	    if (isEmpty(seq) || isEmpty(searchChars)) {	        return INDEX_NOT_FOUND;	    }	    final int strLen = seq.length();	    for (int i = 0; i < strLen; i++) {	        final char ch = seq.charAt(i);	        final boolean chFound = CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0;	        if (i + 1 < strLen && Character.isHighSurrogate(ch)) {	            final char ch2 = seq.charAt(i + 1);	            if (chFound && CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0) {	                return i;	            }	        } else {	            if (!chFound) {	                return i;	            }	        }	    }	    return INDEX_NOT_FOUND;	}
public static String replaceChars(final String str, final String searchChars, String replaceChars) {	    if (isEmpty(str) || isEmpty(searchChars)) {	        return str;	    }	    if (replaceChars == null) {	        replaceChars = EMPTY;	    }	    boolean modified = false;	    final int replaceCharsLength = replaceChars.length();	    final int strLength = str.length();	    final StringBuilder buf = new StringBuilder(strLength);	    for (int i = 0; i < strLength; i++) {	        final char ch = str.charAt(i);	        final int index = searchChars.indexOf(ch);	        if (index >= 0) {	            modified = true;	            if (index < replaceCharsLength) {	                buf.append(replaceChars.charAt(index));	            }	        } else {	            buf.append(ch);	        }	    }	    if (modified) {	        return buf.toString();	    }	    return str;	}
public static String trim(final String str) {	    return str == null ? null : str.trim();	}
@Override	public Integer build() {	    return Integer.valueOf(toHashCode());	}
@Override	public String previous() {	    if (hasPrevious()) {	        return tokens[--tokenPos];	    }	    throw new NoSuchElementException();	}
protected String getSizeStartText() {	    return sizeStartText;	}
synchronized void endOfPeriod() {	    lastCallsPerPeriod = acquireCount;	    totalAcquireCount += acquireCount;	    periodCount++;	    acquireCount = 0;	    notifyAll();	}
public int capacity() {	    return buffer.length;	}
public static <T extends Iterable<?>> T noNullElements(final T iterable) {	    return noNullElements(iterable, DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE);	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
public static StrTokenizer getCSVInstance(final char[] input) {	    final StrTokenizer tok = getCSVClone();	    tok.reset(input);	    return tok;	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
public static String center(String str, final int size, String padStr) {	    if (str == null || size <= 0) {	        return str;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    str = leftPad(str, strLen + pads / 2, padStr);	    str = rightPad(str, size, padStr);	    return str;	}
public static boolean[] byteToBinary(final byte src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {	    if (0 == nBools) {	        return dst;	    }	    if (nBools - 1 + srcPos >= 8) {	        throw new IllegalArgumentException("nBools-1+srcPos is greather or equal to than 8");	    }	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + srcPos;	        dst[dstPos + i] = ((0x1 & (src >> shift)) != 0);	    }	    return dst;	}
@Override	public boolean ready() {	    return pos < StrBuilder.this.size();	}
@Override	public int length() {	    return size;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {	    final StrLookup<?> resolver = getVariableResolver();	    if (resolver == null) {	        return null;	    }	    return resolver.lookup(variableName);	}
public static String stripToNull(String str) {	    if (str == null) {	        return null;	    }	    str = strip(str, null);	    return str.isEmpty() ? null : str;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static UnicodeEscaper between(final int codepointLow, final int codepointHigh) {	    return new UnicodeEscaper(codepointLow, codepointHigh, true);	}
public static <T> T CONST(final T v) {	    return v;	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
public static String random(final int count, final char... chars) {	    if (chars == null) {	        return random(count, 0, 0, false, false, null, RANDOM);	    }	    return random(count, 0, chars.length, false, false, chars, RANDOM);	}
protected boolean isUseShortClassName() {	    return useShortClassName;	}
public static String formatUTC(final Date date, final String pattern, final Locale locale) {	    return format(date, pattern, UTC_TIME_ZONE, locale);	}
@Override	public void mark(final int readAheadLimit) {	    mark = pos;	}
public static String random(final int count, final char... chars) {	    if (chars == null) {	        return random(count, 0, 0, false, false, null, RANDOM);	    }	    return random(count, 0, chars.length, false, false, chars, RANDOM);	}
@Override	public int compare(final Object obj1, final Object obj2) {	    return ((Comparable) obj1).compareTo(obj2);	}
public static boolean isBlank(final CharSequence cs) {	    int strLen;	    if (cs == null || (strLen = cs.length()) == 0) {	        return true;	    }	    for (int i = 0; i < strLen; i++) {	        if (Character.isWhitespace(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
private static boolean endsWith(final CharSequence str, final CharSequence suffix, final boolean ignoreCase) {	    if (str == null || suffix == null) {	        return str == null && suffix == null;	    }	    if (suffix.length() > str.length()) {	        return false;	    }	    final int strOffset = str.length() - suffix.length();	    return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());	}
@Override	public R setValue(final R value) {	    throw new UnsupportedOperationException();	}
public static CharRange isNot(final char ch) {	    return new CharRange(ch, ch, true);	}
@Override	public int compareTo(final Fraction other) {	    if (this == other) {	        return 0;	    }	    if (numerator == other.numerator && denominator == other.denominator) {	        return 0;	    }	    final long first = (long) numerator * (long) other.denominator;	    final long second = (long) other.numerator * (long) denominator;	    if (first == second) {	        return 0;	    } else if (first < second) {	        return -1;	    } else {	        return 1;	    }	}
public int set(final int holder) {	    return holder | _mask;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public StrBuilder appendFixedWidthPadRight(final int value, final int width, final char padChar) {	    return appendFixedWidthPadRight(String.valueOf(value), width, padChar);	}
public int capacity() {	    return buffer.length;	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static String[] substringsBetween(final String str, final String open, final String close) {	    if (str == null || isEmpty(open) || isEmpty(close)) {	        return null;	    }	    final int strLen = str.length();	    if (strLen == 0) {	        return ArrayUtils.EMPTY_STRING_ARRAY;	    }	    final int closeLen = close.length();	    final int openLen = open.length();	    final List<String> list = new ArrayList<String>();	    int pos = 0;	    while (pos < strLen - closeLen) {	        int start = str.indexOf(open, pos);	        if (start < 0) {	            break;	        }	        start += openLen;	        final int end = str.indexOf(close, start);	        if (end < 0) {	            break;	        }	        list.add(str.substring(start, end));	        pos = end + closeLen;	    }	    if (list.isEmpty()) {	        return null;	    }	    return list.toArray(new String[list.size()]);	}
public long getPeriod() {	    return period;	}
@Override	public int length() {	    return size;	}
protected String getSizeStartText() {	    return sizeStartText;	}
public static String appendIfMissing(final String str, final CharSequence suffix, final CharSequence... suffixes) {	    return appendIfMissing(str, suffix, false, suffixes);	}
protected void validateIndex(final int index) {	    if (index < 0 || index > size) {	        throw new StringIndexOutOfBoundsException(index);	    }	}
public static Field getField(final Class<?> cls, final String fieldName, final boolean forceAccess) {	    if (cls == null) {	        throw new IllegalArgumentException("The class must not be null");	    }	    if (fieldName == null) {	        throw new IllegalArgumentException("The field name must not be null");	    }	    for (Class<?> acls = cls; acls != null; acls = acls.getSuperclass()) {	        try {	            final Field field = acls.getDeclaredField(fieldName);	            if (!Modifier.isPublic(field.getModifiers())) {	                if (forceAccess) {	                    field.setAccessible(true);	                } else {	                    continue;	                }	            }	            return field;	        } catch (final NoSuchFieldException ex) {	        }	    }	    Field match = null;	    for (final Class<?> class1 : ClassUtils.getAllInterfaces(cls)) {	        try {	            final Field test = ((Class<?>) class1).getField(fieldName);	            if (match != null) {	                throw new IllegalArgumentException("Reference to field " + fieldName + " is ambiguous relative to " + cls + "; a matching field exists on two or more implemented interfaces.");	            }	            match = test;	        } catch (final NoSuchFieldException ex) {	        }	    }	    return match;	}
public boolean isEmptyTokenAsNull() {	    return this.emptyAsNull;	}
public boolean isAllSet(final int holder) {	    return (holder & _mask) == _mask;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public boolean endsWith(final String str) {	    if (str == null) {	        return false;	    }	    final int len = str.length();	    if (len == 0) {	        return true;	    }	    if (len > size) {	        return false;	    }	    int pos = size - len;	    for (int i = 0; i < len; i++, pos++) {	        if (buffer[pos] != str.charAt(i)) {	            return false;	        }	    }	    return true;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
private static void getAllInterfaces(Class<?> cls, final HashSet<Class<?>> interfacesFound) {	    while (cls != null) {	        final Class<?>[] interfaces = cls.getInterfaces();	        for (final Class<?> i : interfaces) {	            if (interfacesFound.add(i)) {	                getAllInterfaces(i, interfacesFound);	            }	        }	        cls = cls.getSuperclass();	    }	}
protected ScheduledExecutorService getExecutorService() {	    return executorService;	}
protected String getSummaryObjectStartText() {	    return summaryObjectStartText;	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public static int reflectionHashCode(final Object object, final String... excludeFields) {	    return reflectionHashCode(17, 37, object, false, null, excludeFields);	}
public long getNanoTime() {	    if (this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {	        return this.stopTime - this.startTime;	    } else if (this.runningState == STATE_UNSTARTED) {	        return 0;	    } else if (this.runningState == STATE_RUNNING) {	        return System.nanoTime() - this.startTime;	    }	    throw new RuntimeException("Illegal running state has occurred.");	}
public void decrement() {	    value--;	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static String[] splitByWholeSeparator(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, false);	}
@Override	public Byte getValue() {	    return Byte.valueOf(this.value);	}
public static CharRange is(final char ch) {	    return new CharRange(ch, ch, false);	}
public String getNullText() {	    return nullText;	}
public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, 1);	}
public boolean isBeforeRange(final Range<T> otherRange) {	    if (otherRange == null) {	        return false;	    }	    return isBefore(otherRange.minimum);	}
public static String abbreviate(final String str, int offset, final int maxWidth) {	    if (str == null) {	        return null;	    }	    if (maxWidth < 4) {	        throw new IllegalArgumentException("Minimum abbreviation width is 4");	    }	    if (str.length() <= maxWidth) {	        return str;	    }	    if (offset > str.length()) {	        offset = str.length();	    }	    if (str.length() - offset < maxWidth - 3) {	        offset = str.length() - (maxWidth - 3);	    }	    final String abrevMarker = "...";	    if (offset <= 4) {	        return str.substring(0, maxWidth - 3) + abrevMarker;	    }	    if (maxWidth < 7) {	        throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");	    }	    if (offset + maxWidth - 3 < str.length()) {	        return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);	    }	    return abrevMarker + str.substring(str.length() - (maxWidth - 3));	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
@Override	public String toString() {	    return new String(buffer, 0, size);	}
public String toString(final String format) {	    return String.format(format, getLeft(), getMiddle(), getRight());	}
@Override	public int translate(final CharSequence input, final int index, final Writer out) throws IOException {	    int max = longest;	    if (index + longest > input.length()) {	        max = input.length() - index;	    }	    for (int i = max; i >= shortest; i--) {	        final CharSequence subSeq = input.subSequence(index, index + i);	        final CharSequence result = lookupMap.get(subSeq.toString());	        if (result != null) {	            out.write(result.toString());	            return i;	        }	    }	    return 0;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static boolean containsOnly(final CharSequence cs, final String validChars) {	    if (cs == null || validChars == null) {	        return false;	    }	    return containsOnly(cs, validChars.toCharArray());	}
public static String intToHex(final int src, final int srcPos, final String dstInit, final int dstPos, final int nHexs) {	    if (0 == nHexs) {	        return dstInit;	    }	    if ((nHexs - 1) * 4 + srcPos >= 32) {	        throw new IllegalArgumentException("(nHexs-1)*4+srcPos is greather or equal to than 32");	    }	    final StringBuilder sb = new StringBuilder(dstInit);	    int shift = 0;	    int append = sb.length();	    for (int i = 0; i < nHexs; i++) {	        shift = i * 4 + srcPos;	        final int bits = 0xF & (src >> shift);	        if (dstPos + i == append) {	            ++append;	            sb.append(intToHexDigit(bits));	        } else {	            sb.setCharAt(dstPos + i, intToHexDigit(bits));	        }	    }	    return sb.toString();	}
@Override	public boolean equals(final Object obj) {	    if (obj == this) {	        return true;	    }	    if (obj instanceof CharRange == false) {	        return false;	    }	    final CharRange other = (CharRange) obj;	    return start == other.start && end == other.end && negated == other.negated;	}
@Override	public int compare(final Object obj1, final Object obj2) {	    return ((Comparable) obj1).compareTo(obj2);	}
static int indexOf(final CharSequence cs, final CharSequence searchChar, final int start) {	    return cs.toString().indexOf(searchChar.toString(), start);	}
public static boolean containsOnly(final CharSequence cs, final String validChars) {	    if (cs == null || validChars == null) {	        return false;	    }	    return containsOnly(cs, validChars.toCharArray());	}
public static String difference(final String str1, final String str2) {	    if (str1 == null) {	        return str2;	    }	    if (str2 == null) {	        return str1;	    }	    final int at = indexOfDifference(str1, str2);	    if (at == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str2.substring(at);	}
public static boolean endsWithIgnoreCase(final CharSequence str, final CharSequence suffix) {	    return endsWith(str, suffix, true);	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
@Override	public void setValue(final Boolean value) {	    this.value = value.booleanValue();	}
public static boolean endsWithIgnoreCase(final CharSequence str, final CharSequence suffix) {	    return endsWith(str, suffix, true);	}
@Override	public boolean markSupported() {	    return true;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
@Override	public TimeZone getTimeZone() {	    return mTimeZone;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public StrMatcher getTrimmerMatcher() {	    return trimmerMatcher;	}
public StrBuilder setCharAt(final int index, final char ch) {	    if (index < 0 || index >= length()) {	        throw new StringIndexOutOfBoundsException(index);	    }	    buffer[index] = ch;	    return this;	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public static String trimToEmpty(final String str) {	    return str == null ? EMPTY : str.trim();	}
@Override	public T get() throws ConcurrentException {	    try {	        return getFuture().get();	    } catch (final ExecutionException execex) {	        ConcurrentUtils.handleCause(execex);	        return null;	    } catch (final InterruptedException iex) {	        Thread.currentThread().interrupt();	        throw new ConcurrentException(iex);	    }	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public char getEnd() {	    return this.end;	}
public static String capitalize(final String str, final char... delimiters) {	    final int delimLen = delimiters == null ? -1 : delimiters.length;	    if (StringUtils.isEmpty(str) || delimLen == 0) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    boolean capitalizeNext = true;	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (isDelimiter(ch, delimiters)) {	            capitalizeNext = true;	        } else if (capitalizeNext) {	            buffer[i] = Character.toTitleCase(ch);	            capitalizeNext = false;	        }	    }	    return new String(buffer);	}
public static boolean isPrimitiveWrapper(final Class<?> type) {	    return wrapperPrimitiveMap.containsKey(type);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
public int size() {	    return size;	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
@Override	public int hashCode() {	    return toHashCode();	}
public static <K, V> V createIfAbsentUnchecked(final ConcurrentMap<K, V> map, final K key, final ConcurrentInitializer<V> init) {	    try {	        return createIfAbsent(map, key, init);	    } catch (final ConcurrentException cex) {	        throw new ConcurrentRuntimeException(cex.getCause());	    }	}
public static Fraction getFraction(String str) {	    if (str == null) {	        throw new IllegalArgumentException("The string must not be null");	    }	    int pos = str.indexOf('.');	    if (pos >= 0) {	        return getFraction(Double.parseDouble(str));	    }	    pos = str.indexOf(' ');	    if (pos > 0) {	        final int whole = Integer.parseInt(str.substring(0, pos));	        str = str.substring(pos + 1);	        pos = str.indexOf('/');	        if (pos < 0) {	            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");	        } else {	            final int numer = Integer.parseInt(str.substring(0, pos));	            final int denom = Integer.parseInt(str.substring(pos + 1));	            return getFraction(whole, numer, denom);	        }	    }	    pos = str.indexOf('/');	    if (pos < 0) {	        return getFraction(Integer.parseInt(str), 1);	    } else {	        final int numer = Integer.parseInt(str.substring(0, pos));	        final int denom = Integer.parseInt(str.substring(pos + 1));	        return getFraction(numer, denom);	    }	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static <T> T deserialize(final byte[] objectData) {	    if (objectData == null) {	        throw new IllegalArgumentException("The byte[] must not be null");	    }	    return SerializationUtils.<T>deserialize(new ByteArrayInputStream(objectData));	}
public static String substringAfter(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (separator == null) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
public static List<String> convertClassesToClassNames(final List<Class<?>> classes) {	    if (classes == null) {	        return null;	    }	    final List<String> classNames = new ArrayList<String>(classes.size());	    for (final Class<?> cls : classes) {	        if (cls == null) {	            classNames.add(null);	        } else {	            classNames.add(cls.getName());	        }	    }	    return classNames;	}
public static String swapCase(final String str) {	    if (StringUtils.isEmpty(str)) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (Character.isUpperCase(ch)) {	            buffer[i] = Character.toLowerCase(ch);	        } else if (Character.isTitleCase(ch)) {	            buffer[i] = Character.toLowerCase(ch);	        } else if (Character.isLowerCase(ch)) {	            buffer[i] = Character.toUpperCase(ch);	        }	    }	    return new String(buffer);	}
public Builder daemon(final boolean f) {	    daemonFlag = Boolean.valueOf(f);	    return this;	}
@Override	public TimeZone getTimeZone() {	    return mTimeZone;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static String removeStart(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (str.startsWith(remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public int size() {	    return size;	}
@Override	public float floatValue() {	    return value;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
@Override	public boolean cancel(final boolean mayInterruptIfRunning) {	    return false;	}
protected String getSizeEndText() {	    return sizeEndText;	}
@Override	public BasicThreadFactory build() {	    final BasicThreadFactory factory = new BasicThreadFactory(this);	    reset();	    return factory;	}
public static String toString(final byte[] bytes, final String charsetName) throws UnsupportedEncodingException {	    return charsetName == null ? new String(bytes) : new String(bytes, charsetName);	}
public static Class<?> getClass(final String className, final boolean initialize) throws ClassNotFoundException {	    final ClassLoader contextCL = Thread.currentThread().getContextClassLoader();	    final ClassLoader loader = contextCL == null ? ClassUtils.class.getClassLoader() : contextCL;	    return getClass(loader, className, initialize);	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
public synchronized void acquire() throws InterruptedException {	    if (isShutdown()) {	        throw new IllegalStateException("TimedSemaphore is shut down!");	    }	    if (task == null) {	        task = startTimer();	    }	    boolean canPass = false;	    do {	        canPass = getLimit() <= NO_LIMIT || acquireCount < getLimit();	        if (!canPass) {	            wait();	        } else {	            acquireCount++;	        }	    } while (!canPass);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
protected String getArrayEnd() {	    return arrayEnd;	}
private static String replaceEach(final String text, final String[] searchList, final String[] replacementList, final boolean repeat, final int timeToLive) {	    if (text == null || text.isEmpty() || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {	        return text;	    }	    if (timeToLive < 0) {	        throw new IllegalStateException("Aborting to protect against StackOverflowError - " + "output of one loop is the input of another");	    }	    final int searchLength = searchList.length;	    final int replacementLength = replacementList.length;	    if (searchLength != replacementLength) {	        throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs " + replacementLength);	    }	    final boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];	    int textIndex = -1;	    int replaceIndex = -1;	    int tempIndex = -1;	    for (int i = 0; i < searchLength; i++) {	        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {	            continue;	        }	        tempIndex = text.indexOf(searchList[i]);	        if (tempIndex == -1) {	            noMoreMatchesForReplIndex[i] = true;	        } else {	            if (textIndex == -1 || tempIndex < textIndex) {	                textIndex = tempIndex;	                replaceIndex = i;	            }	        }	    }	    if (textIndex == -1) {	        return text;	    }	    int start = 0;	    int increase = 0;	    for (int i = 0; i < searchList.length; i++) {	        if (searchList[i] == null || replacementList[i] == null) {	            continue;	        }	        final int greater = replacementList[i].length() - searchList[i].length();	        if (greater > 0) {	            increase += 3 * greater;	        }	    }	    increase = Math.min(increase, text.length() / 5);	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (textIndex != -1) {	        for (int i = start; i < textIndex; i++) {	            buf.append(text.charAt(i));	        }	        buf.append(replacementList[replaceIndex]);	        start = textIndex + searchList[replaceIndex].length();	        textIndex = -1;	        replaceIndex = -1;	        tempIndex = -1;	        for (int i = 0; i < searchLength; i++) {	            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {	                continue;	            }	            tempIndex = text.indexOf(searchList[i], start);	            if (tempIndex == -1) {	                noMoreMatchesForReplIndex[i] = true;	            } else {	                if (textIndex == -1 || tempIndex < textIndex) {	                    textIndex = tempIndex;	                    replaceIndex = i;	                }	            }	        }	    }	    final int textLength = text.length();	    for (int i = start; i < textLength; i++) {	        buf.append(text.charAt(i));	    }	    final String result = buf.toString();	    if (!repeat) {	        return result;	    }	    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
@Override	public Calendar next() {	    if (spot.equals(endFinal)) {	        throw new NoSuchElementException();	    }	    spot.add(Calendar.DATE, 1);	    return (Calendar) spot.clone();	}
public String getNullText() {	    return nullText;	}
public static FastDateFormat getInstance(final String pattern, final TimeZone timeZone, final Locale locale) {	    return cache.getInstance(pattern, timeZone, locale);	}
public static String leftPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return leftPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return padStr.concat(str);	    } else if (pads < padLen) {	        return padStr.substring(0, pads).concat(str);	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return new String(padding).concat(str);	    }	}
public String getNullText() {	    return nullText;	}
protected void setArraySeparator(String arraySeparator) {	    if (arraySeparator == null) {	        arraySeparator = "";	    }	    this.arraySeparator = arraySeparator;	}
protected String getNullText() {	    return nullText;	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
public static String random(final int count, final char... chars) {	    if (chars == null) {	        return random(count, 0, 0, false, false, null, RANDOM);	    }	    return random(count, 0, chars.length, false, false, chars, RANDOM);	}
public static char binaryBeMsb0ToHexDigit(boolean[] src, int srcPos) {	    if (src.length == 0) {	        throw new IllegalArgumentException("Cannot convert an empty array.");	    }	    final int beSrcPos = src.length - 1 - srcPos;	    final int srcLen = Math.min(4, beSrcPos + 1);	    final boolean[] paddedSrc = new boolean[4];	    System.arraycopy(src, beSrcPos + 1 - srcLen, paddedSrc, 4 - srcLen, srcLen);	    src = paddedSrc;	    srcPos = 0;	    if (src[srcPos]) {	        if (src.length > srcPos + 1 && src[srcPos + 1]) {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'f';	                } else {	                    return 'e';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'd';	                } else {	                    return 'c';	                }	            }	        } else {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'b';	                } else {	                    return 'a';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '9';	                } else {	                    return '8';	                }	            }	        }	    } else {	        if (src.length > srcPos + 1 && src[srcPos + 1]) {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '7';	                } else {	                    return '6';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '5';	                } else {	                    return '4';	                }	            }	        } else {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '3';	                } else {	                    return '2';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '1';	                } else {	                    return '0';	                }	            }	        }	    }	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static String rightPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return rightPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return str.concat(padStr);	    } else if (pads < padLen) {	        return str.concat(padStr.substring(0, pads));	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return str.concat(new String(padding));	    }	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
public static <T> T CONST(final T v) {	    return v;	}
public Fraction invert() {	    if (numerator == 0) {	        throw new ArithmeticException("Unable to invert zero.");	    }	    if (numerator == Integer.MIN_VALUE) {	        throw new ArithmeticException("overflow: can't negate numerator");	    }	    if (numerator < 0) {	        return new Fraction(-denominator, -numerator);	    } else {	        return new Fraction(denominator, numerator);	    }	}
public CompareToBuilder appendSuper(final int superCompareTo) {	    if (comparison != 0) {	        return this;	    }	    comparison = superCompareTo;	    return this;	}
public static CharRange is(final char ch) {	    return new CharRange(ch, ch, false);	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
protected void appendContentEnd(final StringBuffer buffer) {	    buffer.append(contentEnd);	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public int toComparison() {	    return comparison;	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public static boolean isNumeric(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isDigit(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
public boolean isAfter(final T element) {	    if (element == null) {	        return false;	    }	    return comparator.compare(element, minimum) < 0;	}
@Override	public int compareTo(final MutableByte other) {	    final byte anotherVal = other.value;	    return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public int size() {	    return size;	}
public static String[] splitByWholeSeparator(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, false);	}
public StrBuilder replaceAll(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, -1);	}
public void split() {	    if (this.runningState != STATE_RUNNING) {	        throw new IllegalStateException("Stopwatch is not running. ");	    }	    this.stopTime = System.nanoTime();	    this.splitState = STATE_SPLIT;	}
@Override	public int length() {	    return size;	}
@Override	public T get() throws ConcurrentException {	    return getObject();	}
static String getTimeZoneDisplay(final TimeZone tz, final boolean daylight, final int style, final Locale locale) {	    final TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);	    String value = cTimeZoneDisplayCache.get(key);	    if (value == null) {	        value = tz.getDisplayName(daylight, style, locale);	        final String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);	        if (prior != null) {	            value = prior;	        }	    }	    return value;	}
public char getEscapeChar() {	    return this.escapeChar;	}
public boolean isIgnoreEmptyTokens() {	    return ignoreEmptyTokens;	}
public static String random(final int count, final char... chars) {	    if (chars == null) {	        return random(count, 0, 0, false, false, null, RANDOM);	    }	    return random(count, 0, chars.length, false, false, chars, RANDOM);	}
static Pair<IDKey, IDKey> getRegisterPair(final Object lhs, final Object rhs) {	    final IDKey left = new IDKey(lhs);	    final IDKey right = new IDKey(rhs);	    return Pair.of(left, right);	}
public String getNullText() {	    return nullText;	}
public HashCodeBuilder appendSuper(final int superHashCode) {	    iTotal = iTotal * iConstant + superHashCode;	    return this;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public Fraction negate() {	    if (numerator == Integer.MIN_VALUE) {	        throw new ArithmeticException("overflow: too large to negate");	    }	    return new Fraction(-numerator, denominator);	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public void getChars(final int startIndex, final int endIndex, final char[] destination, final int destinationIndex) {	    if (startIndex < 0) {	        throw new StringIndexOutOfBoundsException(startIndex);	    }	    if (endIndex < 0 || endIndex > length()) {	        throw new StringIndexOutOfBoundsException(endIndex);	    }	    if (startIndex > endIndex) {	        throw new StringIndexOutOfBoundsException("end < start");	    }	    System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);	}
public static Iterator<?> iterator(final Object focus, final int rangeStyle) {	    if (focus == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    if (focus instanceof Date) {	        return iterator((Date) focus, rangeStyle);	    } else if (focus instanceof Calendar) {	        return iterator((Calendar) focus, rangeStyle);	    } else {	        throw new ClassCastException("Could not iterate based on " + focus);	    }	}
public static String[] splitByWholeSeparatorPreserveAllTokens(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, true);	}
@Override	public String next() {	    if (hasNext()) {	        return tokens[tokenPos++];	    }	    throw new NoSuchElementException();	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
static int lastIndexOf(final CharSequence cs, final CharSequence searchChar, final int start) {	    return cs.toString().lastIndexOf(searchChar.toString(), start);	}
public char getEscapeChar() {	    return this.escapeChar;	}
public String getNullText() {	    return nullText;	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
public static String right(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(str.length() - len);	}
public static int getLevenshteinDistance(CharSequence s, CharSequence t, final int threshold) {	    if (s == null || t == null) {	        throw new IllegalArgumentException("Strings must not be null");	    }	    if (threshold < 0) {	        throw new IllegalArgumentException("Threshold must not be negative");	    }	    int n = s.length();	    int m = t.length();	    if (n == 0) {	        return m <= threshold ? m : -1;	    } else if (m == 0) {	        return n <= threshold ? n : -1;	    }	    if (n > m) {	        final CharSequence tmp = s;	        s = t;	        t = tmp;	        n = m;	        m = t.length();	    }	    int[] p = new int[n + 1];	    int[] d = new int[n + 1];	    int[] _d;	    final int boundary = Math.min(n, threshold) + 1;	    for (int i = 0; i < boundary; i++) {	        p[i] = i;	    }	    Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);	    Arrays.fill(d, Integer.MAX_VALUE);	    for (int j = 1; j <= m; j++) {	        final char t_j = t.charAt(j - 1);	        d[0] = j;	        final int min = Math.max(1, j - threshold);	        final int max = Math.min(n, j + threshold);	        if (min > max) {	            return -1;	        }	        if (min > 1) {	            d[min - 1] = Integer.MAX_VALUE;	        }	        for (int i = min; i <= max; i++) {	            if (s.charAt(i - 1) == t_j) {	                d[i] = p[i - 1];	            } else {	                d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);	            }	        }	        _d = p;	        p = d;	        d = _d;	    }	    if (p[n] <= threshold) {	        return p[n];	    }	    return -1;	}
@Override	public void setContentStart(final String contentStart) {	    super.setContentStart(contentStart);	}
public static boolean isAlphanumericSpace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetterOrDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {	            return false;	        }	    }	    return true;	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
@Override	public boolean equals(final Object obj2) {	    if (obj2 instanceof Token) {	        final Token tok2 = (Token) obj2;	        if (this.value.getClass() != tok2.value.getClass()) {	            return false;	        }	        if (this.count != tok2.count) {	            return false;	        }	        if (this.value instanceof StringBuilder) {	            return this.value.toString().equals(tok2.value.toString());	        } else if (this.value instanceof Number) {	            return this.value.equals(tok2.value);	        } else {	            return this.value == tok2.value;	        }	    }	    return false;	}
public static Boolean or(final Boolean... array) {	    if (array == null) {	        throw new IllegalArgumentException("The Array must not be null");	    }	    if (array.length == 0) {	        throw new IllegalArgumentException("Array is empty");	    }	    try {	        final boolean[] primitive = ArrayUtils.toPrimitive(array);	        return or(primitive) ? Boolean.TRUE : Boolean.FALSE;	    } catch (final NullPointerException ex) {	        throw new IllegalArgumentException("The array must not contain any null elements");	    }	}
@Override	public String next() {	    if (hasNext()) {	        return tokens[tokenPos++];	    }	    throw new NoSuchElementException();	}
public static boolean startsWithAny(final CharSequence string, final CharSequence... searchStrings) {	    if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {	        return false;	    }	    for (final CharSequence searchString : searchStrings) {	        if (StringUtils.startsWith(string, searchString)) {	            return true;	        }	    }	    return false;	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
public int size() {	    return size;	}
@Override	public int length() {	    return size;	}
public synchronized int getAcquireCount() {	    return acquireCount;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static String reverse(final String str) {	    if (str == null) {	        return null;	    }	    return new StringBuilder(str).reverse().toString();	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static String[] substringsBetween(final String str, final String open, final String close) {	    if (str == null || isEmpty(open) || isEmpty(close)) {	        return null;	    }	    final int strLen = str.length();	    if (strLen == 0) {	        return ArrayUtils.EMPTY_STRING_ARRAY;	    }	    final int closeLen = close.length();	    final int openLen = open.length();	    final List<String> list = new ArrayList<String>();	    int pos = 0;	    while (pos < strLen - closeLen) {	        int start = str.indexOf(open, pos);	        if (start < 0) {	            break;	        }	        start += openLen;	        final int end = str.indexOf(close, start);	        if (end < 0) {	            break;	        }	        list.add(str.substring(start, end));	        pos = end + closeLen;	    }	    if (list.isEmpty()) {	        return null;	    }	    return list.toArray(new String[list.size()]);	}
public List<String> getTokenList() {	    checkTokenized();	    final List<String> list = new ArrayList<String>(tokens.length);	    for (final String element : tokens) {	        list.add(element);	    }	    return list;	}
static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) {	    if (cs instanceof String && substring instanceof String) {	        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);	    } else {	        int index1 = thisStart;	        int index2 = start;	        int tmpLen = length;	        while (tmpLen-- > 0) {	            char c1 = cs.charAt(index1++);	            char c2 = substring.charAt(index2++);	            if (c1 == c2) {	                continue;	            }	            if (!ignoreCase) {	                return false;	            }	            if (Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {	                return false;	            }	        }	        return true;	    }	}
protected String getFieldNameValueSeparator() {	    return fieldNameValueSeparator;	}
public static <T extends CharSequence> T validIndex(final T chars, final int index) {	    return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, Integer.valueOf(index));	}
public static String substringBeforeLast(final String str, final String separator) {	    if (isEmpty(str) || isEmpty(separator)) {	        return str;	    }	    final int pos = str.lastIndexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
public static boolean toBoolean(final String str, final String trueString, final String falseString) {	    if (str == trueString) {	        return true;	    } else if (str == falseString) {	        return false;	    } else if (str != null) {	        if (str.equals(trueString)) {	            return true;	        } else if (str.equals(falseString)) {	            return false;	        }	    }	    throw new IllegalArgumentException("The String did not match either specified value");	}
public static String substringAfter(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (separator == null) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
@Override	public int intValue() {	    return value;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public Double toDouble() {	    return Double.valueOf(doubleValue());	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public static boolean containsAny(final CharSequence cs, final CharSequence searchChars) {	    if (searchChars == null) {	        return false;	    }	    return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));	}
private static String replaceEach(final String text, final String[] searchList, final String[] replacementList, final boolean repeat, final int timeToLive) {	    if (text == null || text.isEmpty() || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {	        return text;	    }	    if (timeToLive < 0) {	        throw new IllegalStateException("Aborting to protect against StackOverflowError - " + "output of one loop is the input of another");	    }	    final int searchLength = searchList.length;	    final int replacementLength = replacementList.length;	    if (searchLength != replacementLength) {	        throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs " + replacementLength);	    }	    final boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];	    int textIndex = -1;	    int replaceIndex = -1;	    int tempIndex = -1;	    for (int i = 0; i < searchLength; i++) {	        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {	            continue;	        }	        tempIndex = text.indexOf(searchList[i]);	        if (tempIndex == -1) {	            noMoreMatchesForReplIndex[i] = true;	        } else {	            if (textIndex == -1 || tempIndex < textIndex) {	                textIndex = tempIndex;	                replaceIndex = i;	            }	        }	    }	    if (textIndex == -1) {	        return text;	    }	    int start = 0;	    int increase = 0;	    for (int i = 0; i < searchList.length; i++) {	        if (searchList[i] == null || replacementList[i] == null) {	            continue;	        }	        final int greater = replacementList[i].length() - searchList[i].length();	        if (greater > 0) {	            increase += 3 * greater;	        }	    }	    increase = Math.min(increase, text.length() / 5);	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (textIndex != -1) {	        for (int i = start; i < textIndex; i++) {	            buf.append(text.charAt(i));	        }	        buf.append(replacementList[replaceIndex]);	        start = textIndex + searchList[replaceIndex].length();	        textIndex = -1;	        replaceIndex = -1;	        tempIndex = -1;	        for (int i = 0; i < searchLength; i++) {	            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {	                continue;	            }	            tempIndex = text.indexOf(searchList[i], start);	            if (tempIndex == -1) {	                noMoreMatchesForReplIndex[i] = true;	            } else {	                if (textIndex == -1 || tempIndex < textIndex) {	                    textIndex = tempIndex;	                    replaceIndex = i;	                }	            }	        }	    }	    final int textLength = text.length();	    for (int i = start; i < textLength; i++) {	        buf.append(text.charAt(i));	    }	    final String result = buf.toString();	    if (!repeat) {	        return result;	    }	    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);	}
public static Boolean[] toObject(final boolean[] array) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_OBJECT_ARRAY;	    }	    final Boolean[] result = new Boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);	    }	    return result;	}
public String getNullText() {	    return nullText;	}
public boolean isEmpty() {	    return size == 0;	}
public static <T extends CharSequence> T notEmpty(final T chars) {	    return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);	}
public static int lastIndexOfIgnoreCase(final CharSequence str, final CharSequence searchStr, int startPos) {	    if (str == null || searchStr == null) {	        return INDEX_NOT_FOUND;	    }	    if (startPos > str.length() - searchStr.length()) {	        startPos = str.length() - searchStr.length();	    }	    if (startPos < 0) {	        return INDEX_NOT_FOUND;	    }	    if (searchStr.length() == 0) {	        return startPos;	    }	    for (int i = startPos; i >= 0; i--) {	        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static String appendIfMissing(final String str, final CharSequence suffix, final CharSequence... suffixes) {	    return appendIfMissing(str, suffix, false, suffixes);	}
public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {	    if (array == null) {	        return null;	    }	    if (startIndexInclusive < 0) {	        startIndexInclusive = 0;	    }	    if (endIndexExclusive > array.length) {	        endIndexExclusive = array.length;	    }	    final int newSize = endIndexExclusive - startIndexInclusive;	    if (newSize <= 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] subarray = new boolean[newSize];	    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);	    return subarray;	}
public static Formatter append(final CharSequence seq, final Formatter formatter, final int flags, final int width, final int precision, final char padChar, final CharSequence ellipsis) {	    Validate.isTrue(ellipsis == null || precision < 0 || ellipsis.length() <= precision, "Specified ellipsis '%1$s' exceeds precision of %2$s", ellipsis, Integer.valueOf(precision));	    final StringBuilder buf = new StringBuilder(seq);	    if (precision >= 0 && precision < seq.length()) {	        final CharSequence _ellipsis = ObjectUtils.defaultIfNull(ellipsis, StringUtils.EMPTY);	        buf.replace(precision - _ellipsis.length(), seq.length(), _ellipsis.toString());	    }	    final boolean leftJustify = (flags & LEFT_JUSTIFY) == LEFT_JUSTIFY;	    for (int i = buf.length(); i < width; i++) {	        buf.insert(leftJustify ? i : 0, padChar);	    }	    formatter.format(buf.toString());	    return formatter;	}
public static String wrap(final String str, int wrapLength, String newLineStr, final boolean wrapLongWords) {	    if (str == null) {	        return null;	    }	    if (newLineStr == null) {	        newLineStr = SystemUtils.LINE_SEPARATOR;	    }	    if (wrapLength < 1) {	        wrapLength = 1;	    }	    final int inputLineLength = str.length();	    int offset = 0;	    final StringBuilder wrappedLine = new StringBuilder(inputLineLength + 32);	    while (inputLineLength - offset > wrapLength) {	        if (str.charAt(offset) == ' ') {	            offset++;	            continue;	        }	        int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);	        if (spaceToWrapAt >= offset) {	            wrappedLine.append(str.substring(offset, spaceToWrapAt));	            wrappedLine.append(newLineStr);	            offset = spaceToWrapAt + 1;	        } else {	            if (wrapLongWords) {	                wrappedLine.append(str.substring(offset, wrapLength + offset));	                wrappedLine.append(newLineStr);	                offset += wrapLength;	            } else {	                spaceToWrapAt = str.indexOf(' ', wrapLength + offset);	                if (spaceToWrapAt >= 0) {	                    wrappedLine.append(str.substring(offset, spaceToWrapAt));	                    wrappedLine.append(newLineStr);	                    offset = spaceToWrapAt + 1;	                } else {	                    wrappedLine.append(str.substring(offset));	                    offset = inputLineLength;	                }	            }	        }	    }	    wrappedLine.append(str.substring(offset));	    return wrappedLine.toString();	}
public static boolean isArrayType(final Type type) {	    return type instanceof GenericArrayType || type instanceof Class<?> && ((Class<?>) type).isArray();	}
public static boolean isAscii(final char ch) {	    return ch < 128;	}
protected boolean isUseClassName() {	    return useClassName;	}
public static String replacePattern(final String source, final String regex, final String replacement) {	    return Pattern.compile(regex, Pattern.DOTALL).matcher(source).replaceAll(replacement);	}
public char getEnd() {	    return this.end;	}
public boolean contains(final StrMatcher matcher) {	    return indexOf(matcher, 0) >= 0;	}
public char getEnd() {	    return this.end;	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
@Override	public byte byteValue() {	    return value;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public static String capitalize(final String str) {	    int strLen;	    if (str == null || (strLen = str.length()) == 0) {	        return str;	    }	    char firstChar = str.charAt(0);	    if (Character.isTitleCase(firstChar)) {	        return str;	    }	    return new StringBuilder(strLen).append(Character.toTitleCase(firstChar)).append(str.substring(1)).toString();	}
public int size() {	    return size;	}
public int toComparison() {	    return comparison;	}
public static boolean isEmpty(final CharSequence cs) {	    return cs == null || cs.length() == 0;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
protected boolean isUseClassName() {	    return useClassName;	}
public static String lowerCase(final String str, final Locale locale) {	    if (str == null) {	        return null;	    }	    return str.toLowerCase(locale);	}
@Override	public int length() {	    return size;	}
public String replace(final Object source) {	    if (source == null) {	        return null;	    }	    final StrBuilder buf = new StrBuilder().append(source);	    substitute(buf, 0, buf.length());	    return buf.toString();	}
public static boolean isSameLocalTime(final Calendar cal1, final Calendar cal2) {	    if (cal1 == null || cal2 == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());	}
private static Date set(final Date date, final int calendarField, final int amount) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final Calendar c = Calendar.getInstance();	    c.setLenient(false);	    c.setTime(date);	    c.set(calendarField, amount);	    return c.getTime();	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public static boolean endsWithAny(final CharSequence string, final CharSequence... searchStrings) {	    if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {	        return false;	    }	    for (final CharSequence searchString : searchStrings) {	        if (StringUtils.endsWith(string, searchString)) {	            return true;	        }	    }	    return false;	}
protected boolean isDefaultFullDetail() {	    return defaultFullDetail;	}
static String format(final Token[] tokens, final int years, final int months, final int days, final int hours, final int minutes, final int seconds, int milliseconds, final boolean padWithZeros) {	    final StringBuilder buffer = new StringBuilder();	    boolean lastOutputSeconds = false;	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        final Token token = tokens[i];	        final Object value = token.getValue();	        final int count = token.getCount();	        if (value instanceof StringBuilder) {	            buffer.append(value.toString());	        } else {	            if (value == y) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer.toString(years));	                lastOutputSeconds = false;	            } else if (value == M) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer.toString(months));	                lastOutputSeconds = false;	            } else if (value == d) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer.toString(days));	                lastOutputSeconds = false;	            } else if (value == H) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer.toString(hours));	                lastOutputSeconds = false;	            } else if (value == m) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer.toString(minutes));	                lastOutputSeconds = false;	            } else if (value == s) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer.toString(seconds));	                lastOutputSeconds = true;	            } else if (value == S) {	                if (lastOutputSeconds) {	                    milliseconds += 1000;	                    final String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds);	                    buffer.append(str.substring(1));	                } else {	                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds));	                }	                lastOutputSeconds = false;	            }	        }	    }	    return buffer.toString();	}
public static <T> T initializeUnchecked(final ConcurrentInitializer<T> initializer) {	    try {	        return initialize(initializer);	    } catch (final ConcurrentException cex) {	        throw new ConcurrentRuntimeException(cex.getCause());	    }	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public String toString(final String format) {	    return String.format(format, getLeft(), getMiddle(), getRight());	}
public boolean contains(final StrMatcher matcher) {	    return indexOf(matcher, 0) >= 0;	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public void unsplit() {	    if (this.splitState != STATE_SPLIT) {	        throw new IllegalStateException("Stopwatch has not been split. ");	    }	    this.splitState = STATE_UNSPLIT;	}
public static boolean isAssignable(Class<?> cls, final Class<?> toClass, final boolean autoboxing) {	    if (toClass == null) {	        return false;	    }	    if (cls == null) {	        return !toClass.isPrimitive();	    }	    if (autoboxing) {	        if (cls.isPrimitive() && !toClass.isPrimitive()) {	            cls = primitiveToWrapper(cls);	            if (cls == null) {	                return false;	            }	        }	        if (toClass.isPrimitive() && !cls.isPrimitive()) {	            cls = wrapperToPrimitive(cls);	            if (cls == null) {	                return false;	            }	        }	    }	    if (cls.equals(toClass)) {	        return true;	    }	    if (cls.isPrimitive()) {	        if (toClass.isPrimitive() == false) {	            return false;	        }	        if (Integer.TYPE.equals(cls)) {	            return Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Long.TYPE.equals(cls)) {	            return Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Boolean.TYPE.equals(cls)) {	            return false;	        }	        if (Double.TYPE.equals(cls)) {	            return false;	        }	        if (Float.TYPE.equals(cls)) {	            return Double.TYPE.equals(toClass);	        }	        if (Character.TYPE.equals(cls)) {	            return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Short.TYPE.equals(cls)) {	            return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        if (Byte.TYPE.equals(cls)) {	            return Short.TYPE.equals(toClass) || Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);	        }	        return false;	    }	    return toClass.isAssignableFrom(cls);	}
@Override	public int hashCode() {	    return toHashCode();	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public StrBuilder appendWithSeparators(final Iterator<?> it, String separator) {	    if (it != null) {	        separator = ObjectUtils.toString(separator);	        while (it.hasNext()) {	            append(it.next());	            if (it.hasNext()) {	                append(separator);	            }	        }	    }	    return this;	}
public static String reverse(final String str) {	    if (str == null) {	        return null;	    }	    return new StringBuilder(str).reverse().toString();	}
@Override	public int compareTo(final MutableLong other) {	    final long anotherVal = other.value;	    return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
public static String replaceChars(final String str, final String searchChars, String replaceChars) {	    if (isEmpty(str) || isEmpty(searchChars)) {	        return str;	    }	    if (replaceChars == null) {	        replaceChars = EMPTY;	    }	    boolean modified = false;	    final int replaceCharsLength = replaceChars.length();	    final int strLength = str.length();	    final StringBuilder buf = new StringBuilder(strLength);	    for (int i = 0; i < strLength; i++) {	        final char ch = str.charAt(i);	        final int index = searchChars.indexOf(ch);	        if (index >= 0) {	            modified = true;	            if (index < replaceCharsLength) {	                buf.append(replaceChars.charAt(index));	            }	        } else {	            buf.append(ch);	        }	    }	    if (modified) {	        return buf.toString();	    }	    return str;	}
public StrBuilder trim() {	    if (size == 0) {	        return this;	    }	    int len = size;	    final char[] buf = buffer;	    int pos = 0;	    while (pos < len && buf[pos] <= ' ') {	        pos++;	    }	    while (pos < len && buf[len - 1] <= ' ') {	        len--;	    }	    if (len < size) {	        delete(len, size);	    }	    if (pos > 0) {	        delete(0, pos);	    }	    return this;	}
public static String random(final int count, final char... chars) {	    if (chars == null) {	        return random(count, 0, 0, false, false, null, RANDOM);	    }	    return random(count, 0, chars.length, false, false, chars, RANDOM);	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
public static StrMatcher stringMatcher(final String str) {	    if (StringUtils.isEmpty(str)) {	        return NONE_MATCHER;	    }	    return new StringMatcher(str);	}
protected String getContentEnd() {	    return contentEnd;	}
protected boolean isDefaultFullDetail() {	    return defaultFullDetail;	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public static boolean reflectionEquals(final Object lhs, final Object rhs, final boolean testTransients, final Class<?> reflectUpToClass, final String... excludeFields) {	    if (lhs == rhs) {	        return true;	    }	    if (lhs == null || rhs == null) {	        return false;	    }	    final Class<?> lhsClass = lhs.getClass();	    final Class<?> rhsClass = rhs.getClass();	    Class<?> testClass;	    if (lhsClass.isInstance(rhs)) {	        testClass = lhsClass;	        if (!rhsClass.isInstance(lhs)) {	            testClass = rhsClass;	        }	    } else if (rhsClass.isInstance(lhs)) {	        testClass = rhsClass;	        if (!lhsClass.isInstance(rhs)) {	            testClass = lhsClass;	        }	    } else {	        return false;	    }	    final EqualsBuilder equalsBuilder = new EqualsBuilder();	    try {	        reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);	        while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {	            testClass = testClass.getSuperclass();	            reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);	        }	    } catch (final IllegalArgumentException e) {	        return false;	    }	    return equalsBuilder.isEquals();	}
public short setShort(final short holder) {	    return (short) set(holder);	}
@Override	public void setValue(final Number value) {	    this.value = value.intValue();	}
public static String[] stripAll(final String[] strs, final String stripChars) {	    int strsLen;	    if (strs == null || (strsLen = strs.length) == 0) {	        return strs;	    }	    final String[] newArr = new String[strsLen];	    for (int i = 0; i < strsLen; i++) {	        newArr[i] = strip(strs[i], stripChars);	    }	    return newArr;	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
public static byte binaryToByte(final boolean[] src, final int srcPos, final byte dstInit, final int dstPos, final int nBools) {	    if ((src.length == 0 && srcPos == 0) || 0 == nBools) {	        return dstInit;	    }	    if (nBools - 1 + dstPos >= 8) {	        throw new IllegalArgumentException("nBools-1+dstPos is greather or equal to than 8");	    }	    byte out = dstInit;	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + dstPos;	        final int bits = (src[i + srcPos] ? 1 : 0) << shift;	        final int mask = 0x1 << shift;	        out = (byte) ((out & ~mask) | bits);	    }	    return out;	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public String toProperString() {	    if (toProperString == null) {	        if (numerator == 0) {	            toProperString = "0";	        } else if (numerator == denominator) {	            toProperString = "1";	        } else if (numerator == -1 * denominator) {	            toProperString = "-1";	        } else if ((numerator > 0 ? -numerator : numerator) < -denominator) {	            final int properNumerator = getProperNumerator();	            if (properNumerator == 0) {	                toProperString = Integer.toString(getProperWhole());	            } else {	                toProperString = new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();	            }	        } else {	            toProperString = new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();	        }	    }	    return toProperString;	}
public static String repeat(final char ch, final int repeat) {	    final char[] buf = new char[repeat];	    for (int i = repeat - 1; i >= 0; i--) {	        buf[i] = ch;	    }	    return new String(buf);	}
public int size() {	    return size;	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public static boolean containsAny(final CharSequence cs, final CharSequence searchChars) {	    if (searchChars == null) {	        return false;	    }	    return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public static String difference(final String str1, final String str2) {	    if (str1 == null) {	        return str2;	    }	    if (str2 == null) {	        return str1;	    }	    final int at = indexOfDifference(str1, str2);	    if (at == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str2.substring(at);	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static long getFragmentInDays(final Calendar calendar, final int fragment) {	    return getFragment(calendar, fragment, Calendar.DAY_OF_YEAR);	}
public static String[] splitPreserveAllTokens(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, true);	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public boolean equalsIgnoreCase(final StrBuilder other) {	    if (this == other) {	        return true;	    }	    if (this.size != other.size) {	        return false;	    }	    final char[] thisBuf = this.buffer;	    final char[] otherBuf = other.buffer;	    for (int i = size - 1; i >= 0; i--) {	        final char c1 = thisBuf[i];	        final char c2 = otherBuf[i];	        if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {	            return false;	        }	    }	    return true;	}
public static double toDouble(final String str, final double defaultValue) {	    if (str == null) {	        return defaultValue;	    }	    try {	        return Double.parseDouble(str);	    } catch (final NumberFormatException nfe) {	        return defaultValue;	    }	}
public static <T> Range<T> between(final T fromInclusive, final T toInclusive, final Comparator<T> comparator) {	    return new Range<T>(fromInclusive, toInclusive, comparator);	}
public boolean isEquals() {	    return this.isEquals;	}
public int capacity() {	    return buffer.length;	}
public static int getLevenshteinDistance(CharSequence s, CharSequence t, final int threshold) {	    if (s == null || t == null) {	        throw new IllegalArgumentException("Strings must not be null");	    }	    if (threshold < 0) {	        throw new IllegalArgumentException("Threshold must not be negative");	    }	    int n = s.length();	    int m = t.length();	    if (n == 0) {	        return m <= threshold ? m : -1;	    } else if (m == 0) {	        return n <= threshold ? n : -1;	    }	    if (n > m) {	        final CharSequence tmp = s;	        s = t;	        t = tmp;	        n = m;	        m = t.length();	    }	    int[] p = new int[n + 1];	    int[] d = new int[n + 1];	    int[] _d;	    final int boundary = Math.min(n, threshold) + 1;	    for (int i = 0; i < boundary; i++) {	        p[i] = i;	    }	    Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);	    Arrays.fill(d, Integer.MAX_VALUE);	    for (int j = 1; j <= m; j++) {	        final char t_j = t.charAt(j - 1);	        d[0] = j;	        final int min = Math.max(1, j - threshold);	        final int max = Math.min(n, j + threshold);	        if (min > max) {	            return -1;	        }	        if (min > 1) {	            d[min - 1] = Integer.MAX_VALUE;	        }	        for (int i = min; i <= max; i++) {	            if (s.charAt(i - 1) == t_j) {	                d[i] = p[i - 1];	            } else {	                d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);	            }	        }	        _d = p;	        p = d;	        d = _d;	    }	    if (p[n] <= threshold) {	        return p[n];	    }	    return -1;	}
public static float max(final float a, final float b, final float c) {	    return Math.max(Math.max(a, b), c);	}
public static FastDateFormat getInstance(final String pattern, final TimeZone timeZone, final Locale locale) {	    return cache.getInstance(pattern, timeZone, locale);	}
public static boolean containsNone(final CharSequence cs, final String invalidChars) {	    if (cs == null || invalidChars == null) {	        return true;	    }	    return containsNone(cs, invalidChars.toCharArray());	}
public long getPeriod() {	    return period;	}
public ToStringBuilder appendSuper(final String superToString) {	    if (superToString != null) {	        style.appendSuper(buffer, superToString);	    }	    return this;	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static <T extends CharSequence> T notEmpty(final T chars) {	    return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);	}
public int size() {	    return size;	}
public static ConcurrentRuntimeException extractCauseUnchecked(final ExecutionException ex) {	    if (ex == null || ex.getCause() == null) {	        return null;	    }	    throwCause(ex);	    return new ConcurrentRuntimeException(ex.getMessage(), ex.getCause());	}
public static <T extends CharSequence> T validIndex(final T chars, final int index) {	    return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, Integer.valueOf(index));	}
public static String defaultString(final String str, final String defaultStr) {	    return str == null ? defaultStr : str;	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
@Override	public R getRight() {	    return right;	}
public static <T extends CharSequence> T notEmpty(final T chars) {	    return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);	}
static String format(final Token[] tokens, final int years, final int months, final int days, final int hours, final int minutes, final int seconds, int milliseconds, final boolean padWithZeros) {	    final StringBuilder buffer = new StringBuilder();	    boolean lastOutputSeconds = false;	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        final Token token = tokens[i];	        final Object value = token.getValue();	        final int count = token.getCount();	        if (value instanceof StringBuilder) {	            buffer.append(value.toString());	        } else {	            if (value == y) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer.toString(years));	                lastOutputSeconds = false;	            } else if (value == M) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer.toString(months));	                lastOutputSeconds = false;	            } else if (value == d) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer.toString(days));	                lastOutputSeconds = false;	            } else if (value == H) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer.toString(hours));	                lastOutputSeconds = false;	            } else if (value == m) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer.toString(minutes));	                lastOutputSeconds = false;	            } else if (value == s) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer.toString(seconds));	                lastOutputSeconds = true;	            } else if (value == S) {	                if (lastOutputSeconds) {	                    milliseconds += 1000;	                    final String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds);	                    buffer.append(str.substring(1));	                } else {	                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds));	                }	                lastOutputSeconds = false;	            }	        }	    }	    return buffer.toString();	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static BigInteger createBigInteger(final String str) {	    if (str == null) {	        return null;	    }	    int pos = 0;	    int radix = 10;	    boolean negate = false;	    if (str.startsWith("-")) {	        negate = true;	        pos = 1;	    }	    if (str.startsWith("0x", pos) || str.startsWith("0x", pos)) {	        radix = 16;	        pos += 2;	    } else if (str.startsWith("#", pos)) {	        radix = 16;	        pos++;	    } else if (str.startsWith("0", pos) && str.length() > pos + 1) {	        radix = 8;	        pos++;	    }	    final BigInteger value = new BigInteger(str.substring(pos), radix);	    return negate ? value.negate() : value;	}
public static Boolean[] toObject(final boolean[] array) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_OBJECT_ARRAY;	    }	    final Boolean[] result = new Boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);	    }	    return result;	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
public int capacity() {	    return buffer.length;	}
@Override	public Date parse(final String source, final ParsePosition pos) {	    return parser.parse(source, pos);	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public Fraction multiplyBy(final Fraction fraction) {	    if (fraction == null) {	        throw new IllegalArgumentException("The fraction must not be null");	    }	    if (numerator == 0 || fraction.numerator == 0) {	        return ZERO;	    }	    final int d1 = greatestCommonDivisor(numerator, fraction.denominator);	    final int d2 = greatestCommonDivisor(fraction.numerator, denominator);	    return getReducedFraction(mulAndCheck(numerator / d1, fraction.numerator / d2), mulPosAndCheck(denominator / d2, fraction.denominator / d1));	}
public void setLeft(final L left) {	    this.left = left;	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public StrBuilder appendAll(final Iterator<?> it) {	    if (it != null) {	        while (it.hasNext()) {	            append(it.next());	        }	    }	    return this;	}
protected void appendCyclicObject(final StringBuffer buffer, final String fieldName, final Object value) {	    ObjectUtils.identityToString(buffer, value);	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public HashCodeBuilder append(final short[] array) {	    if (array == null) {	        iTotal = iTotal * iConstant;	    } else {	        for (final short element : array) {	            append(element);	        }	    }	    return this;	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static List<String> convertClassesToClassNames(final List<Class<?>> classes) {	    if (classes == null) {	        return null;	    }	    final List<String> classNames = new ArrayList<String>(classes.size());	    for (final Class<?> cls : classes) {	        if (cls == null) {	            classNames.add(null);	        } else {	            classNames.add(cls.getName());	        }	    }	    return classNames;	}
public static String substringAfter(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (separator == null) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
private static boolean startsWith(final CharSequence str, final CharSequence prefix, final boolean ignoreCase) {	    if (str == null || prefix == null) {	        return str == null && prefix == null;	    }	    if (prefix.length() > str.length()) {	        return false;	    }	    return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());	}
@Override	public int length() {	    return size;	}
public static boolean isAsciiNumeric(final char ch) {	    return ch >= '0' && ch <= '9';	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static void writeDeclaredField(final Object target, final String fieldName, final Object value, final boolean forceAccess) throws IllegalAccessException {	    if (target == null) {	        throw new IllegalArgumentException("target object must not be null");	    }	    final Class<?> cls = target.getClass();	    final Field field = getDeclaredField(cls, fieldName, forceAccess);	    if (field == null) {	        throw new IllegalArgumentException("Cannot locate declared field " + cls.getName() + "." + fieldName);	    }	    writeField(field, target, value);	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
public int capacity() {	    return buffer.length;	}
@Override	public boolean ready() {	    return pos < StrBuilder.this.size();	}
@Override	public boolean translate(final int codepoint, final Writer out) throws IOException {	    if (between) {	        if (codepoint < below || codepoint > above) {	            return false;	        }	    } else {	        if (codepoint >= below && codepoint <= above) {	            return false;	        }	    }	    if (codepoint > 0xffff) {	        out.write(toUtf16Escape(codepoint));	    } else if (codepoint > 0xfff) {	        out.write("\\u" + hex(codepoint));	    } else if (codepoint > 0xff) {	        out.write("\\u0" + hex(codepoint));	    } else if (codepoint > 0xf) {	        out.write("\\u00" + hex(codepoint));	    } else {	        out.write("\\u000" + hex(codepoint));	    }	    return true;	}
@Override	public String getContentEnd() {	    return super.getContentEnd();	}
public int capacity() {	    return buffer.length;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static boolean[] intToBinary(final int src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {	    if (0 == nBools) {	        return dst;	    }	    if (nBools - 1 + srcPos >= 32) {	        throw new IllegalArgumentException("nBools-1+srcPos is greather or equal to than 32");	    }	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + srcPos;	        dst[dstPos + i] = ((0x1 & (src >> shift)) != 0);	    }	    return dst;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public boolean atLeast(final JavaVersion requiredVersion) {	    return this.value >= requiredVersion.value;	}
public static int hexToInt(final String src, final int srcPos, final int dstInit, final int dstPos, final int nHex) {	    if (0 == nHex) {	        return dstInit;	    }	    if ((nHex - 1) * 4 + dstPos >= 32) {	        throw new IllegalArgumentException("(nHexs-1)*4+dstPos is greather or equal to than 32");	    }	    int out = dstInit;	    int shift = 0;	    for (int i = 0; i < nHex; i++) {	        shift = i * 4 + dstPos;	        final int bits = (0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;	        final int mask = 0xf << shift;	        out = (out & ~mask) | bits;	    }	    return out;	}
public static char binaryToHexDigit(final boolean[] src, final int srcPos) {	    if (src.length == 0) {	        throw new IllegalArgumentException("Cannot convert an empty array.");	    }	    if (src.length > srcPos + 3 && src[srcPos + 3]) {	        if (src.length > srcPos + 2 && src[srcPos + 2]) {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'f';	                } else {	                    return 'e';	                }	            } else {	                if (src[srcPos]) {	                    return 'd';	                } else {	                    return 'c';	                }	            }	        } else {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'b';	                } else {	                    return 'a';	                }	            } else {	                if (src[srcPos]) {	                    return '9';	                } else {	                    return '8';	                }	            }	        }	    } else {	        if (src.length > srcPos + 2 && src[srcPos + 2]) {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return '7';	                } else {	                    return '6';	                }	            } else {	                if (src[srcPos]) {	                    return '5';	                } else {	                    return '4';	                }	            }	        } else {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return '3';	                } else {	                    return '2';	                }	            } else {	                if (src[srcPos]) {	                    return '1';	                } else {	                    return '0';	                }	            }	        }	    }	}
public short clearShort(final short holder) {	    return (short) clear(holder);	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public int lastIndexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex >= size ? size - 1 : startIndex);	    if (matcher == null || startIndex < 0) {	        return -1;	    }	    final char[] buf = buffer;	    final int endIndex = startIndex + 1;	    for (int i = startIndex; i >= 0; i--) {	        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {	            return i;	        }	    }	    return -1;	}
public int capacity() {	    return buffer.length;	}
public int capacity() {	    return buffer.length;	}
public static Integer toIntegerObject(final Boolean bool, final Integer trueValue, final Integer falseValue, final Integer nullValue) {	    if (bool == null) {	        return nullValue;	    }	    return bool.booleanValue() ? trueValue : falseValue;	}
public static float min(final float a, final float b) {	    if (Float.isNaN(a)) {	        return b;	    } else if (Float.isNaN(b)) {	        return a;	    } else {	        return Math.min(a, b);	    }	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public int capacity() {	    return buffer.length;	}
public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, 1);	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public static String removeEnd(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (str.endsWith(remove)) {	        return str.substring(0, str.length() - remove.length());	    }	    return str;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
@Override	public boolean translate(final int codepoint, final Writer out) throws IOException {	    if (between) {	        if (codepoint < below || codepoint > above) {	            return false;	        }	    } else {	        if (codepoint >= below && codepoint <= above) {	            return false;	        }	    }	    if (codepoint > 0xffff) {	        out.write(toUtf16Escape(codepoint));	    } else if (codepoint > 0xfff) {	        out.write("\\u" + hex(codepoint));	    } else if (codepoint > 0xff) {	        out.write("\\u0" + hex(codepoint));	    } else if (codepoint > 0xf) {	        out.write("\\u00" + hex(codepoint));	    } else {	        out.write("\\u000" + hex(codepoint));	    }	    return true;	}
public int capacity() {	    return buffer.length;	}
static int compareParameterTypes(final Class<?>[] left, final Class<?>[] right, final Class<?>[] actual) {	    final float leftCost = getTotalTransformationCost(actual, left);	    final float rightCost = getTotalTransformationCost(actual, right);	    return leftCost < rightCost ? -1 : rightCost < leftCost ? 1 : 0;	}
public static String normalizeSpace(final String str) {	    if (str == null) {	        return null;	    }	    return WHITESPACE_PATTERN.matcher(trim(str)).replaceAll(SPACE);	}
public static Locale toLocale(final String str) {	    if (str == null) {	        return null;	    }	    if (str.contains("#")) {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    final int len = str.length();	    if (len < 2) {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    final char ch0 = str.charAt(0);	    if (ch0 == '_') {	        if (len < 3) {	            throw new IllegalArgumentException("Invalid locale format: " + str);	        }	        final char ch1 = str.charAt(1);	        final char ch2 = str.charAt(2);	        if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {	            throw new IllegalArgumentException("Invalid locale format: " + str);	        }	        if (len == 3) {	            return new Locale("", str.substring(1, 3));	        }	        if (len < 5) {	            throw new IllegalArgumentException("Invalid locale format: " + str);	        }	        if (str.charAt(3) != '_') {	            throw new IllegalArgumentException("Invalid locale format: " + str);	        }	        return new Locale("", str.substring(1, 3), str.substring(4));	    }	    final char ch1 = str.charAt(1);	    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    if (len == 2) {	        return new Locale(str);	    }	    if (len < 5) {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    if (str.charAt(2) != '_') {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    final char ch3 = str.charAt(3);	    if (ch3 == '_') {	        return new Locale(str.substring(0, 2), "", str.substring(4));	    }	    final char ch4 = str.charAt(4);	    if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    if (len == 5) {	        return new Locale(str.substring(0, 2), str.substring(3, 5));	    }	    if (len < 7) {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    if (str.charAt(5) != '_') {	        throw new IllegalArgumentException("Invalid locale format: " + str);	    }	    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));	}
@Override	public boolean equals(final Object obj) {	    if (obj == this) {	        return true;	    } else if (obj == null || obj.getClass() != getClass()) {	        return false;	    } else {	        @SuppressWarnings("unchecked")	        final Range<T> range = (Range<T>) obj;	        return minimum.equals(range.minimum) && maximum.equals(range.maximum);	    }	}
public static boolean[] hexDigitToBinary(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return new boolean[] { false, false, false, false };	        case '1':	            return new boolean[] { true, false, false, false };	        case '2':	            return new boolean[] { false, true, false, false };	        case '3':	            return new boolean[] { true, true, false, false };	        case '4':	            return new boolean[] { false, false, true, false };	        case '5':	            return new boolean[] { true, false, true, false };	        case '6':	            return new boolean[] { false, true, true, false };	        case '7':	            return new boolean[] { true, true, true, false };	        case '8':	            return new boolean[] { false, false, false, true };	        case '9':	            return new boolean[] { true, false, false, true };	        case 'a':	        case 'A':	            return new boolean[] { false, true, false, true };	        case 'b':	        case 'B':	            return new boolean[] { true, true, false, true };	        case 'c':	        case 'C':	            return new boolean[] { false, false, true, true };	        case 'd':	        case 'D':	            return new boolean[] { true, false, true, true };	        case 'e':	        case 'E':	            return new boolean[] { false, true, true, true };	        case 'f':	        case 'F':	            return new boolean[] { true, true, true, true };	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public static int hexDigitMsb0ToInt(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return 0x0;	        case '1':	            return 0x8;	        case '2':	            return 0x4;	        case '3':	            return 0xC;	        case '4':	            return 0x2;	        case '5':	            return 0xA;	        case '6':	            return 0x6;	        case '7':	            return 0xE;	        case '8':	            return 0x1;	        case '9':	            return 0x9;	        case 'a':	        case 'A':	            return 0x5;	        case 'b':	        case 'B':	            return 0xD;	        case 'c':	        case 'C':	            return 0x3;	        case 'd':	        case 'D':	            return 0xB;	        case 'e':	        case 'E':	            return 0x7;	        case 'f':	        case 'F':	            return 0xF;	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static boolean isAlphaSpace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false && cs.charAt(i) != ' ') {	            return false;	        }	    }	    return true;	}
public HashCodeBuilder append(final short[] array) {	    if (array == null) {	        iTotal = iTotal * iConstant;	    } else {	        for (final short element : array) {	            append(element);	        }	    }	    return this;	}
private static long getFragment(final Calendar calendar, final int fragment, final int unit) {	    if (calendar == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final long millisPerUnit = getMillisPerUnit(unit);	    long result = 0;	    switch(fragment) {	        case Calendar.YEAR:	            result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;	            break;	        case Calendar.MONTH:	            result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;	            break;	    }	    switch(fragment) {	        case Calendar.YEAR:	        case Calendar.MONTH:	        case Calendar.DAY_OF_YEAR:	        case Calendar.DATE:	            result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;	        case Calendar.HOUR_OF_DAY:	            result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;	        case Calendar.MINUTE:	            result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;	        case Calendar.SECOND:	            result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;	            break;	        case Calendar.MILLISECOND:	            break;	        default:	            throw new IllegalArgumentException("The fragment " + fragment + " is not supported");	    }	    return result;	}
@Deprecated	public static String chomp(final String str, final String separator) {	    return removeEnd(str, separator);	}
public static String upperCase(final String str, final Locale locale) {	    if (str == null) {	        return null;	    }	    return str.toUpperCase(locale);	}
public static char binaryBeMsb0ToHexDigit(boolean[] src, int srcPos) {	    if (src.length == 0) {	        throw new IllegalArgumentException("Cannot convert an empty array.");	    }	    final int beSrcPos = src.length - 1 - srcPos;	    final int srcLen = Math.min(4, beSrcPos + 1);	    final boolean[] paddedSrc = new boolean[4];	    System.arraycopy(src, beSrcPos + 1 - srcLen, paddedSrc, 4 - srcLen, srcLen);	    src = paddedSrc;	    srcPos = 0;	    if (src[srcPos]) {	        if (src.length > srcPos + 1 && src[srcPos + 1]) {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'f';	                } else {	                    return 'e';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'd';	                } else {	                    return 'c';	                }	            }	        } else {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'b';	                } else {	                    return 'a';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '9';	                } else {	                    return '8';	                }	            }	        }	    } else {	        if (src.length > srcPos + 1 && src[srcPos + 1]) {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '7';	                } else {	                    return '6';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '5';	                } else {	                    return '4';	                }	            }	        } else {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '3';	                } else {	                    return '2';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '1';	                } else {	                    return '0';	                }	            }	        }	    }	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
public static String[] stripAll(final String[] strs, final String stripChars) {	    int strsLen;	    if (strs == null || (strsLen = strs.length) == 0) {	        return strs;	    }	    final String[] newArr = new String[strsLen];	    for (int i = 0; i < strsLen; i++) {	        newArr[i] = strip(strs[i], stripChars);	    }	    return newArr;	}
public boolean isEmptyTokenAsNull() {	    return this.emptyAsNull;	}
@Override	public boolean markSupported() {	    return true;	}
public final synchronized void setExternalExecutor(final ExecutorService externalExecutor) {	    if (isStarted()) {	        throw new IllegalStateException("Cannot set ExecutorService after start()!");	    }	    this.externalExecutor = externalExecutor;	}
@Override	public Integer build() {	    return Integer.valueOf(toHashCode());	}
protected String getSizeEndText() {	    return sizeEndText;	}
static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) {	    if (cs instanceof String && substring instanceof String) {	        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);	    } else {	        int index1 = thisStart;	        int index2 = start;	        int tmpLen = length;	        while (tmpLen-- > 0) {	            char c1 = cs.charAt(index1++);	            char c2 = substring.charAt(index2++);	            if (c1 == c2) {	                continue;	            }	            if (!ignoreCase) {	                return false;	            }	            if (Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {	                return false;	            }	        }	        return true;	    }	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
protected String getSummaryObjectEndText() {	    return summaryObjectEndText;	}
@Override	public void write(final String str, final int off, final int len) {	    StrBuilder.this.append(str, off, len);	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
@Override	public int translate(final CharSequence input, final int index, final Writer out) throws IOException {	    if (index != 0) {	        throw new IllegalStateException("CsvUnescaper should never reach the [1] index");	    }	    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {	        out.write(input.toString());	        return input.length();	    }	    final String quoteless = input.subSequence(1, input.length() - 1).toString();	    if (StringUtils.containsAny(quoteless, CSV_SEARCH_CHARS)) {	        out.write(StringUtils.replace(quoteless, CSV_QUOTE_STR + CSV_QUOTE_STR, CSV_QUOTE_STR));	    } else {	        out.write(input.toString());	    }	    return input.length();	}
public static Boolean or(final Boolean... array) {	    if (array == null) {	        throw new IllegalArgumentException("The Array must not be null");	    }	    if (array.length == 0) {	        throw new IllegalArgumentException("Array is empty");	    }	    try {	        final boolean[] primitive = ArrayUtils.toPrimitive(array);	        return or(primitive) ? Boolean.TRUE : Boolean.FALSE;	    } catch (final NullPointerException ex) {	        throw new IllegalArgumentException("The array must not contain any null elements");	    }	}
@Override	public int compare(final Object obj1, final Object obj2) {	    return ((Comparable) obj1).compareTo(obj2);	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
protected String getSizeEndText() {	    return sizeEndText;	}
protected void appendSummary(final StringBuffer buffer, final String fieldName, final boolean[] array) {	    appendSummarySize(buffer, fieldName, array.length);	}
public static float min(final float a, final float b, final float c) {	    return Math.min(Math.min(a, b), c);	}
@Override	public int length() {	    return size;	}
public int toComparison() {	    return comparison;	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
@Override	public Integer getValue() {	    return Integer.valueOf(this.value);	}
@Override	public Thread newThread(final Runnable r) {	    final Thread t = getWrappedFactory().newThread(r);	    initializeThread(t);	    return t;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public static String hex(final int codepoint) {	    return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH);	}
protected void removeLastFieldSeparator(final StringBuffer buffer) {	    final int len = buffer.length();	    final int sepLen = fieldSeparator.length();	    if (len > 0 && sepLen > 0 && len >= sepLen) {	        boolean match = true;	        for (int i = 0; i < sepLen; i++) {	            if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {	                match = false;	                break;	            }	        }	        if (match) {	            buffer.setLength(len - sepLen);	        }	    }	}
@Deprecated	public static Throwable getCause(final Throwable throwable, String[] methodNames) {	    if (throwable == null) {	        return null;	    }	    if (methodNames == null) {	        methodNames = CAUSE_METHOD_NAMES;	    }	    for (final String methodName : methodNames) {	        if (methodName != null) {	            final Throwable cause = getCauseUsingMethodName(throwable, methodName);	            if (cause != null) {	                return cause;	            }	        }	    }	    return null;	}
public int set(final int holder) {	    return holder | _mask;	}
public int capacity() {	    return buffer.length;	}
public boolean isEmpty() {	    return size == 0;	}
public static boolean[] hexDigitMsb0ToBinary(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return new boolean[] { false, false, false, false };	        case '1':	            return new boolean[] { false, false, false, true };	        case '2':	            return new boolean[] { false, false, true, false };	        case '3':	            return new boolean[] { false, false, true, true };	        case '4':	            return new boolean[] { false, true, false, false };	        case '5':	            return new boolean[] { false, true, false, true };	        case '6':	            return new boolean[] { false, true, true, false };	        case '7':	            return new boolean[] { false, true, true, true };	        case '8':	            return new boolean[] { true, false, false, false };	        case '9':	            return new boolean[] { true, false, false, true };	        case 'a':	        case 'A':	            return new boolean[] { true, false, true, false };	        case 'b':	        case 'B':	            return new boolean[] { true, false, true, true };	        case 'c':	        case 'C':	            return new boolean[] { true, true, false, false };	        case 'd':	        case 'D':	            return new boolean[] { true, true, false, true };	        case 'e':	        case 'E':	            return new boolean[] { true, true, true, false };	        case 'f':	        case 'F':	            return new boolean[] { true, true, true, true };	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public String getNewLineText() {	    return newLine;	}
private static boolean endsWith(final CharSequence str, final CharSequence suffix, final boolean ignoreCase) {	    if (str == null || suffix == null) {	        return str == null && suffix == null;	    }	    if (suffix.length() > str.length()) {	        return false;	    }	    final int strOffset = str.length() - suffix.length();	    return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
protected boolean isUseShortClassName() {	    return useShortClassName;	}
protected String getFieldSeparator() {	    return fieldSeparator;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static boolean isSameInstant(final Calendar cal1, final Calendar cal2) {	    if (cal1 == null || cal2 == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    return cal1.getTime().getTime() == cal2.getTime().getTime();	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static String appendIfMissing(final String str, final CharSequence suffix, final CharSequence... suffixes) {	    return appendIfMissing(str, suffix, false, suffixes);	}
public static float max(final float a, final float b, final float c) {	    return Math.max(Math.max(a, b), c);	}
public static String center(String str, final int size, String padStr) {	    if (str == null || size <= 0) {	        return str;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    str = leftPad(str, strLen + pads / 2, padStr);	    str = rightPad(str, size, padStr);	    return str;	}
protected boolean isDefaultFullDetail() {	    return defaultFullDetail;	}
public short setShortBoolean(final short holder, final boolean flag) {	    return flag ? setShort(holder) : clearShort(holder);	}
public boolean isEmpty() {	    return size == 0;	}
protected boolean isUseShortClassName() {	    return useShortClassName;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
@Override	public Object parseObject(final String source, final ParsePosition pos) {	    return parse(source, pos);	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
@Override	public void reset() {	    pos = mark;	}
static String format(final Token[] tokens, final int years, final int months, final int days, final int hours, final int minutes, final int seconds, int milliseconds, final boolean padWithZeros) {	    final StringBuilder buffer = new StringBuilder();	    boolean lastOutputSeconds = false;	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        final Token token = tokens[i];	        final Object value = token.getValue();	        final int count = token.getCount();	        if (value instanceof StringBuilder) {	            buffer.append(value.toString());	        } else {	            if (value == y) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer.toString(years));	                lastOutputSeconds = false;	            } else if (value == M) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer.toString(months));	                lastOutputSeconds = false;	            } else if (value == d) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer.toString(days));	                lastOutputSeconds = false;	            } else if (value == H) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer.toString(hours));	                lastOutputSeconds = false;	            } else if (value == m) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer.toString(minutes));	                lastOutputSeconds = false;	            } else if (value == s) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer.toString(seconds));	                lastOutputSeconds = true;	            } else if (value == S) {	                if (lastOutputSeconds) {	                    milliseconds += 1000;	                    final String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds);	                    buffer.append(str.substring(1));	                } else {	                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds));	                }	                lastOutputSeconds = false;	            }	        }	    }	    return buffer.toString();	}
public static boolean[] removeElements(final boolean[] array, final boolean... values) {	    if (isEmpty(array) || isEmpty(values)) {	        return clone(array);	    }	    final HashMap<Boolean, MutableInt> occurrences = new HashMap<Boolean, MutableInt>(2);	    for (final boolean v : values) {	        final Boolean boxed = Boolean.valueOf(v);	        final MutableInt count = occurrences.get(boxed);	        if (count == null) {	            occurrences.put(boxed, new MutableInt(1));	        } else {	            count.increment();	        }	    }	    final BitSet toRemove = new BitSet();	    for (final Map.Entry<Boolean, MutableInt> e : occurrences.entrySet()) {	        final Boolean v = e.getKey();	        int found = 0;	        for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) {	            found = indexOf(array, v.booleanValue(), found);	            if (found < 0) {	                break;	            }	            toRemove.set(found++);	        }	    }	    return (boolean[]) removeAll(array, toRemove);	}
@Override	public int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd) {	    return buffer[pos] <= 32 ? 1 : 0;	}
public int size() {	    return size;	}
public static boolean containsNone(final CharSequence cs, final String invalidChars) {	    if (cs == null || invalidChars == null) {	        return true;	    }	    return containsNone(cs, invalidChars.toCharArray());	}
@Override	public int length() {	    return size;	}
private static int ordinalIndexOf(final CharSequence str, final CharSequence searchStr, final int ordinal, final boolean lastIndex) {	    if (str == null || searchStr == null || ordinal <= 0) {	        return INDEX_NOT_FOUND;	    }	    if (searchStr.length() == 0) {	        return lastIndex ? str.length() : 0;	    }	    int found = 0;	    int index = lastIndex ? str.length() : INDEX_NOT_FOUND;	    do {	        if (lastIndex) {	            index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);	        } else {	            index = CharSequenceUtils.indexOf(str, searchStr, index + 1);	        }	        if (index < 0) {	            return index;	        }	        found++;	    } while (found < ordinal);	    return index;	}
public static boolean endsWithAny(final CharSequence string, final CharSequence... searchStrings) {	    if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {	        return false;	    }	    for (final CharSequence searchString : searchStrings) {	        if (StringUtils.endsWith(string, searchString)) {	            return true;	        }	    }	    return false;	}
public boolean isEmpty() {	    return size == 0;	}
public static int lastIndexOfIgnoreCase(final CharSequence str, final CharSequence searchStr, int startPos) {	    if (str == null || searchStr == null) {	        return INDEX_NOT_FOUND;	    }	    if (startPos > str.length() - searchStr.length()) {	        startPos = str.length() - searchStr.length();	    }	    if (startPos < 0) {	        return INDEX_NOT_FOUND;	    }	    if (searchStr.length() == 0) {	        return startPos;	    }	    for (int i = startPos; i >= 0; i--) {	        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
@Override	public Date parse(final String source, final ParsePosition pos) {	    return parser.parse(source, pos);	}
public static String toStringExclude(final Object object, final String... excludeFieldNames) {	    return new ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();	}
public static boolean equalsIgnoreCase(final CharSequence str1, final CharSequence str2) {	    if (str1 == null || str2 == null) {	        return str1 == str2;	    } else if (str1 == str2) {	        return true;	    } else if (str1.length() != str2.length()) {	        return false;	    } else {	        return CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, str1.length());	    }	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static String swapCase(final String str) {	    if (StringUtils.isEmpty(str)) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (Character.isUpperCase(ch)) {	            buffer[i] = Character.toLowerCase(ch);	        } else if (Character.isTitleCase(ch)) {	            buffer[i] = Character.toLowerCase(ch);	        } else if (Character.isLowerCase(ch)) {	            buffer[i] = Character.toUpperCase(ch);	        }	    }	    return new String(buffer);	}
public String getNewLineText() {	    return newLine;	}
public char getEscapeChar() {	    return this.escapeChar;	}
public ReflectionToStringBuilder setExcludeFieldNames(final String... excludeFieldNamesParam) {	    if (excludeFieldNamesParam == null) {	        this.excludeFieldNames = null;	    } else {	        this.excludeFieldNames = toNoNullStringArray(excludeFieldNamesParam);	        Arrays.sort(this.excludeFieldNames);	    }	    return this;	}
public static String removeEndIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (endsWithIgnoreCase(str, remove)) {	        return str.substring(0, str.length() - remove.length());	    }	    return str;	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public static String[][] HTML40_EXTENDED_UNESCAPE() {	    return HTML40_EXTENDED_UNESCAPE.clone();	}
public static boolean isNotBlank(final CharSequence cs) {	    return !StringUtils.isBlank(cs);	}
static int lastIndexOf(final CharSequence cs, final CharSequence searchChar, final int start) {	    return cs.toString().lastIndexOf(searchChar.toString(), start);	}
public static String getShortCanonicalName(final String canonicalName) {	    return ClassUtils.getShortClassName(getCanonicalName(canonicalName));	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
@Override	public float floatValue() {	    return value;	}
public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] result = new boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        final Boolean b = array[i];	        result[i] = (b == null ? valueForNull : b.booleanValue());	    }	    return result;	}
static JavaVersion getJavaVersion(final String nom) {	    return get(nom);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static String[] splitByWholeSeparatorPreserveAllTokens(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, true);	}
public int size() {	    return size;	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
@Override	public int length() {	    return size;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public String getNullText() {	    return nullText;	}
protected boolean isUseFieldNames() {	    return useFieldNames;	}
protected String getArraySeparator() {	    return arraySeparator;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
public static String substringBeforeLast(final String str, final String separator) {	    if (isEmpty(str) || isEmpty(separator)) {	        return str;	    }	    final int pos = str.lastIndexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
public static String reverse(final String str) {	    if (str == null) {	        return null;	    }	    return new StringBuilder(str).reverse().toString();	}
static JavaVersion get(final String nom) {	    if ("0.9".equals(nom)) {	        return JAVA_0_9;	    } else if ("1.1".equals(nom)) {	        return JAVA_1_1;	    } else if ("1.2".equals(nom)) {	        return JAVA_1_2;	    } else if ("1.3".equals(nom)) {	        return JAVA_1_3;	    } else if ("1.4".equals(nom)) {	        return JAVA_1_4;	    } else if ("1.5".equals(nom)) {	        return JAVA_1_5;	    } else if ("1.6".equals(nom)) {	        return JAVA_1_6;	    } else if ("1.7".equals(nom)) {	        return JAVA_1_7;	    } else if ("1.8".equals(nom)) {	        return JAVA_1_8;	    } else {	        return null;	    }	}
public StringBuilder toStringBuilder() {	    return new StringBuilder(size).append(buffer, 0, size);	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
@Override	public float floatValue() {	    return value;	}
public static void isTrue(final boolean expression) {	    if (expression == false) {	        throw new IllegalArgumentException(DEFAULT_IS_TRUE_EX_MESSAGE);	    }	}
public String getNewLineText() {	    return newLine;	}
public static final String escapeJava(final String input) {	    return ESCAPE_JAVA.translate(input);	}
@Override	public int length() {	    return size;	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
private int substitute(final StrBuilder buf, final int offset, final int length, List<String> priorVariables) {	    final StrMatcher prefixMatcher = getVariablePrefixMatcher();	    final StrMatcher suffixMatcher = getVariableSuffixMatcher();	    final char escape = getEscapeChar();	    final boolean top = priorVariables == null;	    boolean altered = false;	    int lengthChange = 0;	    char[] chars = buf.buffer;	    int bufEnd = offset + length;	    int pos = offset;	    while (pos < bufEnd) {	        final int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);	        if (startMatchLen == 0) {	            pos++;	        } else {	            if (pos > offset && chars[pos - 1] == escape) {	                buf.deleteCharAt(pos - 1);	                chars = buf.buffer;	                lengthChange--;	                altered = true;	                bufEnd--;	            } else {	                final int startPos = pos;	                pos += startMatchLen;	                int endMatchLen = 0;	                int nestedVarCount = 0;	                while (pos < bufEnd) {	                    if (isEnableSubstitutionInVariables() && (endMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) {	                        nestedVarCount++;	                        pos += endMatchLen;	                        continue;	                    }	                    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);	                    if (endMatchLen == 0) {	                        pos++;	                    } else {	                        if (nestedVarCount == 0) {	                            String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);	                            if (isEnableSubstitutionInVariables()) {	                                final StrBuilder bufName = new StrBuilder(varName);	                                substitute(bufName, 0, bufName.length());	                                varName = bufName.toString();	                            }	                            pos += endMatchLen;	                            final int endPos = pos;	                            if (priorVariables == null) {	                                priorVariables = new ArrayList<String>();	                                priorVariables.add(new String(chars, offset, length));	                            }	                            checkCyclicSubstitution(varName, priorVariables);	                            priorVariables.add(varName);	                            final String varValue = resolveVariable(varName, buf, startPos, endPos);	                            if (varValue != null) {	                                final int varLen = varValue.length();	                                buf.replace(startPos, endPos, varValue);	                                altered = true;	                                int change = substitute(buf, startPos, varLen, priorVariables);	                                change = change + varLen - (endPos - startPos);	                                pos += change;	                                bufEnd += change;	                                lengthChange += change;	                                chars = buf.buffer;	                            }	                            priorVariables.remove(priorVariables.size() - 1);	                            break;	                        } else {	                            nestedVarCount--;	                            pos += endMatchLen;	                        }	                    }	                }	            }	        }	    }	    if (top) {	        return altered ? 1 : 0;	    }	    return lengthChange;	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public HashCodeBuilder append(final short[] array) {	    if (array == null) {	        iTotal = iTotal * iConstant;	    } else {	        for (final short element : array) {	            append(element);	        }	    }	    return this;	}
public char getEscapeChar() {	    return this.escapeChar;	}
public String getNewLineText() {	    return newLine;	}
public static int indexOfDifference(final CharSequence... css) {	    if (css == null || css.length <= 1) {	        return INDEX_NOT_FOUND;	    }	    boolean anyStringNull = false;	    boolean allStringsNull = true;	    final int arrayLen = css.length;	    int shortestStrLen = Integer.MAX_VALUE;	    int longestStrLen = 0;	    for (int i = 0; i < arrayLen; i++) {	        if (css[i] == null) {	            anyStringNull = true;	            shortestStrLen = 0;	        } else {	            allStringsNull = false;	            shortestStrLen = Math.min(css[i].length(), shortestStrLen);	            longestStrLen = Math.max(css[i].length(), longestStrLen);	        }	    }	    if (allStringsNull || longestStrLen == 0 && !anyStringNull) {	        return INDEX_NOT_FOUND;	    }	    if (shortestStrLen == 0) {	        return 0;	    }	    int firstDiff = -1;	    for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {	        final char comparisonChar = css[0].charAt(stringPos);	        for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {	            if (css[arrayPos].charAt(stringPos) != comparisonChar) {	                firstDiff = stringPos;	                break;	            }	        }	        if (firstDiff != -1) {	            break;	        }	    }	    if (firstDiff == -1 && shortestStrLen != longestStrLen) {	        return shortestStrLen;	    }	    return firstDiff;	}
public int lastIndexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex >= size ? size - 1 : startIndex);	    if (matcher == null || startIndex < 0) {	        return -1;	    }	    final char[] buf = buffer;	    final int endIndex = startIndex + 1;	    for (int i = startIndex; i >= 0; i--) {	        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {	            return i;	        }	    }	    return -1;	}
public static String getMessage(final Throwable th) {	    if (th == null) {	        return "";	    }	    final String clsName = ClassUtils.getShortClassName(th, null);	    final String msg = th.getMessage();	    return clsName + ": " + StringUtils.defaultString(msg);	}
protected boolean isUseFieldNames() {	    return useFieldNames;	}
@Override	public void setValue(final Number value) {	    this.value = value.shortValue();	}
public static short CONST_SHORT(final int v) throws IllegalArgumentException {	    if (v < Short.MIN_VALUE || v > Short.MAX_VALUE) {	        throw new IllegalArgumentException("Supplied value must be a valid byte literal between -32768 and 32767: [" + v + "]");	    }	    return (short) v;	}
public static String getShortCanonicalName(final String canonicalName) {	    return ClassUtils.getShortClassName(getCanonicalName(canonicalName));	}
@Override	public String next() {	    if (hasNext()) {	        return tokens[tokenPos++];	    }	    throw new NoSuchElementException();	}
protected boolean isUseClassName() {	    return useClassName;	}
public static String substringBeforeLast(final String str, final String separator) {	    if (isEmpty(str) || isEmpty(separator)) {	        return str;	    }	    final int pos = str.lastIndexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
public static void handleCause(final ExecutionException ex) throws ConcurrentException {	    final ConcurrentException cex = extractCause(ex);	    if (cex != null) {	        throw cex;	    }	}
public static <T> Constructor<T> getMatchingAccessibleConstructor(final Class<T> cls, final Class<?>... parameterTypes) {	    try {	        final Constructor<T> ctor = cls.getConstructor(parameterTypes);	        MemberUtils.setAccessibleWorkaround(ctor);	        return ctor;	    } catch (final NoSuchMethodException e) {	    }	    Constructor<T> result = null;	    final Constructor<?>[] ctors = cls.getConstructors();	    for (Constructor<?> ctor : ctors) {	        if (ClassUtils.isAssignable(parameterTypes, ctor.getParameterTypes(), true)) {	            ctor = getAccessibleConstructor(ctor);	            if (ctor != null) {	                MemberUtils.setAccessibleWorkaround(ctor);	                if (result == null || MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result.getParameterTypes(), parameterTypes) < 0) {	                    @SuppressWarnings("unchecked")	                    final Constructor<T> constructor = (Constructor<T>) ctor;	                    result = constructor;	                }	            }	        }	    }	    return result;	}
public static Date parseDate(final String str, final Locale locale, final String... parsePatterns) throws ParseException {	    return parseDateWithLeniency(str, locale, parsePatterns, true);	}
public static StrMatcher noneMatcher() {	    return NONE_MATCHER;	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static <T> T invokeExactConstructor(final Class<T> cls, Object[] args, Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {	    if (args == null) {	        args = ArrayUtils.EMPTY_OBJECT_ARRAY;	    }	    if (parameterTypes == null) {	        parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;	    }	    final Constructor<T> ctor = getAccessibleConstructor(cls, parameterTypes);	    if (ctor == null) {	        throw new NoSuchMethodException("No such accessible constructor on object: " + cls.getName());	    }	    return ctor.newInstance(args);	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public static boolean toBoolean(final String str, final String trueString, final String falseString) {	    if (str == trueString) {	        return true;	    } else if (str == falseString) {	        return false;	    } else if (str != null) {	        if (str.equals(trueString)) {	            return true;	        } else if (str.equals(falseString)) {	            return false;	        }	    }	    throw new IllegalArgumentException("The String did not match either specified value");	}
public int lastIndexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex >= size ? size - 1 : startIndex);	    if (matcher == null || startIndex < 0) {	        return -1;	    }	    final char[] buf = buffer;	    final int endIndex = startIndex + 1;	    for (int i = startIndex; i >= 0; i--) {	        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {	            return i;	        }	    }	    return -1;	}
@Override	public float floatValue() {	    return value;	}
public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {	    if ((src.length == 0 && srcPos == 0) || 0 == nBools) {	        return dstInit;	    }	    if (nBools - 1 + dstPos >= 32) {	        throw new IllegalArgumentException("nBools-1+dstPos is greather or equal to than 32");	    }	    int out = dstInit;	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + dstPos;	        final int bits = (src[i + srcPos] ? 1 : 0) << shift;	        final int mask = 0x1 << shift;	        out = (out & ~mask) | bits;	    }	    return out;	}
public static String getShortClassName(String className) {	    if (StringUtils.isEmpty(className)) {	        return StringUtils.EMPTY;	    }	    final StringBuilder arrayPrefix = new StringBuilder();	    if (className.startsWith("[")) {	        while (className.charAt(0) == '[') {	            className = className.substring(1);	            arrayPrefix.append("[]");	        }	        if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {	            className = className.substring(1, className.length() - 1);	        }	        if (reverseAbbreviationMap.containsKey(className)) {	            className = reverseAbbreviationMap.get(className);	        }	    }	    final int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);	    final int innerIdx = className.indexOf(INNER_CLASS_SEPARATOR_CHAR, lastDotIdx == -1 ? 0 : lastDotIdx + 1);	    String out = className.substring(lastDotIdx + 1);	    if (innerIdx != -1) {	        out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);	    }	    return out + arrayPrefix;	}
private static boolean endsWith(final CharSequence str, final CharSequence suffix, final boolean ignoreCase) {	    if (str == null || suffix == null) {	        return str == null && suffix == null;	    }	    if (suffix.length() > str.length()) {	        return false;	    }	    final int strOffset = str.length() - suffix.length();	    return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
@Override	public void setDefaultFullDetail(final boolean defaultFullDetail) {	    super.setDefaultFullDetail(defaultFullDetail);	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public static boolean isSameDay(final Calendar cal1, final Calendar cal2) {	    if (cal1 == null || cal2 == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));	}
public Fraction pow(final int power) {	    if (power == 1) {	        return this;	    } else if (power == 0) {	        return ONE;	    } else if (power < 0) {	        if (power == Integer.MIN_VALUE) {	            return this.invert().pow(2).pow(-(power / 2));	        }	        return this.invert().pow(-power);	    } else {	        final Fraction f = this.multiplyBy(this);	        if (power % 2 == 0) {	            return f.pow(power / 2);	        } else {	            return f.pow(power / 2).multiplyBy(this);	        }	    }	}
public String getNewLineText() {	    return newLine;	}
public StrBuilder appendWithSeparators(final Iterator<?> it, String separator) {	    if (it != null) {	        separator = ObjectUtils.toString(separator);	        while (it.hasNext()) {	            append(it.next());	            if (it.hasNext()) {	                append(separator);	            }	        }	    }	    return this;	}
public long getSplitTime() {	    return getSplitNanoTime() / NANO_2_MILLIS;	}
public static char binaryBeMsb0ToHexDigit(boolean[] src, int srcPos) {	    if (src.length == 0) {	        throw new IllegalArgumentException("Cannot convert an empty array.");	    }	    final int beSrcPos = src.length - 1 - srcPos;	    final int srcLen = Math.min(4, beSrcPos + 1);	    final boolean[] paddedSrc = new boolean[4];	    System.arraycopy(src, beSrcPos + 1 - srcLen, paddedSrc, 4 - srcLen, srcLen);	    src = paddedSrc;	    srcPos = 0;	    if (src[srcPos]) {	        if (src.length > srcPos + 1 && src[srcPos + 1]) {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'f';	                } else {	                    return 'e';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'd';	                } else {	                    return 'c';	                }	            }	        } else {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'b';	                } else {	                    return 'a';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '9';	                } else {	                    return '8';	                }	            }	        }	    } else {	        if (src.length > srcPos + 1 && src[srcPos + 1]) {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '7';	                } else {	                    return '6';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '5';	                } else {	                    return '4';	                }	            }	        } else {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '3';	                } else {	                    return '2';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '1';	                } else {	                    return '0';	                }	            }	        }	    }	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public Fraction add(final Fraction fraction) {	    return addSub(fraction, true);	}
public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] result = new boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        final Boolean b = array[i];	        result[i] = (b == null ? valueForNull : b.booleanValue());	    }	    return result;	}
public int size() {	    return size;	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
public static String toString(final Object obj, final String nullStr) {	    return obj == null ? nullStr : obj.toString();	}
protected void setArrayContentDetail(final boolean arrayContentDetail) {	    this.arrayContentDetail = arrayContentDetail;	}
public static String formatDurationISO(final long durationMillis) {	    return formatDuration(durationMillis, ISO_EXTENDED_FORMAT_PATTERN, false);	}
public void subtract(final Number operand) {	    this.value -= operand.longValue();	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public boolean isNegated() {	    return negated;	}
public static String removePattern(final String source, final String regex) {	    return replacePattern(source, regex, StringUtils.EMPTY);	}
public static String random(final int count, final char... chars) {	    if (chars == null) {	        return random(count, 0, 0, false, false, null, RANDOM);	    }	    return random(count, 0, chars.length, false, false, chars, RANDOM);	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
public static int indexOfDifference(final CharSequence... css) {	    if (css == null || css.length <= 1) {	        return INDEX_NOT_FOUND;	    }	    boolean anyStringNull = false;	    boolean allStringsNull = true;	    final int arrayLen = css.length;	    int shortestStrLen = Integer.MAX_VALUE;	    int longestStrLen = 0;	    for (int i = 0; i < arrayLen; i++) {	        if (css[i] == null) {	            anyStringNull = true;	            shortestStrLen = 0;	        } else {	            allStringsNull = false;	            shortestStrLen = Math.min(css[i].length(), shortestStrLen);	            longestStrLen = Math.max(css[i].length(), longestStrLen);	        }	    }	    if (allStringsNull || longestStrLen == 0 && !anyStringNull) {	        return INDEX_NOT_FOUND;	    }	    if (shortestStrLen == 0) {	        return 0;	    }	    int firstDiff = -1;	    for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {	        final char comparisonChar = css[0].charAt(stringPos);	        for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {	            if (css[arrayPos].charAt(stringPos) != comparisonChar) {	                firstDiff = stringPos;	                break;	            }	        }	        if (firstDiff != -1) {	            break;	        }	    }	    if (firstDiff == -1 && shortestStrLen != longestStrLen) {	        return shortestStrLen;	    }	    return firstDiff;	}
public static <L, R> Pair<L, R> of(final L left, final R right) {	    return new ImmutablePair<L, R>(left, right);	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
@Override	public int compare(final Object obj1, final Object obj2) {	    return ((Comparable) obj1).compareTo(obj2);	}
public static void isTrue(final boolean expression) {	    if (expression == false) {	        throw new IllegalArgumentException(DEFAULT_IS_TRUE_EX_MESSAGE);	    }	}
public static int indexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = Integer.MAX_VALUE;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.indexOf(str, search, 0);	        if (tmp == INDEX_NOT_FOUND) {	            continue;	        }	        if (tmp < ret) {	            ret = tmp;	        }	    }	    return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;	}
public static String formatDuration(long durationMillis, final String format, final boolean padWithZeros) {	    final Token[] tokens = lexx(format);	    int days = 0;	    int hours = 0;	    int minutes = 0;	    int seconds = 0;	    int milliseconds = 0;	    if (Token.containsTokenWithValue(tokens, d)) {	        days = (int) (durationMillis / DateUtils.MILLIS_PER_DAY);	        durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY);	    }	    if (Token.containsTokenWithValue(tokens, H)) {	        hours = (int) (durationMillis / DateUtils.MILLIS_PER_HOUR);	        durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR);	    }	    if (Token.containsTokenWithValue(tokens, m)) {	        minutes = (int) (durationMillis / DateUtils.MILLIS_PER_MINUTE);	        durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE);	    }	    if (Token.containsTokenWithValue(tokens, s)) {	        seconds = (int) (durationMillis / DateUtils.MILLIS_PER_SECOND);	        durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND);	    }	    if (Token.containsTokenWithValue(tokens, S)) {	        milliseconds = (int) durationMillis;	    }	    return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros);	}
public static boolean isAlphaSpace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false && cs.charAt(i) != ' ') {	            return false;	        }	    }	    return true;	}
public static boolean isNumericSpace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {	            return false;	        }	    }	    return true;	}
public int capacity() {	    return buffer.length;	}
public int capacity() {	    return buffer.length;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public static <L, M, R> ImmutableTriple<L, M, R> of(final L left, final M middle, final R right) {	    return new ImmutableTriple<L, M, R>(left, middle, right);	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
public static Fraction getFraction(String str) {	    if (str == null) {	        throw new IllegalArgumentException("The string must not be null");	    }	    int pos = str.indexOf('.');	    if (pos >= 0) {	        return getFraction(Double.parseDouble(str));	    }	    pos = str.indexOf(' ');	    if (pos > 0) {	        final int whole = Integer.parseInt(str.substring(0, pos));	        str = str.substring(pos + 1);	        pos = str.indexOf('/');	        if (pos < 0) {	            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");	        } else {	            final int numer = Integer.parseInt(str.substring(0, pos));	            final int denom = Integer.parseInt(str.substring(pos + 1));	            return getFraction(whole, numer, denom);	        }	    }	    pos = str.indexOf('/');	    if (pos < 0) {	        return getFraction(Integer.parseInt(str), 1);	    } else {	        final int numer = Integer.parseInt(str.substring(0, pos));	        final int denom = Integer.parseInt(str.substring(pos + 1));	        return getFraction(numer, denom);	    }	}
public String getNewLineText() {	    return newLine;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public String getNewLineText() {	    return newLine;	}
protected String getContentEnd() {	    return contentEnd;	}
public char getEscapeChar() {	    return this.escapeChar;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public String getNullText() {	    return nullText;	}
public static String reverse(final String str) {	    if (str == null) {	        return null;	    }	    return new StringBuilder(str).reverse().toString();	}
public int capacity() {	    return buffer.length;	}
public static CharRange isNot(final char ch) {	    return new CharRange(ch, ch, true);	}
public int size() {	    return size;	}
public void reset() {	    this.isEquals = true;	}
public synchronized boolean start() {	    if (!isStarted()) {	        ExecutorService tempExec;	        executor = getExternalExecutor();	        if (executor == null) {	            executor = tempExec = createExecutor();	        } else {	            tempExec = null;	        }	        future = executor.submit(createTask(tempExec));	        return true;	    }	    return false;	}
public static int toInteger(final Boolean bool, final int trueValue, final int falseValue, final int nullValue) {	    if (bool == null) {	        return nullValue;	    }	    return bool.booleanValue() ? trueValue : falseValue;	}
public int capacity() {	    return buffer.length;	}
public static String removeStart(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (str.startsWith(remove)) {	        return str.substring(remove.length());	    }	    return str;	}
private static int indexOf(final Throwable throwable, final Class<?> type, int fromIndex, final boolean subclass) {	    if (throwable == null || type == null) {	        return -1;	    }	    if (fromIndex < 0) {	        fromIndex = 0;	    }	    final Throwable[] throwables = ExceptionUtils.getThrowables(throwable);	    if (fromIndex >= throwables.length) {	        return -1;	    }	    if (subclass) {	        for (int i = fromIndex; i < throwables.length; i++) {	            if (type.isAssignableFrom(throwables[i].getClass())) {	                return i;	            }	        }	    } else {	        for (int i = fromIndex; i < throwables.length; i++) {	            if (type.equals(throwables[i].getClass())) {	                return i;	            }	        }	    }	    return -1;	}
public Float toFloat() {	    return Float.valueOf(floatValue());	}
public static <T> Future<T> constantFuture(final T value) {	    return new ConstantFuture<T>(value);	}
@Override	public String toString() {	    return new String(buffer, 0, size);	}
public static CharRange is(final char ch) {	    return new CharRange(ch, ch, false);	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
static String getTimeZoneDisplay(final TimeZone tz, final boolean daylight, final int style, final Locale locale) {	    final TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);	    String value = cTimeZoneDisplayCache.get(key);	    if (value == null) {	        value = tz.getDisplayName(daylight, style, locale);	        final String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);	        if (prior != null) {	            value = prior;	        }	    }	    return value;	}
public static boolean containsWhitespace(final CharSequence seq) {	    if (isEmpty(seq)) {	        return false;	    }	    final int strLen = seq.length();	    for (int i = 0; i < strLen; i++) {	        if (Character.isWhitespace(seq.charAt(i))) {	            return true;	        }	    }	    return false;	}
private static Object add(final Object array, final int index, final Object element, final Class<?> clss) {	    if (array == null) {	        if (index != 0) {	            throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");	        }	        final Object joinedArray = Array.newInstance(clss, 1);	        Array.set(joinedArray, 0, element);	        return joinedArray;	    }	    final int length = Array.getLength(array);	    if (index > length || index < 0) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(clss, length + 1);	    System.arraycopy(array, 0, result, 0, index);	    Array.set(result, index, element);	    if (index < length) {	        System.arraycopy(array, index, result, index + 1, length - index);	    }	    return result;	}
public char[] toCharArray(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len == 0) {	        return ArrayUtils.EMPTY_CHAR_ARRAY;	    }	    final char[] chars = new char[len];	    System.arraycopy(buffer, startIndex, chars, 0, len);	    return chars;	}
public StringBuffer toStringBuffer() {	    return new StringBuffer(size).append(buffer, 0, size);	}
public static String toString(final Object obj, final String nullStr) {	    return obj == null ? nullStr : obj.toString();	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
public int size() {	    return size;	}
public int capacity() {	    return buffer.length;	}
public int toHashCode() {	    return iTotal;	}
protected int getTaskCount() {	    return 1;	}
public int capacity() {	    return buffer.length;	}
protected String parseToken(final String pattern, final int[] indexRef) {	    final StringBuilder buf = new StringBuilder();	    int i = indexRef[0];	    final int length = pattern.length();	    char c = pattern.charAt(i);	    if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {	        buf.append(c);	        while (i + 1 < length) {	            final char peek = pattern.charAt(i + 1);	            if (peek == c) {	                buf.append(c);	                i++;	            } else {	                break;	            }	        }	    } else {	        buf.append('\'');	        boolean inLiteral = false;	        for (; i < length; i++) {	            c = pattern.charAt(i);	            if (c == '\'') {	                if (i + 1 < length && pattern.charAt(i + 1) == '\'') {	                    i++;	                    buf.append(c);	                } else {	                    inLiteral = !inLiteral;	                }	            } else if (!inLiteral && (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {	                i--;	                break;	            } else {	                buf.append(c);	            }	        }	    }	    indexRef[0] = i;	    return buf.toString();	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public int size() {	    return size;	}
@Override	public int translate(final CharSequence input, final int index, final Writer out) throws IOException {	    if (input.charAt(index) == '\\' && index < (input.length() - 1) && Character.isDigit(input.charAt(index + 1))) {	        final int start = index + 1;	        int end = index + 2;	        while (end < input.length() && Character.isDigit(input.charAt(end))) {	            end++;	            if (Integer.parseInt(input.subSequence(start, end).toString(), 10) > OCTAL_MAX) {	                end--;	                break;	            }	        }	        out.write(Integer.parseInt(input.subSequence(start, end).toString(), 8));	        return 1 + end - start;	    }	    return 0;	}
public static <T> Constructor<T> getAccessibleConstructor(final Constructor<T> ctor) {	    return MemberUtils.isAccessible(ctor) && Modifier.isPublic(ctor.getDeclaringClass().getModifiers()) ? ctor : null;	}
@Override	public boolean markSupported() {	    return true;	}
public int capacity() {	    return buffer.length;	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
@Override	public ContextedException addContextValue(final String label, final Object value) {	    exceptionContext.addContextValue(label, value);	    return this;	}
public static String[] substringsBetween(final String str, final String open, final String close) {	    if (str == null || isEmpty(open) || isEmpty(close)) {	        return null;	    }	    final int strLen = str.length();	    if (strLen == 0) {	        return ArrayUtils.EMPTY_STRING_ARRAY;	    }	    final int closeLen = close.length();	    final int openLen = open.length();	    final List<String> list = new ArrayList<String>();	    int pos = 0;	    while (pos < strLen - closeLen) {	        int start = str.indexOf(open, pos);	        if (start < 0) {	            break;	        }	        start += openLen;	        final int end = str.indexOf(close, start);	        if (end < 0) {	            break;	        }	        list.add(str.substring(start, end));	        pos = end + closeLen;	    }	    if (list.isEmpty()) {	        return null;	    }	    return list.toArray(new String[list.size()]);	}
public int size() {	    return size;	}
public int toComparison() {	    return comparison;	}
@Override	public int compareTo(final MutableByte other) {	    final byte anotherVal = other.value;	    return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);	}
private static long getFragment(final Calendar calendar, final int fragment, final int unit) {	    if (calendar == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final long millisPerUnit = getMillisPerUnit(unit);	    long result = 0;	    switch(fragment) {	        case Calendar.YEAR:	            result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;	            break;	        case Calendar.MONTH:	            result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;	            break;	    }	    switch(fragment) {	        case Calendar.YEAR:	        case Calendar.MONTH:	        case Calendar.DAY_OF_YEAR:	        case Calendar.DATE:	            result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;	        case Calendar.HOUR_OF_DAY:	            result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;	        case Calendar.MINUTE:	            result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;	        case Calendar.SECOND:	            result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;	            break;	        case Calendar.MILLISECOND:	            break;	        default:	            throw new IllegalArgumentException("The fragment " + fragment + " is not supported");	    }	    return result;	}
static boolean containsTokenWithValue(final Token[] tokens, final Object value) {	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        if (tokens[i].getValue() == value) {	            return true;	        }	    }	    return false;	}
public long getPeriod() {	    return period;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static BigInteger createBigInteger(final String str) {	    if (str == null) {	        return null;	    }	    int pos = 0;	    int radix = 10;	    boolean negate = false;	    if (str.startsWith("-")) {	        negate = true;	        pos = 1;	    }	    if (str.startsWith("0x", pos) || str.startsWith("0x", pos)) {	        radix = 16;	        pos += 2;	    } else if (str.startsWith("#", pos)) {	        radix = 16;	        pos++;	    } else if (str.startsWith("0", pos) && str.length() > pos + 1) {	        radix = 8;	        pos++;	    }	    final BigInteger value = new BigInteger(str.substring(pos), radix);	    return negate ? value.negate() : value;	}
public int capacity() {	    return buffer.length;	}
public boolean isIgnoreEmptyTokens() {	    return ignoreEmptyTokens;	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof MutableInt) {	        return value == ((MutableInt) obj).intValue();	    }	    return false;	}
public static String capitalize(final String str) {	    int strLen;	    if (str == null || (strLen = str.length()) == 0) {	        return str;	    }	    char firstChar = str.charAt(0);	    if (Character.isTitleCase(firstChar)) {	        return str;	    }	    return new StringBuilder(strLen).append(Character.toTitleCase(firstChar)).append(str.substring(1)).toString();	}
public static boolean containsOnly(final CharSequence cs, final String validChars) {	    if (cs == null || validChars == null) {	        return false;	    }	    return containsOnly(cs, validChars.toCharArray());	}
private static boolean isAssignable(final Type type, final TypeVariable<?> toTypeVariable, final Map<TypeVariable<?>, Type> typeVarAssigns) {	    if (type == null) {	        return true;	    }	    if (toTypeVariable == null) {	        return false;	    }	    if (toTypeVariable.equals(type)) {	        return true;	    }	    if (type instanceof TypeVariable<?>) {	        final Type[] bounds = getImplicitBounds((TypeVariable<?>) type);	        for (final Type bound : bounds) {	            if (isAssignable(bound, toTypeVariable, typeVarAssigns)) {	                return true;	            }	        }	    }	    if (type instanceof Class<?> || type instanceof ParameterizedType || type instanceof GenericArrayType || type instanceof WildcardType) {	        return false;	    }	    throw new IllegalStateException("found an unhandled type: " + type);	}
public boolean isEmpty() {	    return size == 0;	}
@Override	public StringBuffer format(final Calendar calendar, final StringBuffer buf) {	    return printer.format(calendar, buf);	}
public static Date addWeeks(final Date date, final int amount) {	    return add(date, Calendar.WEEK_OF_YEAR, amount);	}
public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {	    final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));	    values = ArrayUtils.clone(Validate.notNull(values));	    ArrayUtils.reverse(values);	    for (final E constant : enumClass.getEnumConstants()) {	        final int block = constant.ordinal() / Long.SIZE;	        if (block < values.length && (values[block] & 1 << (constant.ordinal() % Long.SIZE)) != 0) {	            results.add(constant);	        }	    }	    return results;	}
static Throwable checkedException(final Throwable ex) {	    if (ex != null && !(ex instanceof RuntimeException) && !(ex instanceof Error)) {	        return ex;	    } else {	        throw new IllegalArgumentException("Not a checked exception: " + ex);	    }	}
public static char binaryToHexDigit(final boolean[] src, final int srcPos) {	    if (src.length == 0) {	        throw new IllegalArgumentException("Cannot convert an empty array.");	    }	    if (src.length > srcPos + 3 && src[srcPos + 3]) {	        if (src.length > srcPos + 2 && src[srcPos + 2]) {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'f';	                } else {	                    return 'e';	                }	            } else {	                if (src[srcPos]) {	                    return 'd';	                } else {	                    return 'c';	                }	            }	        } else {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'b';	                } else {	                    return 'a';	                }	            } else {	                if (src[srcPos]) {	                    return '9';	                } else {	                    return '8';	                }	            }	        }	    } else {	        if (src.length > srcPos + 2 && src[srcPos + 2]) {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return '7';	                } else {	                    return '6';	                }	            } else {	                if (src[srcPos]) {	                    return '5';	                } else {	                    return '4';	                }	            }	        } else {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return '3';	                } else {	                    return '2';	                }	            } else {	                if (src[srcPos]) {	                    return '1';	                } else {	                    return '0';	                }	            }	        }	    }	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static List<Locale> countriesByLanguage(final String languageCode) {	    if (languageCode == null) {	        return Collections.emptyList();	    }	    List<Locale> countries = cCountriesByLanguage.get(languageCode);	    if (countries == null) {	        countries = new ArrayList<Locale>();	        final List<Locale> locales = availableLocaleList();	        for (int i = 0; i < locales.size(); i++) {	            final Locale locale = locales.get(i);	            if (languageCode.equals(locale.getLanguage()) && locale.getCountry().length() != 0 && locale.getVariant().isEmpty()) {	                countries.add(locale);	            }	        }	        countries = Collections.unmodifiableList(countries);	        cCountriesByLanguage.putIfAbsent(languageCode, countries);	        countries = cCountriesByLanguage.get(languageCode);	    }	    return countries;	}
public String getNewLineText() {	    return newLine;	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
protected boolean isDefaultFullDetail() {	    return defaultFullDetail;	}
protected void setSizeStartText(String sizeStartText) {	    if (sizeStartText == null) {	        sizeStartText = "";	    }	    this.sizeStartText = sizeStartText;	}
public static float min(final float a, final float b, final float c) {	    return Math.min(Math.min(a, b), c);	}
@Override	public TimeZone getTimeZone() {	    return printer.getTimeZone();	}
static Token[] lexx(final String format) {	    final char[] array = format.toCharArray();	    final ArrayList<Token> list = new ArrayList<Token>(array.length);	    boolean inLiteral = false;	    StringBuilder buffer = null;	    Token previous = null;	    final int sz = array.length;	    for (int i = 0; i < sz; i++) {	        final char ch = array[i];	        if (inLiteral && ch != '\'') {	            buffer.append(ch);	            continue;	        }	        Object value = null;	        switch(ch) {	            case '\'':	                if (inLiteral) {	                    buffer = null;	                    inLiteral = false;	                } else {	                    buffer = new StringBuilder();	                    list.add(new Token(buffer));	                    inLiteral = true;	                }	                break;	            case 'y':	                value = y;	                break;	            case 'M':	                value = M;	                break;	            case 'd':	                value = d;	                break;	            case 'H':	                value = H;	                break;	            case 'm':	                value = m;	                break;	            case 's':	                value = s;	                break;	            case 'S':	                value = S;	                break;	            default:	                if (buffer == null) {	                    buffer = new StringBuilder();	                    list.add(new Token(buffer));	                }	                buffer.append(ch);	        }	        if (value != null) {	            if (previous != null && previous.getValue() == value) {	                previous.increment();	            } else {	                final Token token = new Token(value);	                list.add(token);	                previous = token;	            }	            buffer = null;	        }	    }	    return list.toArray(new Token[list.size()]);	}
public static UUID byteArrayToUuid(final byte[] src, final int srcPos) {	    if (src.length - srcPos < 16) {	        throw new IllegalArgumentException("Need at least 16 bytes for UUID");	    }	    return new UUID(byteArrayToLong(src, srcPos, 0, 0, 8), byteArrayToLong(src, srcPos + 8, 0, 0, 8));	}
public static boolean[] hexDigitToBinary(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return new boolean[] { false, false, false, false };	        case '1':	            return new boolean[] { true, false, false, false };	        case '2':	            return new boolean[] { false, true, false, false };	        case '3':	            return new boolean[] { true, true, false, false };	        case '4':	            return new boolean[] { false, false, true, false };	        case '5':	            return new boolean[] { true, false, true, false };	        case '6':	            return new boolean[] { false, true, true, false };	        case '7':	            return new boolean[] { true, true, true, false };	        case '8':	            return new boolean[] { false, false, false, true };	        case '9':	            return new boolean[] { true, false, false, true };	        case 'a':	        case 'A':	            return new boolean[] { false, true, false, true };	        case 'b':	        case 'B':	            return new boolean[] { true, true, false, true };	        case 'c':	        case 'C':	            return new boolean[] { false, false, true, true };	        case 'd':	        case 'D':	            return new boolean[] { true, false, true, true };	        case 'e':	        case 'E':	            return new boolean[] { false, true, true, true };	        case 'f':	        case 'F':	            return new boolean[] { true, true, true, true };	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public boolean isEquals() {	    return this.isEquals;	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static String defaultString(final String str, final String defaultStr) {	    return str == null ? defaultStr : str;	}
public int size() {	    return size;	}
public static void writeStaticField(final Class<?> cls, final String fieldName, final Object value, final boolean forceAccess) throws IllegalAccessException {	    final Field field = getField(cls, fieldName, forceAccess);	    if (field == null) {	        throw new IllegalArgumentException("Cannot locate field " + fieldName + " on " + cls);	    }	    writeStaticField(field, value);	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
public static <T extends CharSequence> T validIndex(final T chars, final int index) {	    return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, Integer.valueOf(index));	}
public String getNullText() {	    return nullText;	}
@Override	public void mark(final int readAheadLimit) {	    mark = pos;	}
@Override	public Short getValue() {	    return Short.valueOf(this.value);	}
@Override	public int compare(final Object obj1, final Object obj2) {	    return ((Comparable) obj1).compareTo(obj2);	}
public static boolean containsNone(final CharSequence cs, final String invalidChars) {	    if (cs == null || invalidChars == null) {	        return true;	    }	    return containsNone(cs, invalidChars.toCharArray());	}
public int size() {	    return size;	}
public int set(final int holder) {	    return holder | _mask;	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
protected String getContentEnd() {	    return contentEnd;	}
public String getNullText() {	    return nullText;	}
public static Boolean or(final Boolean... array) {	    if (array == null) {	        throw new IllegalArgumentException("The Array must not be null");	    }	    if (array.length == 0) {	        throw new IllegalArgumentException("Array is empty");	    }	    try {	        final boolean[] primitive = ArrayUtils.toPrimitive(array);	        return or(primitive) ? Boolean.TRUE : Boolean.FALSE;	    } catch (final NullPointerException ex) {	        throw new IllegalArgumentException("The array must not contain any null elements");	    }	}
public int size() {	    return size;	}
public static String defaultString(final String str, final String defaultStr) {	    return str == null ? defaultStr : str;	}
public Fraction negate() {	    if (numerator == Integer.MIN_VALUE) {	        throw new ArithmeticException("overflow: too large to negate");	    }	    return new Fraction(-numerator, denominator);	}
public static boolean isWhitespace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isWhitespace(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
public static <T extends CharSequence> T validIndex(final T chars, final int index) {	    return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, Integer.valueOf(index));	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static String capitalize(final String str) {	    int strLen;	    if (str == null || (strLen = str.length()) == 0) {	        return str;	    }	    char firstChar = str.charAt(0);	    if (Character.isTitleCase(firstChar)) {	        return str;	    }	    return new StringBuilder(strLen).append(Character.toTitleCase(firstChar)).append(str.substring(1)).toString();	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public int capacity() {	    return buffer.length;	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public static String stripEnd(final String str, final String stripChars) {	    int end;	    if (str == null || (end = str.length()) == 0) {	        return str;	    }	    if (stripChars == null) {	        while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {	            end--;	        }	    } else if (stripChars.isEmpty()) {	        return str;	    } else {	        while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND) {	            end--;	        }	    }	    return str.substring(0, end);	}
protected String getArrayEnd() {	    return arrayEnd;	}
protected String getArraySeparator() {	    return arraySeparator;	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
public static boolean[] hexDigitMsb0ToBinary(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return new boolean[] { false, false, false, false };	        case '1':	            return new boolean[] { false, false, false, true };	        case '2':	            return new boolean[] { false, false, true, false };	        case '3':	            return new boolean[] { false, false, true, true };	        case '4':	            return new boolean[] { false, true, false, false };	        case '5':	            return new boolean[] { false, true, false, true };	        case '6':	            return new boolean[] { false, true, true, false };	        case '7':	            return new boolean[] { false, true, true, true };	        case '8':	            return new boolean[] { true, false, false, false };	        case '9':	            return new boolean[] { true, false, false, true };	        case 'a':	        case 'A':	            return new boolean[] { true, false, true, false };	        case 'b':	        case 'B':	            return new boolean[] { true, false, true, true };	        case 'c':	        case 'C':	            return new boolean[] { true, true, false, false };	        case 'd':	        case 'D':	            return new boolean[] { true, true, false, true };	        case 'e':	        case 'E':	            return new boolean[] { true, true, true, false };	        case 'f':	        case 'F':	            return new boolean[] { true, true, true, true };	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
public static <T> T initialize(final ConcurrentInitializer<T> initializer) throws ConcurrentException {	    return initializer != null ? initializer.get() : null;	}
public boolean isFalse() {	    return value == false;	}
public static float max(final float a, final float b, final float c) {	    return Math.max(Math.max(a, b), c);	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
public static String[] splitPreserveAllTokens(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, true);	}
public String getNewLineText() {	    return newLine;	}
public static String lowerCase(final String str, final Locale locale) {	    if (str == null) {	        return null;	    }	    return str.toLowerCase(locale);	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
@Override	public Object getFirstContextValue(final String label) {	    return this.exceptionContext.getFirstContextValue(label);	}
public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {	    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {	        return false;	    }	    return true;	}
public StrTokenizer setDelimiterMatcher(final StrMatcher delim) {	    if (delim == null) {	        this.delimMatcher = StrMatcher.noneMatcher();	    } else {	        this.delimMatcher = delim;	    }	    return this;	}
public static int lastIndexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = INDEX_NOT_FOUND;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.lastIndexOf(str, search, str.length());	        if (tmp > ret) {	            ret = tmp;	        }	    }	    return ret;	}
public static boolean endsWithIgnoreCase(final CharSequence str, final CharSequence suffix) {	    return endsWith(str, suffix, true);	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
public static boolean isSameDay(final Calendar cal1, final Calendar cal2) {	    if (cal1 == null || cal2 == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));	}
@Override	public void reset() {	    pos = mark;	}
public static <T extends CharSequence> T notEmpty(final T chars) {	    return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);	}
@Override	protected MultiBackgroundInitializerResults initialize() throws Exception {	    Map<String, BackgroundInitializer<?>> inits;	    synchronized (this) {	        inits = new HashMap<String, BackgroundInitializer<?>>(childInitializers);	    }	    final ExecutorService exec = getActiveExecutor();	    for (final BackgroundInitializer<?> bi : inits.values()) {	        if (bi.getExternalExecutor() == null) {	            bi.setExternalExecutor(exec);	        }	        bi.start();	    }	    final Map<String, Object> results = new HashMap<String, Object>();	    final Map<String, ConcurrentException> excepts = new HashMap<String, ConcurrentException>();	    for (final Map.Entry<String, BackgroundInitializer<?>> e : inits.entrySet()) {	        try {	            results.put(e.getKey(), e.getValue().get());	        } catch (final ConcurrentException cex) {	            excepts.put(e.getKey(), cex);	        }	    }	    return new MultiBackgroundInitializerResults(inits, results, excepts);	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
@Override	public int length() {	    return size;	}
public static Object invokeExactMethod(final Object object, final String methodName, Object[] args, Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {	    if (args == null) {	        args = ArrayUtils.EMPTY_OBJECT_ARRAY;	    }	    if (parameterTypes == null) {	        parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;	    }	    final Method method = getAccessibleMethod(object.getClass(), methodName, parameterTypes);	    if (method == null) {	        throw new NoSuchMethodException("No such accessible method: " + methodName + "() on object: " + object.getClass().getName());	    }	    return method.invoke(object, args);	}
public int capacity() {	    return buffer.length;	}
static boolean isJavaVersionMatch(final String version, final String versionPrefix) {	    if (version == null) {	        return false;	    }	    return version.startsWith(versionPrefix);	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
public static String replaceOnce(final String text, final String searchString, final String replacement) {	    return replace(text, searchString, replacement, 1);	}
private static Object add(final Object array, final int index, final Object element, final Class<?> clss) {	    if (array == null) {	        if (index != 0) {	            throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");	        }	        final Object joinedArray = Array.newInstance(clss, 1);	        Array.set(joinedArray, 0, element);	        return joinedArray;	    }	    final int length = Array.getLength(array);	    if (index > length || index < 0) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(clss, length + 1);	    System.arraycopy(array, 0, result, 0, index);	    Array.set(result, index, element);	    if (index < length) {	        System.arraycopy(array, index, result, index + 1, length - index);	    }	    return result;	}
public StrBuilder trim() {	    if (size == 0) {	        return this;	    }	    int len = size;	    final char[] buf = buffer;	    int pos = 0;	    while (pos < len && buf[pos] <= ' ') {	        pos++;	    }	    while (pos < len && buf[len - 1] <= ' ') {	        len--;	    }	    if (len < size) {	        delete(len, size);	    }	    if (pos > 0) {	        delete(0, pos);	    }	    return this;	}
protected String getArraySeparator() {	    return arraySeparator;	}
public int toHashCode() {	    return iTotal;	}
public int capacity() {	    return buffer.length;	}
@Override	public boolean equals(final Object obj) {	    if (this == obj) {	        return true;	    }	    if (!(obj instanceof ConstantInitializer<?>)) {	        return false;	    }	    final ConstantInitializer<?> c = (ConstantInitializer<?>) obj;	    return ObjectUtils.equals(getObject(), c.getObject());	}
public boolean isEmpty() {	    return size == 0;	}
public static FastDateFormat getTimeInstance(final int style, final TimeZone timeZone, final Locale locale) {	    return cache.getTimeInstance(style, timeZone, locale);	}
@Override	public TimeZone getTimeZone() {	    return mTimeZone;	}
public static boolean contains(final boolean[] array, final boolean valueToFind) {	    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;	}
@Override	public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) {	    return formatter.format(obj, toAppendTo, pos);	}
public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] result = new boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        final Boolean b = array[i];	        result[i] = (b == null ? valueForNull : b.booleanValue());	    }	    return result;	}
public static String[] stripAll(final String[] strs, final String stripChars) {	    int strsLen;	    if (strs == null || (strsLen = strs.length) == 0) {	        return strs;	    }	    final String[] newArr = new String[strsLen];	    for (int i = 0; i < strsLen; i++) {	        newArr[i] = strip(strs[i], stripChars);	    }	    return newArr;	}
protected int getTaskCount() {	    return 1;	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static String formatDurationISO(final long durationMillis) {	    return formatDuration(durationMillis, ISO_EXTENDED_FORMAT_PATTERN, false);	}
public StrTokenizer setEmptyTokenAsNull(final boolean emptyAsNull) {	    this.emptyAsNull = emptyAsNull;	    return this;	}
public static String replaceChars(final String str, final String searchChars, String replaceChars) {	    if (isEmpty(str) || isEmpty(searchChars)) {	        return str;	    }	    if (replaceChars == null) {	        replaceChars = EMPTY;	    }	    boolean modified = false;	    final int replaceCharsLength = replaceChars.length();	    final int strLength = str.length();	    final StringBuilder buf = new StringBuilder(strLength);	    for (int i = 0; i < strLength; i++) {	        final char ch = str.charAt(i);	        final int index = searchChars.indexOf(ch);	        if (index >= 0) {	            modified = true;	            if (index < replaceCharsLength) {	                buf.append(replaceChars.charAt(index));	            }	        } else {	            buf.append(ch);	        }	    }	    if (modified) {	        return buf.toString();	    }	    return str;	}
public static String toString(final boolean bool, final String trueString, final String falseString) {	    return bool ? trueString : falseString;	}
public static Fraction getFraction(String str) {	    if (str == null) {	        throw new IllegalArgumentException("The string must not be null");	    }	    int pos = str.indexOf('.');	    if (pos >= 0) {	        return getFraction(Double.parseDouble(str));	    }	    pos = str.indexOf(' ');	    if (pos > 0) {	        final int whole = Integer.parseInt(str.substring(0, pos));	        str = str.substring(pos + 1);	        pos = str.indexOf('/');	        if (pos < 0) {	            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");	        } else {	            final int numer = Integer.parseInt(str.substring(0, pos));	            final int denom = Integer.parseInt(str.substring(pos + 1));	            return getFraction(whole, numer, denom);	        }	    }	    pos = str.indexOf('/');	    if (pos < 0) {	        return getFraction(Integer.parseInt(str), 1);	    } else {	        final int numer = Integer.parseInt(str.substring(0, pos));	        final int denom = Integer.parseInt(str.substring(pos + 1));	        return getFraction(numer, denom);	    }	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
@Override	public boolean equals(final Object obj) {	    if (obj == this) {	        return true;	    }	    if (obj == null) {	        return false;	    }	    if (!super.equals(obj)) {	        return false;	    }	    if (ObjectUtils.notEqual(getClass(), obj.getClass())) {	        return false;	    }	    final ExtendedMessageFormat rhs = (ExtendedMessageFormat) obj;	    if (ObjectUtils.notEqual(toPattern, rhs.toPattern)) {	        return false;	    }	    if (ObjectUtils.notEqual(registry, rhs.registry)) {	        return false;	    }	    return true;	}
public int capacity() {	    return buffer.length;	}
public static Boolean[] nullToEmpty(final Boolean[] array) {	    if (array == null || array.length == 0) {	        return EMPTY_BOOLEAN_OBJECT_ARRAY;	    }	    return array;	}
public String getNullText() {	    return nullText;	}
public static String substringAfterLast(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (isEmpty(separator)) {	        return EMPTY;	    }	    final int pos = str.lastIndexOf(separator);	    if (pos == INDEX_NOT_FOUND || pos == str.length() - separator.length()) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
public static String prependIfMissingIgnoreCase(final String str, final CharSequence prefix, final CharSequence... prefixes) {	    return prependIfMissing(str, prefix, true, prefixes);	}
public static boolean isWhitespace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isWhitespace(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
@Override	public List<Object> getContextValues(final String label) {	    return this.exceptionContext.getContextValues(label);	}
public static String[] splitPreserveAllTokens(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, true);	}
static String getTimeZoneDisplay(final TimeZone tz, final boolean daylight, final int style, final Locale locale) {	    final TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);	    String value = cTimeZoneDisplayCache.get(key);	    if (value == null) {	        value = tz.getDisplayName(daylight, style, locale);	        final String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);	        if (prior != null) {	            value = prior;	        }	    }	    return value;	}
@Override	public TimeZone getTimeZone() {	    return printer.getTimeZone();	}
public static int lastIndexOfIgnoreCase(final CharSequence str, final CharSequence searchStr, int startPos) {	    if (str == null || searchStr == null) {	        return INDEX_NOT_FOUND;	    }	    if (startPos > str.length() - searchStr.length()) {	        startPos = str.length() - searchStr.length();	    }	    if (startPos < 0) {	        return INDEX_NOT_FOUND;	    }	    if (searchStr.length() == 0) {	        return startPos;	    }	    for (int i = startPos; i >= 0; i--) {	        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
static String format(final Token[] tokens, final int years, final int months, final int days, final int hours, final int minutes, final int seconds, int milliseconds, final boolean padWithZeros) {	    final StringBuilder buffer = new StringBuilder();	    boolean lastOutputSeconds = false;	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        final Token token = tokens[i];	        final Object value = token.getValue();	        final int count = token.getCount();	        if (value instanceof StringBuilder) {	            buffer.append(value.toString());	        } else {	            if (value == y) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer.toString(years));	                lastOutputSeconds = false;	            } else if (value == M) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer.toString(months));	                lastOutputSeconds = false;	            } else if (value == d) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer.toString(days));	                lastOutputSeconds = false;	            } else if (value == H) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer.toString(hours));	                lastOutputSeconds = false;	            } else if (value == m) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer.toString(minutes));	                lastOutputSeconds = false;	            } else if (value == s) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer.toString(seconds));	                lastOutputSeconds = true;	            } else if (value == S) {	                if (lastOutputSeconds) {	                    milliseconds += 1000;	                    final String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds);	                    buffer.append(str.substring(1));	                } else {	                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds));	                }	                lastOutputSeconds = false;	            }	        }	    }	    return buffer.toString();	}
@Override	public short shortValue() {	    return value;	}
public static boolean isAlphanumeric(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetterOrDigit(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static boolean isAsciiPrintable(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (CharUtils.isAsciiPrintable(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public EqualsBuilder appendSuper(final boolean superEquals) {	    if (isEquals == false) {	        return this;	    }	    isEquals = superEquals;	    return this;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static int getLevenshteinDistance(CharSequence s, CharSequence t, final int threshold) {	    if (s == null || t == null) {	        throw new IllegalArgumentException("Strings must not be null");	    }	    if (threshold < 0) {	        throw new IllegalArgumentException("Threshold must not be negative");	    }	    int n = s.length();	    int m = t.length();	    if (n == 0) {	        return m <= threshold ? m : -1;	    } else if (m == 0) {	        return n <= threshold ? n : -1;	    }	    if (n > m) {	        final CharSequence tmp = s;	        s = t;	        t = tmp;	        n = m;	        m = t.length();	    }	    int[] p = new int[n + 1];	    int[] d = new int[n + 1];	    int[] _d;	    final int boundary = Math.min(n, threshold) + 1;	    for (int i = 0; i < boundary; i++) {	        p[i] = i;	    }	    Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);	    Arrays.fill(d, Integer.MAX_VALUE);	    for (int j = 1; j <= m; j++) {	        final char t_j = t.charAt(j - 1);	        d[0] = j;	        final int min = Math.max(1, j - threshold);	        final int max = Math.min(n, j + threshold);	        if (min > max) {	            return -1;	        }	        if (min > 1) {	            d[min - 1] = Integer.MAX_VALUE;	        }	        for (int i = min; i <= max; i++) {	            if (s.charAt(i - 1) == t_j) {	                d[i] = p[i - 1];	            } else {	                d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);	            }	        }	        _d = p;	        p = d;	        d = _d;	    }	    if (p[n] <= threshold) {	        return p[n];	    }	    return -1;	}
public boolean contains(final StrMatcher matcher) {	    return indexOf(matcher, 0) >= 0;	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
public int size() {	    return size;	}
public static String replaceChars(final String str, final String searchChars, String replaceChars) {	    if (isEmpty(str) || isEmpty(searchChars)) {	        return str;	    }	    if (replaceChars == null) {	        replaceChars = EMPTY;	    }	    boolean modified = false;	    final int replaceCharsLength = replaceChars.length();	    final int strLength = str.length();	    final StringBuilder buf = new StringBuilder(strLength);	    for (int i = 0; i < strLength; i++) {	        final char ch = str.charAt(i);	        final int index = searchChars.indexOf(ch);	        if (index >= 0) {	            modified = true;	            if (index < replaceCharsLength) {	                buf.append(replaceChars.charAt(index));	            }	        } else {	            buf.append(ch);	        }	    }	    if (modified) {	        return buf.toString();	    }	    return str;	}
public boolean isEmptyTokenAsNull() {	    return this.emptyAsNull;	}
public static String leftPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return leftPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return padStr.concat(str);	    } else if (pads < padLen) {	        return padStr.substring(0, pads).concat(str);	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return new String(padding).concat(str);	    }	}
public String getNullText() {	    return nullText;	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static FastDateFormat getDateInstance(final int style, final TimeZone timeZone, final Locale locale) {	    return cache.getDateInstance(style, timeZone, locale);	}
public static FastDateFormat getInstance(final String pattern, final TimeZone timeZone, final Locale locale) {	    return cache.getInstance(pattern, timeZone, locale);	}
public static String formatDurationHMS(final long durationMillis) {	    return formatDuration(durationMillis, "H:mm:ss.SSS");	}
public int toComparison() {	    return comparison;	}
public static String uncapitalize(final String str, final char... delimiters) {	    final int delimLen = delimiters == null ? -1 : delimiters.length;	    if (StringUtils.isEmpty(str) || delimLen == 0) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    boolean uncapitalizeNext = true;	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (isDelimiter(ch, delimiters)) {	            uncapitalizeNext = true;	        } else if (uncapitalizeNext) {	            buffer[i] = Character.toLowerCase(ch);	            uncapitalizeNext = false;	        }	    }	    return new String(buffer);	}
public static StrTokenizer getCSVInstance(final char[] input) {	    final StrTokenizer tok = getCSVClone();	    tok.reset(input);	    return tok;	}
public static String prependIfMissingIgnoreCase(final String str, final CharSequence prefix, final CharSequence... prefixes) {	    return prependIfMissing(str, prefix, true, prefixes);	}
public int size() {	    return size;	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public int capacity() {	    return buffer.length;	}
@Override	public int hashCode() {	    return toHashCode();	}
protected String getSizeEndText() {	    return sizeEndText;	}
public static boolean isAsciiPrintable(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (CharUtils.isAsciiPrintable(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
protected boolean isFieldSeparatorAtStart() {	    return fieldSeparatorAtStart;	}
public static <T extends CharSequence> T defaultIfBlank(final T str, final T defaultStr) {	    return StringUtils.isBlank(str) ? defaultStr : str;	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
public static int getLevenshteinDistance(CharSequence s, CharSequence t, final int threshold) {	    if (s == null || t == null) {	        throw new IllegalArgumentException("Strings must not be null");	    }	    if (threshold < 0) {	        throw new IllegalArgumentException("Threshold must not be negative");	    }	    int n = s.length();	    int m = t.length();	    if (n == 0) {	        return m <= threshold ? m : -1;	    } else if (m == 0) {	        return n <= threshold ? n : -1;	    }	    if (n > m) {	        final CharSequence tmp = s;	        s = t;	        t = tmp;	        n = m;	        m = t.length();	    }	    int[] p = new int[n + 1];	    int[] d = new int[n + 1];	    int[] _d;	    final int boundary = Math.min(n, threshold) + 1;	    for (int i = 0; i < boundary; i++) {	        p[i] = i;	    }	    Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);	    Arrays.fill(d, Integer.MAX_VALUE);	    for (int j = 1; j <= m; j++) {	        final char t_j = t.charAt(j - 1);	        d[0] = j;	        final int min = Math.max(1, j - threshold);	        final int max = Math.min(n, j + threshold);	        if (min > max) {	            return -1;	        }	        if (min > 1) {	            d[min - 1] = Integer.MAX_VALUE;	        }	        for (int i = min; i <= max; i++) {	            if (s.charAt(i - 1) == t_j) {	                d[i] = p[i - 1];	            } else {	                d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);	            }	        }	        _d = p;	        p = d;	        d = _d;	    }	    if (p[n] <= threshold) {	        return p[n];	    }	    return -1;	}
public static String leftPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return leftPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return padStr.concat(str);	    } else if (pads < padLen) {	        return padStr.substring(0, pads).concat(str);	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return new String(padding).concat(str);	    }	}
public boolean isEmpty() {	    return size == 0;	}
public static boolean[] byteToBinary(final byte src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {	    if (0 == nBools) {	        return dst;	    }	    if (nBools - 1 + srcPos >= 8) {	        throw new IllegalArgumentException("nBools-1+srcPos is greather or equal to than 8");	    }	    int shift = 0;	    for (int i = 0; i < nBools; i++) {	        shift = i * 1 + srcPos;	        dst[dstPos + i] = ((0x1 & (src >> shift)) != 0);	    }	    return dst;	}
public static long getFragmentInMinutes(final Calendar calendar, final int fragment) {	    return getFragment(calendar, fragment, Calendar.MINUTE);	}
protected void setFieldSeparator(String fieldSeparator) {	    if (fieldSeparator == null) {	        fieldSeparator = "";	    }	    this.fieldSeparator = fieldSeparator;	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public String getNullText() {	    return nullText;	}
public boolean isEmptyTokenAsNull() {	    return this.emptyAsNull;	}
@Override	public boolean equals(final Object obj2) {	    if (obj2 instanceof Token) {	        final Token tok2 = (Token) obj2;	        if (this.value.getClass() != tok2.value.getClass()) {	            return false;	        }	        if (this.count != tok2.count) {	            return false;	        }	        if (this.value instanceof StringBuilder) {	            return this.value.toString().equals(tok2.value.toString());	        } else if (this.value instanceof Number) {	            return this.value.equals(tok2.value);	        } else {	            return this.value == tok2.value;	        }	    }	    return false;	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public void start() {	    if (this.runningState == STATE_STOPPED) {	        throw new IllegalStateException("Stopwatch must be reset before being restarted. ");	    }	    if (this.runningState != STATE_UNSTARTED) {	        throw new IllegalStateException("Stopwatch already started. ");	    }	    this.startTime = System.nanoTime();	    this.startTimeMillis = System.currentTimeMillis();	    this.runningState = STATE_RUNNING;	}
protected boolean isUseShortClassName() {	    return useShortClassName;	}
@Override	public Integer build() {	    return Integer.valueOf(toHashCode());	}
public static String substringBefore(final String str, final String separator) {	    if (isEmpty(str) || separator == null) {	        return str;	    }	    if (separator.isEmpty()) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
public static boolean isAllLowerCase(final CharSequence cs) {	    if (cs == null || isEmpty(cs)) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLowerCase(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
private static String replaceEach(final String text, final String[] searchList, final String[] replacementList, final boolean repeat, final int timeToLive) {	    if (text == null || text.isEmpty() || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {	        return text;	    }	    if (timeToLive < 0) {	        throw new IllegalStateException("Aborting to protect against StackOverflowError - " + "output of one loop is the input of another");	    }	    final int searchLength = searchList.length;	    final int replacementLength = replacementList.length;	    if (searchLength != replacementLength) {	        throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs " + replacementLength);	    }	    final boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];	    int textIndex = -1;	    int replaceIndex = -1;	    int tempIndex = -1;	    for (int i = 0; i < searchLength; i++) {	        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {	            continue;	        }	        tempIndex = text.indexOf(searchList[i]);	        if (tempIndex == -1) {	            noMoreMatchesForReplIndex[i] = true;	        } else {	            if (textIndex == -1 || tempIndex < textIndex) {	                textIndex = tempIndex;	                replaceIndex = i;	            }	        }	    }	    if (textIndex == -1) {	        return text;	    }	    int start = 0;	    int increase = 0;	    for (int i = 0; i < searchList.length; i++) {	        if (searchList[i] == null || replacementList[i] == null) {	            continue;	        }	        final int greater = replacementList[i].length() - searchList[i].length();	        if (greater > 0) {	            increase += 3 * greater;	        }	    }	    increase = Math.min(increase, text.length() / 5);	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (textIndex != -1) {	        for (int i = start; i < textIndex; i++) {	            buf.append(text.charAt(i));	        }	        buf.append(replacementList[replaceIndex]);	        start = textIndex + searchList[replaceIndex].length();	        textIndex = -1;	        replaceIndex = -1;	        tempIndex = -1;	        for (int i = 0; i < searchLength; i++) {	            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {	                continue;	            }	            tempIndex = text.indexOf(searchList[i], start);	            if (tempIndex == -1) {	                noMoreMatchesForReplIndex[i] = true;	            } else {	                if (textIndex == -1 || tempIndex < textIndex) {	                    textIndex = tempIndex;	                    replaceIndex = i;	                }	            }	        }	    }	    final int textLength = text.length();	    for (int i = start; i < textLength; i++) {	        buf.append(text.charAt(i));	    }	    final String result = buf.toString();	    if (!repeat) {	        return result;	    }	    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);	}
public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, 1);	}
public BackgroundInitializer<?> getInitializer(final String name) {	    return checkName(name);	}
public char getStart() {	    return this.start;	}
public static ConcurrentException extractCause(final ExecutionException ex) {	    if (ex == null || ex.getCause() == null) {	        return null;	    }	    throwCause(ex);	    return new ConcurrentException(ex.getMessage(), ex.getCause());	}
public static Class<?> getRawType(final Type type, final Type assigningType) {	    if (type instanceof Class<?>) {	        return (Class<?>) type;	    }	    if (type instanceof ParameterizedType) {	        return getRawType((ParameterizedType) type);	    }	    if (type instanceof TypeVariable<?>) {	        if (assigningType == null) {	            return null;	        }	        final Object genericDeclaration = ((TypeVariable<?>) type).getGenericDeclaration();	        if (!(genericDeclaration instanceof Class<?>)) {	            return null;	        }	        final Map<TypeVariable<?>, Type> typeVarAssigns = getTypeArguments(assigningType, (Class<?>) genericDeclaration);	        if (typeVarAssigns == null) {	            return null;	        }	        final Type typeArgument = typeVarAssigns.get(type);	        if (typeArgument == null) {	            return null;	        }	        return getRawType(typeArgument, assigningType);	    }	    if (type instanceof GenericArrayType) {	        final Class<?> rawComponentType = getRawType(((GenericArrayType) type).getGenericComponentType(), assigningType);	        return Array.newInstance(rawComponentType, 0).getClass();	    }	    if (type instanceof WildcardType) {	        return null;	    }	    throw new IllegalArgumentException("unknown type: " + type);	}
@Override	public String toString() {	    return String.valueOf(value);	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public String replace(final Object source) {	    if (source == null) {	        return null;	    }	    final StrBuilder buf = new StrBuilder().append(source);	    substitute(buf, 0, buf.length());	    return buf.toString();	}
public void start() {	    if (this.runningState == STATE_STOPPED) {	        throw new IllegalStateException("Stopwatch must be reset before being restarted. ");	    }	    if (this.runningState != STATE_UNSTARTED) {	        throw new IllegalStateException("Stopwatch already started. ");	    }	    this.startTime = System.nanoTime();	    this.startTimeMillis = System.currentTimeMillis();	    this.runningState = STATE_RUNNING;	}
public int size() {	    return size;	}
public static <K, V> V putIfAbsent(final ConcurrentMap<K, V> map, final K key, final V value) {	    if (map == null) {	        return null;	    }	    final V result = map.putIfAbsent(key, value);	    return result != null ? result : value;	}
public static String substringAfterLast(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (isEmpty(separator)) {	        return EMPTY;	    }	    final int pos = str.lastIndexOf(separator);	    if (pos == INDEX_NOT_FOUND || pos == str.length() - separator.length()) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
public static long shortArrayToLong(final short[] src, final int srcPos, final long dstInit, final int dstPos, final int nShorts) {	    if ((src.length == 0 && srcPos == 0) || 0 == nShorts) {	        return dstInit;	    }	    if ((nShorts - 1) * 16 + dstPos >= 64) {	        throw new IllegalArgumentException("(nShorts-1)*16+dstPos is greather or equal to than 64");	    }	    long out = dstInit;	    int shift = 0;	    for (int i = 0; i < nShorts; i++) {	        shift = i * 16 + dstPos;	        final long bits = (0xffffL & src[i + srcPos]) << shift;	        final long mask = 0xffffL << shift;	        out = (out & ~mask) | bits;	    }	    return out;	}
public void add(final Number operand) {	    this.value += operand.intValue();	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
@Override	public boolean markSupported() {	    return true;	}
public static String abbreviate(final String str, int offset, final int maxWidth) {	    if (str == null) {	        return null;	    }	    if (maxWidth < 4) {	        throw new IllegalArgumentException("Minimum abbreviation width is 4");	    }	    if (str.length() <= maxWidth) {	        return str;	    }	    if (offset > str.length()) {	        offset = str.length();	    }	    if (str.length() - offset < maxWidth - 3) {	        offset = str.length() - (maxWidth - 3);	    }	    final String abrevMarker = "...";	    if (offset <= 4) {	        return str.substring(0, maxWidth - 3) + abrevMarker;	    }	    if (maxWidth < 7) {	        throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");	    }	    if (offset + maxWidth - 3 < str.length()) {	        return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);	    }	    return abrevMarker + str.substring(str.length() - (maxWidth - 3));	}
public static String stripAccents(final String input) {	    if (input == null) {	        return null;	    }	    final Pattern pattern = Pattern.compile("\\p{InCombiningDiacriticalMarks}+");	    final String decomposed = Normalizer.normalize(input, Normalizer.Form.NFD);	    return pattern.matcher(decomposed).replaceAll("");	}
public static String[] splitPreserveAllTokens(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, true);	}
public String getNullText() {	    return nullText;	}
public static Formatter append(final CharSequence seq, final Formatter formatter, final int flags, final int width, final int precision, final char padChar, final CharSequence ellipsis) {	    Validate.isTrue(ellipsis == null || precision < 0 || ellipsis.length() <= precision, "Specified ellipsis '%1$s' exceeds precision of %2$s", ellipsis, Integer.valueOf(precision));	    final StringBuilder buf = new StringBuilder(seq);	    if (precision >= 0 && precision < seq.length()) {	        final CharSequence _ellipsis = ObjectUtils.defaultIfNull(ellipsis, StringUtils.EMPTY);	        buf.replace(precision - _ellipsis.length(), seq.length(), _ellipsis.toString());	    }	    final boolean leftJustify = (flags & LEFT_JUSTIFY) == LEFT_JUSTIFY;	    for (int i = buf.length(); i < width; i++) {	        buf.insert(leftJustify ? i : 0, padChar);	    }	    formatter.format(buf.toString());	    return formatter;	}
public abstract boolean translate(int codepoint, Writer out) throws IOException;
public static Date setMilliseconds(final Date date, final int amount) {	    return set(date, Calendar.MILLISECOND, amount);	}
public static int lastIndexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = INDEX_NOT_FOUND;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.lastIndexOf(str, search, str.length());	        if (tmp > ret) {	            ret = tmp;	        }	    }	    return ret;	}
static Token[] lexx(final String format) {	    final char[] array = format.toCharArray();	    final ArrayList<Token> list = new ArrayList<Token>(array.length);	    boolean inLiteral = false;	    StringBuilder buffer = null;	    Token previous = null;	    final int sz = array.length;	    for (int i = 0; i < sz; i++) {	        final char ch = array[i];	        if (inLiteral && ch != '\'') {	            buffer.append(ch);	            continue;	        }	        Object value = null;	        switch(ch) {	            case '\'':	                if (inLiteral) {	                    buffer = null;	                    inLiteral = false;	                } else {	                    buffer = new StringBuilder();	                    list.add(new Token(buffer));	                    inLiteral = true;	                }	                break;	            case 'y':	                value = y;	                break;	            case 'M':	                value = M;	                break;	            case 'd':	                value = d;	                break;	            case 'H':	                value = H;	                break;	            case 'm':	                value = m;	                break;	            case 's':	                value = s;	                break;	            case 'S':	                value = S;	                break;	            default:	                if (buffer == null) {	                    buffer = new StringBuilder();	                    list.add(new Token(buffer));	                }	                buffer.append(ch);	        }	        if (value != null) {	            if (previous != null && previous.getValue() == value) {	                previous.increment();	            } else {	                final Token token = new Token(value);	                list.add(token);	                previous = token;	            }	            buffer = null;	        }	    }	    return list.toArray(new Token[list.size()]);	}
public static String random(final int count, final char... chars) {	    if (chars == null) {	        return random(count, 0, 0, false, false, null, RANDOM);	    }	    return random(count, 0, chars.length, false, false, chars, RANDOM);	}
public int lastIndexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex >= size ? size - 1 : startIndex);	    if (matcher == null || startIndex < 0) {	        return -1;	    }	    final char[] buf = buffer;	    final int endIndex = startIndex + 1;	    for (int i = startIndex; i >= 0; i--) {	        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {	            return i;	        }	    }	    return -1;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public static byte[] uuidToByteArray(final UUID src, final byte[] dst, final int dstPos, final int nBytes) {	    if (0 == nBytes) {	        return dst;	    }	    if (nBytes > 16) {	        throw new IllegalArgumentException("nBytes is greather than 16");	    }	    longToByteArray(src.getMostSignificantBits(), 0, dst, dstPos, nBytes > 8 ? 8 : nBytes);	    if (nBytes >= 8) {	        longToByteArray(src.getLeastSignificantBits(), 0, dst, dstPos + 8, nBytes - 8);	    }	    return dst;	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static String stripToEmpty(final String str) {	    return str == null ? EMPTY : strip(str, null);	}
@Override	public float floatValue() {	    return value;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public String getNewLineText() {	    return newLine;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public boolean contains(final CharRange range) {	    if (range == null) {	        throw new IllegalArgumentException("The Range must not be null");	    }	    if (negated) {	        if (range.negated) {	            return start >= range.start && end <= range.end;	        }	        return range.end < start || range.start > end;	    }	    if (range.negated) {	        return start == 0 && end == Character.MAX_VALUE;	    }	    return start <= range.start && end >= range.end;	}
public abstract boolean translate(int codepoint, Writer out) throws IOException;
public StrBuilder setNewLineText(final String newLine) {	    this.newLine = newLine;	    return this;	}
@Override	public Boolean build() {	    return Boolean.valueOf(isEquals());	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public Fraction invert() {	    if (numerator == 0) {	        throw new ArithmeticException("Unable to invert zero.");	    }	    if (numerator == Integer.MIN_VALUE) {	        throw new ArithmeticException("overflow: can't negate numerator");	    }	    if (numerator < 0) {	        return new Fraction(-denominator, -numerator);	    } else {	        return new Fraction(denominator, numerator);	    }	}
public synchronized boolean isShutdown() {	    return shutdown;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static String mid(final String str, int pos, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0 || pos > str.length()) {	        return EMPTY;	    }	    if (pos < 0) {	        pos = 0;	    }	    if (str.length() <= pos + len) {	        return str.substring(pos);	    }	    return str.substring(pos, pos + len);	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static Boolean[] nullToEmpty(final Boolean[] array) {	    if (array == null || array.length == 0) {	        return EMPTY_BOOLEAN_OBJECT_ARRAY;	    }	    return array;	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
@Override	public String build() {	    return toString();	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public String getNullText() {	    return nullText;	}
public String getNewLineText() {	    return newLine;	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public boolean isIgnoreEmptyTokens() {	    return ignoreEmptyTokens;	}
public static String leftPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return leftPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return padStr.concat(str);	    } else if (pads < padLen) {	        return padStr.substring(0, pads).concat(str);	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return new String(padding).concat(str);	    }	}
public static boolean isAscii(final char ch) {	    return ch < 128;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public StrMatcher getQuoteMatcher() {	    return quoteMatcher;	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public int capacity() {	    return buffer.length;	}
public static CharRange isIn(final char start, final char end) {	    return new CharRange(start, end, false);	}
public static List<Class<?>> getAllSuperclasses(final Class<?> cls) {	    if (cls == null) {	        return null;	    }	    final List<Class<?>> classes = new ArrayList<Class<?>>();	    Class<?> superclass = cls.getSuperclass();	    while (superclass != null) {	        classes.add(superclass);	        superclass = superclass.getSuperclass();	    }	    return classes;	}
public static String substringBetween(final String str, final String open, final String close) {	    if (str == null || open == null || close == null) {	        return null;	    }	    final int start = str.indexOf(open);	    if (start != INDEX_NOT_FOUND) {	        final int end = str.indexOf(close, start + open.length());	        if (end != INDEX_NOT_FOUND) {	            return str.substring(start + open.length(), end);	        }	    }	    return null;	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
@Override	public boolean ready() {	    return pos < StrBuilder.this.size();	}
private static String[] splitByCharacterType(final String str, final boolean camelCase) {	    if (str == null) {	        return null;	    }	    if (str.isEmpty()) {	        return ArrayUtils.EMPTY_STRING_ARRAY;	    }	    final char[] c = str.toCharArray();	    final List<String> list = new ArrayList<String>();	    int tokenStart = 0;	    int currentType = Character.getType(c[tokenStart]);	    for (int pos = tokenStart + 1; pos < c.length; pos++) {	        final int type = Character.getType(c[pos]);	        if (type == currentType) {	            continue;	        }	        if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {	            final int newTokenStart = pos - 1;	            if (newTokenStart != tokenStart) {	                list.add(new String(c, tokenStart, newTokenStart - tokenStart));	                tokenStart = newTokenStart;	            }	        } else {	            list.add(new String(c, tokenStart, pos - tokenStart));	            tokenStart = pos;	        }	        currentType = type;	    }	    list.add(new String(c, tokenStart, c.length - tokenStart));	    return list.toArray(new String[list.size()]);	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public synchronized boolean start() {	    if (!isStarted()) {	        ExecutorService tempExec;	        executor = getExternalExecutor();	        if (executor == null) {	            executor = tempExec = createExecutor();	        } else {	            tempExec = null;	        }	        future = executor.submit(createTask(tempExec));	        return true;	    }	    return false;	}
@Deprecated	public static String chomp(final String str, final String separator) {	    return removeEnd(str, separator);	}
@Override	public int length() {	    return size;	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static String[] splitPreserveAllTokens(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, true);	}
public static String[] splitByWholeSeparator(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, false);	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
public Comparator<T> getComparator() {	    return comparator;	}
public static Boolean[] nullToEmpty(final Boolean[] array) {	    if (array == null || array.length == 0) {	        return EMPTY_BOOLEAN_OBJECT_ARRAY;	    }	    return array;	}
public static <L, R> ImmutablePair<L, R> of(final L left, final R right) {	    return new ImmutablePair<L, R>(left, right);	}
public static String random(final int count, final char... chars) {	    if (chars == null) {	        return random(count, 0, 0, false, false, null, RANDOM);	    }	    return random(count, 0, chars.length, false, false, chars, RANDOM);	}
public static boolean[] hexDigitToBinary(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return new boolean[] { false, false, false, false };	        case '1':	            return new boolean[] { true, false, false, false };	        case '2':	            return new boolean[] { false, true, false, false };	        case '3':	            return new boolean[] { true, true, false, false };	        case '4':	            return new boolean[] { false, false, true, false };	        case '5':	            return new boolean[] { true, false, true, false };	        case '6':	            return new boolean[] { false, true, true, false };	        case '7':	            return new boolean[] { true, true, true, false };	        case '8':	            return new boolean[] { false, false, false, true };	        case '9':	            return new boolean[] { true, false, false, true };	        case 'a':	        case 'A':	            return new boolean[] { false, true, false, true };	        case 'b':	        case 'B':	            return new boolean[] { true, true, false, true };	        case 'c':	        case 'C':	            return new boolean[] { false, false, true, true };	        case 'd':	        case 'D':	            return new boolean[] { true, false, true, true };	        case 'e':	        case 'E':	            return new boolean[] { false, true, true, true };	        case 'f':	        case 'F':	            return new boolean[] { true, true, true, true };	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public static String trim(final String str) {	    return str == null ? null : str.trim();	}
public static String removeEnd(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (str.endsWith(remove)) {	        return str.substring(0, str.length() - remove.length());	    }	    return str;	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
public static <T extends Comparable<? super T>> int compare(final T c1, final T c2, final boolean nullGreater) {	    if (c1 == c2) {	        return 0;	    } else if (c1 == null) {	        return nullGreater ? 1 : -1;	    } else if (c2 == null) {	        return nullGreater ? -1 : 1;	    }	    return c1.compareTo(c2);	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public void increment() {	    value++;	}
public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {	    if (array == null) {	        return null;	    }	    if (startIndexInclusive < 0) {	        startIndexInclusive = 0;	    }	    if (endIndexExclusive > array.length) {	        endIndexExclusive = array.length;	    }	    final int newSize = endIndexExclusive - startIndexInclusive;	    if (newSize <= 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] subarray = new boolean[newSize];	    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);	    return subarray;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static <T> T initializeUnchecked(final ConcurrentInitializer<T> initializer) {	    try {	        return initialize(initializer);	    } catch (final ConcurrentException cex) {	        throw new ConcurrentRuntimeException(cex.getCause());	    }	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public boolean isEmpty() {	    return size == 0;	}
public void reset() {	    this.runningState = STATE_UNSTARTED;	    this.splitState = STATE_UNSPLIT;	}
public static String rightPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return rightPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return str.concat(padStr);	    } else if (pads < padLen) {	        return str.concat(padStr.substring(0, pads));	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return str.concat(new String(padding));	    }	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
@Override	public int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd) {	    return buffer[pos] <= 32 ? 1 : 0;	}
@Override	public int hashCode() {	    return toHashCode();	}
public static String[] splitPreserveAllTokens(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, true);	}
public boolean isEquals() {	    return this.isEquals;	}
public static String[] stripAll(final String[] strs, final String stripChars) {	    int strsLen;	    if (strs == null || (strsLen = strs.length) == 0) {	        return strs;	    }	    final String[] newArr = new String[strsLen];	    for (int i = 0; i < strsLen; i++) {	        newArr[i] = strip(strs[i], stripChars);	    }	    return newArr;	}
public static boolean isAlphaSpace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false && cs.charAt(i) != ' ') {	            return false;	        }	    }	    return true;	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public static <T> T CONST(final T v) {	    return v;	}
static boolean isOSMatch(final String osName, final String osVersion, final String osNamePrefix, final String osVersionPrefix) {	    if (osName == null || osVersion == null) {	        return false;	    }	    return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);	}
@Override	public int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd) {	    return buffer[pos] <= 32 ? 1 : 0;	}
public static byte[] serialize(final Serializable obj) {	    final ByteArrayOutputStream baos = new ByteArrayOutputStream(512);	    serialize(obj, baos);	    return baos.toByteArray();	}
private static String replaceEach(final String text, final String[] searchList, final String[] replacementList, final boolean repeat, final int timeToLive) {	    if (text == null || text.isEmpty() || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {	        return text;	    }	    if (timeToLive < 0) {	        throw new IllegalStateException("Aborting to protect against StackOverflowError - " + "output of one loop is the input of another");	    }	    final int searchLength = searchList.length;	    final int replacementLength = replacementList.length;	    if (searchLength != replacementLength) {	        throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs " + replacementLength);	    }	    final boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];	    int textIndex = -1;	    int replaceIndex = -1;	    int tempIndex = -1;	    for (int i = 0; i < searchLength; i++) {	        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {	            continue;	        }	        tempIndex = text.indexOf(searchList[i]);	        if (tempIndex == -1) {	            noMoreMatchesForReplIndex[i] = true;	        } else {	            if (textIndex == -1 || tempIndex < textIndex) {	                textIndex = tempIndex;	                replaceIndex = i;	            }	        }	    }	    if (textIndex == -1) {	        return text;	    }	    int start = 0;	    int increase = 0;	    for (int i = 0; i < searchList.length; i++) {	        if (searchList[i] == null || replacementList[i] == null) {	            continue;	        }	        final int greater = replacementList[i].length() - searchList[i].length();	        if (greater > 0) {	            increase += 3 * greater;	        }	    }	    increase = Math.min(increase, text.length() / 5);	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (textIndex != -1) {	        for (int i = start; i < textIndex; i++) {	            buf.append(text.charAt(i));	        }	        buf.append(replacementList[replaceIndex]);	        start = textIndex + searchList[replaceIndex].length();	        textIndex = -1;	        replaceIndex = -1;	        tempIndex = -1;	        for (int i = 0; i < searchLength; i++) {	            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {	                continue;	            }	            tempIndex = text.indexOf(searchList[i], start);	            if (tempIndex == -1) {	                noMoreMatchesForReplIndex[i] = true;	            } else {	                if (textIndex == -1 || tempIndex < textIndex) {	                    textIndex = tempIndex;	                    replaceIndex = i;	                }	            }	        }	    }	    final int textLength = text.length();	    for (int i = start; i < textLength; i++) {	        buf.append(text.charAt(i));	    }	    final String result = buf.toString();	    if (!repeat) {	        return result;	    }	    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);	}
@Override	public int length() {	    return size;	}
public String getNewLineText() {	    return newLine;	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public Object getObject() {	    return object;	}
public void reset() {	    wrappedFactory = null;	    exceptionHandler = null;	    namingPattern = null;	    priority = null;	    daemonFlag = null;	}
static JavaVersion get(final String nom) {	    if ("0.9".equals(nom)) {	        return JAVA_0_9;	    } else if ("1.1".equals(nom)) {	        return JAVA_1_1;	    } else if ("1.2".equals(nom)) {	        return JAVA_1_2;	    } else if ("1.3".equals(nom)) {	        return JAVA_1_3;	    } else if ("1.4".equals(nom)) {	        return JAVA_1_4;	    } else if ("1.5".equals(nom)) {	        return JAVA_1_5;	    } else if ("1.6".equals(nom)) {	        return JAVA_1_6;	    } else if ("1.7".equals(nom)) {	        return JAVA_1_7;	    } else if ("1.8".equals(nom)) {	        return JAVA_1_8;	    } else {	        return null;	    }	}
public static String[] splitByWholeSeparatorPreserveAllTokens(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, true);	}
public static String removeEndIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (endsWithIgnoreCase(str, remove)) {	        return str.substring(0, str.length() - remove.length());	    }	    return str;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
@Override	public int intValue() {	    return (int) value;	}
public static void handleCauseUnchecked(final ExecutionException ex) {	    final ConcurrentRuntimeException crex = extractCauseUnchecked(ex);	    if (crex != null) {	        throw crex;	    }	}
public static boolean isAsciiControl(final char ch) {	    return ch < 32 || ch == 127;	}
public static String[] splitPreserveAllTokens(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, true);	}
@Deprecated	public static String chomp(final String str, final String separator) {	    return removeEnd(str, separator);	}
public static boolean[] removeElements(final boolean[] array, final boolean... values) {	    if (isEmpty(array) || isEmpty(values)) {	        return clone(array);	    }	    final HashMap<Boolean, MutableInt> occurrences = new HashMap<Boolean, MutableInt>(2);	    for (final boolean v : values) {	        final Boolean boxed = Boolean.valueOf(v);	        final MutableInt count = occurrences.get(boxed);	        if (count == null) {	            occurrences.put(boxed, new MutableInt(1));	        } else {	            count.increment();	        }	    }	    final BitSet toRemove = new BitSet();	    for (final Map.Entry<Boolean, MutableInt> e : occurrences.entrySet()) {	        final Boolean v = e.getKey();	        int found = 0;	        for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) {	            found = indexOf(array, v.booleanValue(), found);	            if (found < 0) {	                break;	            }	            toRemove.set(found++);	        }	    }	    return (boolean[]) removeAll(array, toRemove);	}
public static void identityToString(final StringBuilder builder, final Object object) {	    if (object == null) {	        throw new NullPointerException("Cannot get the toString of a null identity");	    }	    builder.append(object.getClass().getName()).append('@').append(Integer.toHexString(System.identityHashCode(object)));	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
protected String getFieldSeparator() {	    return fieldSeparator;	}
public static boolean isNotEmpty(final boolean[] array) {	    return (array != null && array.length != 0);	}
public boolean isEmpty() {	    return size == 0;	}
@Override	public int length() {	    return size;	}
public static float max(final float a, final float b, final float c) {	    return Math.max(Math.max(a, b), c);	}
public int size() {	    return size;	}
public static CharRange isNot(final char ch) {	    return new CharRange(ch, ch, true);	}
public char getEscapeChar() {	    return this.escapeChar;	}
@Override	public void close() {	}
private static long getFragment(final Calendar calendar, final int fragment, final int unit) {	    if (calendar == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final long millisPerUnit = getMillisPerUnit(unit);	    long result = 0;	    switch(fragment) {	        case Calendar.YEAR:	            result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;	            break;	        case Calendar.MONTH:	            result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;	            break;	    }	    switch(fragment) {	        case Calendar.YEAR:	        case Calendar.MONTH:	        case Calendar.DAY_OF_YEAR:	        case Calendar.DATE:	            result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;	        case Calendar.HOUR_OF_DAY:	            result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;	        case Calendar.MINUTE:	            result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;	        case Calendar.SECOND:	            result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;	            break;	        case Calendar.MILLISECOND:	            break;	        default:	            throw new IllegalArgumentException("The fragment " + fragment + " is not supported");	    }	    return result;	}
public static Boolean and(final Boolean... array) {	    if (array == null) {	        throw new IllegalArgumentException("The Array must not be null");	    }	    if (array.length == 0) {	        throw new IllegalArgumentException("Array is empty");	    }	    try {	        final boolean[] primitive = ArrayUtils.toPrimitive(array);	        return and(primitive) ? Boolean.TRUE : Boolean.FALSE;	    } catch (final NullPointerException ex) {	        throw new IllegalArgumentException("The array must not contain any null elements");	    }	}
protected String getSizeStartText() {	    return sizeStartText;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static <T extends CharSequence> T validIndex(final T chars, final int index) {	    return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, Integer.valueOf(index));	}
public static byte toByte(final String str, final byte defaultValue) {	    if (str == null) {	        return defaultValue;	    }	    try {	        return Byte.parseByte(str);	    } catch (final NumberFormatException nfe) {	        return defaultValue;	    }	}
public static boolean isAsciiControl(final char ch) {	    return ch < 32 || ch == 127;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
@Override	public String toString() {	    return StringUtils.repeat(this.value.toString(), this.count);	}
@Override	public float floatValue() {	    return value;	}
@Deprecated	public static String chomp(final String str, final String separator) {	    return removeEnd(str, separator);	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static boolean isAlpha(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
@Override	public String previous() {	    if (hasPrevious()) {	        return tokens[--tokenPos];	    }	    throw new NoSuchElementException();	}
public String getNewLineText() {	    return newLine;	}
public static String capitalize(final String str, final char... delimiters) {	    final int delimLen = delimiters == null ? -1 : delimiters.length;	    if (StringUtils.isEmpty(str) || delimLen == 0) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    boolean capitalizeNext = true;	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (isDelimiter(ch, delimiters)) {	            capitalizeNext = true;	        } else if (capitalizeNext) {	            buffer[i] = Character.toTitleCase(ch);	            capitalizeNext = false;	        }	    }	    return new String(buffer);	}
public static <T extends CharSequence> T defaultIfBlank(final T str, final T defaultStr) {	    return StringUtils.isBlank(str) ? defaultStr : str;	}
public static int reflectionCompare(final Object lhs, final Object rhs, final boolean compareTransients, final Class<?> reflectUpToClass, final String... excludeFields) {	    if (lhs == rhs) {	        return 0;	    }	    if (lhs == null || rhs == null) {	        throw new NullPointerException();	    }	    Class<?> lhsClazz = lhs.getClass();	    if (!lhsClazz.isInstance(rhs)) {	        throw new ClassCastException();	    }	    final CompareToBuilder compareToBuilder = new CompareToBuilder();	    reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);	    while (lhsClazz.getSuperclass() != null && lhsClazz != reflectUpToClass) {	        lhsClazz = lhsClazz.getSuperclass();	        reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);	    }	    return compareToBuilder.toComparison();	}
public String getNewLineText() {	    return newLine;	}
public int setBoolean(final int holder, final boolean flag) {	    return flag ? set(holder) : clear(holder);	}
public static <T extends CharSequence> T notEmpty(final T chars) {	    return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);	}
public static String removePattern(final String source, final String regex) {	    return replacePattern(source, regex, StringUtils.EMPTY);	}
@Override	public int intValue() {	    return value;	}
public boolean isEmpty() {	    return size == 0;	}
public abstract L getLeft();
public static String trimToNull(final String str) {	    final String ts = trim(str);	    return isEmpty(ts) ? null : ts;	}
public static boolean isAsciiAlphanumeric(final char ch) {	    return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9');	}
@Override	public String previous() {	    if (hasPrevious()) {	        return tokens[--tokenPos];	    }	    throw new NoSuchElementException();	}
public int size() {	    return size;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public int capacity() {	    return buffer.length;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static boolean isWhitespace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isWhitespace(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public Fraction reduce() {	    if (numerator == 0) {	        return equals(ZERO) ? this : ZERO;	    }	    final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);	    if (gcd == 1) {	        return this;	    }	    return Fraction.getFraction(numerator / gcd, denominator / gcd);	}
@Override	public int length() {	    return size;	}
public void subtract(final Number operand) {	    this.value -= operand.intValue();	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
static String format(final Token[] tokens, final int years, final int months, final int days, final int hours, final int minutes, final int seconds, int milliseconds, final boolean padWithZeros) {	    final StringBuilder buffer = new StringBuilder();	    boolean lastOutputSeconds = false;	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        final Token token = tokens[i];	        final Object value = token.getValue();	        final int count = token.getCount();	        if (value instanceof StringBuilder) {	            buffer.append(value.toString());	        } else {	            if (value == y) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer.toString(years));	                lastOutputSeconds = false;	            } else if (value == M) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer.toString(months));	                lastOutputSeconds = false;	            } else if (value == d) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer.toString(days));	                lastOutputSeconds = false;	            } else if (value == H) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer.toString(hours));	                lastOutputSeconds = false;	            } else if (value == m) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer.toString(minutes));	                lastOutputSeconds = false;	            } else if (value == s) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer.toString(seconds));	                lastOutputSeconds = true;	            } else if (value == S) {	                if (lastOutputSeconds) {	                    milliseconds += 1000;	                    final String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds);	                    buffer.append(str.substring(1));	                } else {	                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds));	                }	                lastOutputSeconds = false;	            }	        }	    }	    return buffer.toString();	}
@Override	public String toString() {	    return "FastDateFormat[" + printer.getPattern() + "," + printer.getLocale() + "," + printer.getTimeZone().getID() + "]";	}
@Override	public long longValue() {	    return (long) value;	}
public StrSubstitutor setVariablePrefix(final String prefix) {	    if (prefix == null) {	        throw new IllegalArgumentException("Variable prefix must not be null!");	    }	    return setVariablePrefixMatcher(StrMatcher.stringMatcher(prefix));	}
public String getNewLineText() {	    return newLine;	}
public HashCodeBuilder append(final short[] array) {	    if (array == null) {	        iTotal = iTotal * iConstant;	    } else {	        for (final short element : array) {	            append(element);	        }	    }	    return this;	}
static Pair<IDKey, IDKey> getRegisterPair(final Object lhs, final Object rhs) {	    final IDKey left = new IDKey(lhs);	    final IDKey right = new IDKey(rhs);	    return Pair.of(left, right);	}
public String getNullText() {	    return nullText;	}
public void reset() {	    this.runningState = STATE_UNSTARTED;	    this.splitState = STATE_UNSPLIT;	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public static <T> T CONST(final T v) {	    return v;	}
public static boolean isNumericSpace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {	            return false;	        }	    }	    return true;	}
private static Object add(final Object array, final int index, final Object element, final Class<?> clss) {	    if (array == null) {	        if (index != 0) {	            throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");	        }	        final Object joinedArray = Array.newInstance(clss, 1);	        Array.set(joinedArray, 0, element);	        return joinedArray;	    }	    final int length = Array.getLength(array);	    if (index > length || index < 0) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(clss, length + 1);	    System.arraycopy(array, 0, result, 0, index);	    Array.set(result, index, element);	    if (index < length) {	        System.arraycopy(array, index, result, index + 1, length - index);	    }	    return result;	}
public static String overlay(final String str, String overlay, int start, int end) {	    if (str == null) {	        return null;	    }	    if (overlay == null) {	        overlay = EMPTY;	    }	    final int len = str.length();	    if (start < 0) {	        start = 0;	    }	    if (start > len) {	        start = len;	    }	    if (end < 0) {	        end = 0;	    }	    if (end > len) {	        end = len;	    }	    if (start > end) {	        final int temp = start;	        start = end;	        end = temp;	    }	    return new StringBuilder(len + start - end + overlay.length() + 1).append(str.substring(0, start)).append(overlay).append(str.substring(end)).toString();	}
@Override	public int hashCode() {	    return (mStyle * 31 + mLocale.hashCode()) * 31 + mTimeZone.hashCode();	}
protected void add(final String str) {	    if (str == null) {	        return;	    }	    final int len = str.length();	    int pos = 0;	    while (pos < len) {	        final int remainder = len - pos;	        if (remainder >= 4 && str.charAt(pos) == '^' && str.charAt(pos + 2) == '-') {	            set.add(CharRange.isNotIn(str.charAt(pos + 1), str.charAt(pos + 3)));	            pos += 4;	        } else if (remainder >= 3 && str.charAt(pos + 1) == '-') {	            set.add(CharRange.isIn(str.charAt(pos), str.charAt(pos + 2)));	            pos += 3;	        } else if (remainder >= 2 && str.charAt(pos) == '^') {	            set.add(CharRange.isNot(str.charAt(pos + 1)));	            pos += 2;	        } else {	            set.add(CharRange.is(str.charAt(pos)));	            pos += 1;	        }	    }	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public String getNewLineText() {	    return newLine;	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {	    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {	        return false;	    }	    return true;	}
public static Object invokeMethod(final Object object, final String methodName, Object[] args, Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {	    if (parameterTypes == null) {	        parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;	    }	    if (args == null) {	        args = ArrayUtils.EMPTY_OBJECT_ARRAY;	    }	    final Method method = getMatchingAccessibleMethod(object.getClass(), methodName, parameterTypes);	    if (method == null) {	        throw new NoSuchMethodException("No such accessible method: " + methodName + "() on object: " + object.getClass().getName());	    }	    return method.invoke(object, args);	}
public static <T extends CharSequence> T notEmpty(final T chars) {	    return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);	}
public boolean isEmpty() {	    return size == 0;	}
public static boolean equals(final Annotation a1, final Annotation a2) {	    if (a1 == a2) {	        return true;	    }	    if (a1 == null || a2 == null) {	        return false;	    }	    final Class<? extends Annotation> type = a1.annotationType();	    final Class<? extends Annotation> type2 = a2.annotationType();	    Validate.notNull(type, "Annotation %s with null annotationType()", a1);	    Validate.notNull(type2, "Annotation %s with null annotationType()", a2);	    if (!type.equals(type2)) {	        return false;	    }	    try {	        for (final Method m : type.getDeclaredMethods()) {	            if (m.getParameterTypes().length == 0 && isValidAnnotationMemberType(m.getReturnType())) {	                final Object v1 = m.invoke(a1);	                final Object v2 = m.invoke(a2);	                if (!memberEquals(m.getReturnType(), v1, v2)) {	                    return false;	                }	            }	        }	    } catch (final IllegalAccessException ex) {	        return false;	    } catch (final InvocationTargetException ex) {	        return false;	    }	    return true;	}
public int size() {	    return size;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
@Override	public boolean ready() {	    return pos < StrBuilder.this.size();	}
public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, 1);	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
public String getNullText() {	    return nullText;	}
public static int getLength(final Object array) {	    if (array == null) {	        return 0;	    }	    return Array.getLength(array);	}
public String getNullText() {	    return nullText;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
@Override	public BasicThreadFactory build() {	    final BasicThreadFactory factory = new BasicThreadFactory(this);	    reset();	    return factory;	}
@Override	public boolean equals(final Object obj2) {	    if (obj2 instanceof Token) {	        final Token tok2 = (Token) obj2;	        if (this.value.getClass() != tok2.value.getClass()) {	            return false;	        }	        if (this.count != tok2.count) {	            return false;	        }	        if (this.value instanceof StringBuilder) {	            return this.value.toString().equals(tok2.value.toString());	        } else if (this.value instanceof Number) {	            return this.value.equals(tok2.value);	        } else {	            return this.value == tok2.value;	        }	    }	    return false;	}
@Override	public String toString() {	    if (this.getObject() == null) {	        return this.getStyle().getNullText();	    }	    Class<?> clazz = this.getObject().getClass();	    this.appendFieldsIn(clazz);	    while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {	        clazz = clazz.getSuperclass();	        this.appendFieldsIn(clazz);	    }	    return super.toString();	}
public static <K, V> V createIfAbsent(final ConcurrentMap<K, V> map, final K key, final ConcurrentInitializer<V> init) throws ConcurrentException {	    if (map == null || init == null) {	        return null;	    }	    final V value = map.get(key);	    if (value == null) {	        return putIfAbsent(map, key, init.get());	    }	    return value;	}
public static Class<?> getRawType(final Type type, final Type assigningType) {	    if (type instanceof Class<?>) {	        return (Class<?>) type;	    }	    if (type instanceof ParameterizedType) {	        return getRawType((ParameterizedType) type);	    }	    if (type instanceof TypeVariable<?>) {	        if (assigningType == null) {	            return null;	        }	        final Object genericDeclaration = ((TypeVariable<?>) type).getGenericDeclaration();	        if (!(genericDeclaration instanceof Class<?>)) {	            return null;	        }	        final Map<TypeVariable<?>, Type> typeVarAssigns = getTypeArguments(assigningType, (Class<?>) genericDeclaration);	        if (typeVarAssigns == null) {	            return null;	        }	        final Type typeArgument = typeVarAssigns.get(type);	        if (typeArgument == null) {	            return null;	        }	        return getRawType(typeArgument, assigningType);	    }	    if (type instanceof GenericArrayType) {	        final Class<?> rawComponentType = getRawType(((GenericArrayType) type).getGenericComponentType(), assigningType);	        return Array.newInstance(rawComponentType, 0).getClass();	    }	    if (type instanceof WildcardType) {	        return null;	    }	    throw new IllegalArgumentException("unknown type: " + type);	}
private static Object add(final Object array, final int index, final Object element, final Class<?> clss) {	    if (array == null) {	        if (index != 0) {	            throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");	        }	        final Object joinedArray = Array.newInstance(clss, 1);	        Array.set(joinedArray, 0, element);	        return joinedArray;	    }	    final int length = Array.getLength(array);	    if (index > length || index < 0) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(clss, length + 1);	    System.arraycopy(array, 0, result, 0, index);	    Array.set(result, index, element);	    if (index < length) {	        System.arraycopy(array, index, result, index + 1, length - index);	    }	    return result;	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
public int capacity() {	    return buffer.length;	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static String reverse(final String str) {	    if (str == null) {	        return null;	    }	    return new StringBuilder(str).reverse().toString();	}
public boolean isEmpty() {	    return size == 0;	}
static String format(final Token[] tokens, final int years, final int months, final int days, final int hours, final int minutes, final int seconds, int milliseconds, final boolean padWithZeros) {	    final StringBuilder buffer = new StringBuilder();	    boolean lastOutputSeconds = false;	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        final Token token = tokens[i];	        final Object value = token.getValue();	        final int count = token.getCount();	        if (value instanceof StringBuilder) {	            buffer.append(value.toString());	        } else {	            if (value == y) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer.toString(years));	                lastOutputSeconds = false;	            } else if (value == M) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer.toString(months));	                lastOutputSeconds = false;	            } else if (value == d) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer.toString(days));	                lastOutputSeconds = false;	            } else if (value == H) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer.toString(hours));	                lastOutputSeconds = false;	            } else if (value == m) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer.toString(minutes));	                lastOutputSeconds = false;	            } else if (value == s) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer.toString(seconds));	                lastOutputSeconds = true;	            } else if (value == S) {	                if (lastOutputSeconds) {	                    milliseconds += 1000;	                    final String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds);	                    buffer.append(str.substring(1));	                } else {	                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds));	                }	                lastOutputSeconds = false;	            }	        }	    }	    return buffer.toString();	}
@Override	public String lookup(final String key) {	    if (map == null) {	        return null;	    }	    final Object obj = map.get(key);	    if (obj == null) {	        return null;	    }	    return obj.toString();	}
@Override	public void write(final String str, final int off, final int len) {	    StrBuilder.this.append(str, off, len);	}
public String midString(int index, final int length) {	    if (index < 0) {	        index = 0;	    }	    if (length <= 0 || index >= size) {	        return "";	    }	    if (size <= index + length) {	        return new String(buffer, index, size - index);	    }	    return new String(buffer, index, length);	}
@Override	public boolean equals(final Object obj) {	    if (obj == null) {	        return false;	    }	    if (this == obj) {	        return true;	    }	    if (this.getClass() == obj.getClass()) {	        final MutableObject<?> that = (MutableObject<?>) obj;	        return this.value.equals(that.value);	    } else {	        return false;	    }	}
public static String substringAfter(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (separator == null) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
public int getNumerator() {	    return numerator;	}
public int toHashCode() {	    return iTotal;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
@Override	public int compare(final Object obj1, final Object obj2) {	    return ((Comparable) obj1).compareTo(obj2);	}
public static String rightPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return rightPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return str.concat(padStr);	    } else if (pads < padLen) {	        return str.concat(padStr.substring(0, pads));	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return str.concat(new String(padding));	    }	}
public static StrTokenizer getTSVInstance(final char[] input) {	    final StrTokenizer tok = getTSVClone();	    tok.reset(input);	    return tok;	}
public static boolean isNumeric(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isDigit(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public int size() {	    return size;	}
public char getEscapeChar() {	    return this.escapeChar;	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
protected String getArraySeparator() {	    return arraySeparator;	}
public static int toInt(final String str, final int defaultValue) {	    if (str == null) {	        return defaultValue;	    }	    try {	        return Integer.parseInt(str);	    } catch (final NumberFormatException nfe) {	        return defaultValue;	    }	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
@Override	public T call() throws Exception {	    try {	        return initialize();	    } finally {	        if (execFinally != null) {	            execFinally.shutdown();	        }	    }	}
public static Boolean[] nullToEmpty(final Boolean[] array) {	    if (array == null || array.length == 0) {	        return EMPTY_BOOLEAN_OBJECT_ARRAY;	    }	    return array;	}
static String format(final Token[] tokens, final int years, final int months, final int days, final int hours, final int minutes, final int seconds, int milliseconds, final boolean padWithZeros) {	    final StringBuilder buffer = new StringBuilder();	    boolean lastOutputSeconds = false;	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        final Token token = tokens[i];	        final Object value = token.getValue();	        final int count = token.getCount();	        if (value instanceof StringBuilder) {	            buffer.append(value.toString());	        } else {	            if (value == y) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer.toString(years));	                lastOutputSeconds = false;	            } else if (value == M) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer.toString(months));	                lastOutputSeconds = false;	            } else if (value == d) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer.toString(days));	                lastOutputSeconds = false;	            } else if (value == H) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer.toString(hours));	                lastOutputSeconds = false;	            } else if (value == m) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer.toString(minutes));	                lastOutputSeconds = false;	            } else if (value == s) {	                buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer.toString(seconds));	                lastOutputSeconds = true;	            } else if (value == S) {	                if (lastOutputSeconds) {	                    milliseconds += 1000;	                    final String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds);	                    buffer.append(str.substring(1));	                } else {	                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds));	                }	                lastOutputSeconds = false;	            }	        }	    }	    return buffer.toString();	}
public int lastIndexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex >= size ? size - 1 : startIndex);	    if (matcher == null || startIndex < 0) {	        return -1;	    }	    final char[] buf = buffer;	    final int endIndex = startIndex + 1;	    for (int i = startIndex; i >= 0; i--) {	        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {	            return i;	        }	    }	    return -1;	}
@Override	public double doubleValue() {	    return (double) numerator / (double) denominator;	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public static float min(final float a, final float b, final float c) {	    return Math.min(Math.min(a, b), c);	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public boolean isEmpty() {	    return size == 0;	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public char getStart() {	    return this.start;	}
public static String[] splitByWholeSeparator(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, false);	}
protected String getNullText() {	    return nullText;	}
public static void isTrue(final boolean expression) {	    if (expression == false) {	        throw new IllegalArgumentException(DEFAULT_IS_TRUE_EX_MESSAGE);	    }	}
@Override	public int hashCode() {	    final long bits = Double.doubleToLongBits(value);	    return (int) (bits ^ bits >>> 32);	}
private static Object add(final Object array, final int index, final Object element, final Class<?> clss) {	    if (array == null) {	        if (index != 0) {	            throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");	        }	        final Object joinedArray = Array.newInstance(clss, 1);	        Array.set(joinedArray, 0, element);	        return joinedArray;	    }	    final int length = Array.getLength(array);	    if (index > length || index < 0) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(clss, length + 1);	    System.arraycopy(array, 0, result, 0, index);	    Array.set(result, index, element);	    if (index < length) {	        System.arraycopy(array, index, result, index + 1, length - index);	    }	    return result;	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
static char[] toCharArray(final CharSequence cs) {	    if (cs instanceof String) {	        return ((String) cs).toCharArray();	    } else {	        final int sz = cs.length();	        final char[] array = new char[cs.length()];	        for (int i = 0; i < sz; i++) {	            array[i] = cs.charAt(i);	        }	        return array;	    }	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public char getEnd() {	    return this.end;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public int setValue(final int holder, final int value) {	    return (holder & ~_mask) | ((value << _shift_count) & _mask);	}
public String getNullText() {	    return nullText;	}
public String getNewLineText() {	    return newLine;	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public StrBuilder replaceAll(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, -1);	}
static int lastIndexOf(final CharSequence cs, final CharSequence searchChar, final int start) {	    return cs.toString().lastIndexOf(searchChar.toString(), start);	}
public String getNullText() {	    return nullText;	}
@Override	protected List<String> tokenize(final char[] chars, final int offset, final int count) {	    if (chars == null) {	        return super.tokenize(StrBuilder.this.buffer, 0, StrBuilder.this.size());	    }	    return super.tokenize(chars, offset, count);	}
public static String getMessage(final Throwable th) {	    if (th == null) {	        return "";	    }	    final String clsName = ClassUtils.getShortClassName(th, null);	    final String msg = th.getMessage();	    return clsName + ": " + StringUtils.defaultString(msg);	}
public static float min(final float a, final float b, final float c) {	    return Math.min(Math.min(a, b), c);	}
public String getNullText() {	    return nullText;	}
public int lastIndexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex >= size ? size - 1 : startIndex);	    if (matcher == null || startIndex < 0) {	        return -1;	    }	    final char[] buf = buffer;	    final int endIndex = startIndex + 1;	    for (int i = startIndex; i >= 0; i--) {	        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {	            return i;	        }	    }	    return -1;	}
protected boolean isUseFieldNames() {	    return useFieldNames;	}
public static Object invokeMethod(final Object object, final String methodName, Object[] args, Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {	    if (parameterTypes == null) {	        parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;	    }	    if (args == null) {	        args = ArrayUtils.EMPTY_OBJECT_ARRAY;	    }	    final Method method = getMatchingAccessibleMethod(object.getClass(), methodName, parameterTypes);	    if (method == null) {	        throw new NoSuchMethodException("No such accessible method: " + methodName + "() on object: " + object.getClass().getName());	    }	    return method.invoke(object, args);	}
public static Fraction getFraction(String str) {	    if (str == null) {	        throw new IllegalArgumentException("The string must not be null");	    }	    int pos = str.indexOf('.');	    if (pos >= 0) {	        return getFraction(Double.parseDouble(str));	    }	    pos = str.indexOf(' ');	    if (pos > 0) {	        final int whole = Integer.parseInt(str.substring(0, pos));	        str = str.substring(pos + 1);	        pos = str.indexOf('/');	        if (pos < 0) {	            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");	        } else {	            final int numer = Integer.parseInt(str.substring(0, pos));	            final int denom = Integer.parseInt(str.substring(pos + 1));	            return getFraction(whole, numer, denom);	        }	    }	    pos = str.indexOf('/');	    if (pos < 0) {	        return getFraction(Integer.parseInt(str), 1);	    } else {	        final int numer = Integer.parseInt(str.substring(0, pos));	        final int denom = Integer.parseInt(str.substring(pos + 1));	        return getFraction(numer, denom);	    }	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public StrTokenizer setIgnoredChar(final char ignored) {	    return setIgnoredMatcher(StrMatcher.charMatcher(ignored));	}
public static String stripToNull(String str) {	    if (str == null) {	        return null;	    }	    str = strip(str, null);	    return str.isEmpty() ? null : str;	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
@Override	public long longValue() {	    return value;	}
public void subtract(final Number operand) {	    this.value -= operand.byteValue();	}
public String getNewLineText() {	    return newLine;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static long toLong(final String str, final long defaultValue) {	    if (str == null) {	        return defaultValue;	    }	    try {	        return Long.parseLong(str);	    } catch (final NumberFormatException nfe) {	        return defaultValue;	    }	}
public boolean isEmpty() {	    return size == 0;	}
public static FastDateFormat getDateInstance(final int style, final TimeZone timeZone, final Locale locale) {	    return cache.getDateInstance(style, timeZone, locale);	}
public static String capitalize(final String str, final char... delimiters) {	    final int delimLen = delimiters == null ? -1 : delimiters.length;	    if (StringUtils.isEmpty(str) || delimLen == 0) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    boolean capitalizeNext = true;	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (isDelimiter(ch, delimiters)) {	            capitalizeNext = true;	        } else if (capitalizeNext) {	            buffer[i] = Character.toTitleCase(ch);	            capitalizeNext = false;	        }	    }	    return new String(buffer);	}
public static <T extends CharSequence> T defaultIfEmpty(final T str, final T defaultStr) {	    return StringUtils.isEmpty(str) ? defaultStr : str;	}
private static String[] splitByCharacterType(final String str, final boolean camelCase) {	    if (str == null) {	        return null;	    }	    if (str.isEmpty()) {	        return ArrayUtils.EMPTY_STRING_ARRAY;	    }	    final char[] c = str.toCharArray();	    final List<String> list = new ArrayList<String>();	    int tokenStart = 0;	    int currentType = Character.getType(c[tokenStart]);	    for (int pos = tokenStart + 1; pos < c.length; pos++) {	        final int type = Character.getType(c[pos]);	        if (type == currentType) {	            continue;	        }	        if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {	            final int newTokenStart = pos - 1;	            if (newTokenStart != tokenStart) {	                list.add(new String(c, tokenStart, newTokenStart - tokenStart));	                tokenStart = newTokenStart;	            }	        } else {	            list.add(new String(c, tokenStart, pos - tokenStart));	            tokenStart = pos;	        }	        currentType = type;	    }	    list.add(new String(c, tokenStart, c.length - tokenStart));	    return list.toArray(new String[list.size()]);	}
public boolean isEndedBy(final T element) {	    if (element == null) {	        return false;	    }	    return comparator.compare(element, maximum) == 0;	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
@Override	public void close() {	}
public static char intToHexDigit(final int nibble) {	    final char c = Character.forDigit(nibble, 16);	    if (c == Character.MIN_VALUE) {	        throw new IllegalArgumentException("nibble value not between 0 and 15: " + nibble);	    }	    return c;	}
public StrBuilder setLength(final int length) {	    if (length < 0) {	        throw new StringIndexOutOfBoundsException(length);	    }	    if (length < size) {	        size = length;	    } else if (length > size) {	        ensureCapacity(length);	        final int oldEnd = size;	        final int newEnd = length;	        size = length;	        for (int i = oldEnd; i < newEnd; i++) {	            buffer[i] = '\0';	        }	    }	    return this;	}
protected void setFieldSeparator(String fieldSeparator) {	    if (fieldSeparator == null) {	        fieldSeparator = "";	    }	    this.fieldSeparator = fieldSeparator;	}
public int elementCompareTo(final T element) {	    if (element == null) {	        throw new NullPointerException("Element is null");	    }	    if (isAfter(element)) {	        return -1;	    } else if (isBefore(element)) {	        return 1;	    } else {	        return 0;	    }	}
private static boolean startsWith(final CharSequence str, final CharSequence prefix, final boolean ignoreCase) {	    if (str == null || prefix == null) {	        return str == null && prefix == null;	    }	    if (prefix.length() > str.length()) {	        return false;	    }	    return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());	}
private static Date add(final Date date, final int calendarField, final int amount) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final Calendar c = Calendar.getInstance();	    c.setTime(date);	    c.add(calendarField, amount);	    return c.getTime();	}
public boolean isEmpty() {	    return size == 0;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
protected boolean isFieldSeparatorAtStart() {	    return fieldSeparatorAtStart;	}
public static int indexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = Integer.MAX_VALUE;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.indexOf(str, search, 0);	        if (tmp == INDEX_NOT_FOUND) {	            continue;	        }	        if (tmp < ret) {	            ret = tmp;	        }	    }	    return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;	}
@Override	public Byte getValue() {	    return Byte.valueOf(this.value);	}
public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr) {	    return replace(matcher, replaceStr, 0, size, 1);	}
public StrBuilder appendFixedWidthPadLeft(final int value, final int width, final char padChar) {	    return appendFixedWidthPadLeft(String.valueOf(value), width, padChar);	}
@Override	public int length() {	    return size;	}
public static int indexOfDifference(final CharSequence... css) {	    if (css == null || css.length <= 1) {	        return INDEX_NOT_FOUND;	    }	    boolean anyStringNull = false;	    boolean allStringsNull = true;	    final int arrayLen = css.length;	    int shortestStrLen = Integer.MAX_VALUE;	    int longestStrLen = 0;	    for (int i = 0; i < arrayLen; i++) {	        if (css[i] == null) {	            anyStringNull = true;	            shortestStrLen = 0;	        } else {	            allStringsNull = false;	            shortestStrLen = Math.min(css[i].length(), shortestStrLen);	            longestStrLen = Math.max(css[i].length(), longestStrLen);	        }	    }	    if (allStringsNull || longestStrLen == 0 && !anyStringNull) {	        return INDEX_NOT_FOUND;	    }	    if (shortestStrLen == 0) {	        return 0;	    }	    int firstDiff = -1;	    for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {	        final char comparisonChar = css[0].charAt(stringPos);	        for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {	            if (css[arrayPos].charAt(stringPos) != comparisonChar) {	                firstDiff = stringPos;	                break;	            }	        }	        if (firstDiff != -1) {	            break;	        }	    }	    if (firstDiff == -1 && shortestStrLen != longestStrLen) {	        return shortestStrLen;	    }	    return firstDiff;	}
private static String[] splitByCharacterType(final String str, final boolean camelCase) {	    if (str == null) {	        return null;	    }	    if (str.isEmpty()) {	        return ArrayUtils.EMPTY_STRING_ARRAY;	    }	    final char[] c = str.toCharArray();	    final List<String> list = new ArrayList<String>();	    int tokenStart = 0;	    int currentType = Character.getType(c[tokenStart]);	    for (int pos = tokenStart + 1; pos < c.length; pos++) {	        final int type = Character.getType(c[pos]);	        if (type == currentType) {	            continue;	        }	        if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {	            final int newTokenStart = pos - 1;	            if (newTokenStart != tokenStart) {	                list.add(new String(c, tokenStart, newTokenStart - tokenStart));	                tokenStart = newTokenStart;	            }	        } else {	            list.add(new String(c, tokenStart, pos - tokenStart));	            tokenStart = pos;	        }	        currentType = type;	    }	    list.add(new String(c, tokenStart, c.length - tokenStart));	    return list.toArray(new String[list.size()]);	}
public static String toString(final Annotation a) {	    final ToStringBuilder builder = new ToStringBuilder(a, TO_STRING_STYLE);	    for (final Method m : a.annotationType().getDeclaredMethods()) {	        if (m.getParameterTypes().length > 0) {	            continue;	        }	        try {	            builder.append(m.getName(), m.invoke(a));	        } catch (final RuntimeException ex) {	            throw ex;	        } catch (final Exception ex) {	            throw new RuntimeException(ex);	        }	    }	    return builder.build();	}
public String leftString(final int length) {	    if (length <= 0) {	        return "";	    } else if (length >= size) {	        return new String(buffer, 0, size);	    } else {	        return new String(buffer, 0, length);	    }	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
protected boolean isUseClassName() {	    return useClassName;	}
public static <T extends CharSequence> T notEmpty(final T chars) {	    return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);	}
public String midString(int index, final int length) {	    if (index < 0) {	        index = 0;	    }	    if (length <= 0 || index >= size) {	        return "";	    }	    if (size <= index + length) {	        return new String(buffer, index, size - index);	    }	    return new String(buffer, index, length);	}
public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {	    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {	        return false;	    }	    return true;	}
public static CharRange isNot(final char ch) {	    return new CharRange(ch, ch, true);	}
protected boolean isFieldSeparatorAtEnd() {	    return fieldSeparatorAtEnd;	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
@Override	public boolean markSupported() {	    return true;	}
@Override	public TimeZone getTimeZone() {	    return mTimeZone;	}
public static void reverse(final boolean[] array) {	    if (array == null) {	        return;	    }	    int i = 0;	    int j = array.length - 1;	    boolean tmp;	    while (j > i) {	        tmp = array[j];	        array[j] = array[i];	        array[i] = tmp;	        j--;	        i++;	    }	}
public int toComparison() {	    return comparison;	}
@Override	public int nextIndex() {	    return tokenPos;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
protected void appendDetail(final StringBuffer buffer, final String fieldName, final boolean[] array) {	    buffer.append(arrayStart);	    for (int i = 0; i < array.length; i++) {	        if (i > 0) {	            buffer.append(arraySeparator);	        }	        appendDetail(buffer, fieldName, array[i]);	    }	    buffer.append(arrayEnd);	}
public int size() {	    return size;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static String[] splitPreserveAllTokens(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, true);	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
private static String replaceEach(final String text, final String[] searchList, final String[] replacementList, final boolean repeat, final int timeToLive) {	    if (text == null || text.isEmpty() || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {	        return text;	    }	    if (timeToLive < 0) {	        throw new IllegalStateException("Aborting to protect against StackOverflowError - " + "output of one loop is the input of another");	    }	    final int searchLength = searchList.length;	    final int replacementLength = replacementList.length;	    if (searchLength != replacementLength) {	        throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs " + replacementLength);	    }	    final boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];	    int textIndex = -1;	    int replaceIndex = -1;	    int tempIndex = -1;	    for (int i = 0; i < searchLength; i++) {	        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {	            continue;	        }	        tempIndex = text.indexOf(searchList[i]);	        if (tempIndex == -1) {	            noMoreMatchesForReplIndex[i] = true;	        } else {	            if (textIndex == -1 || tempIndex < textIndex) {	                textIndex = tempIndex;	                replaceIndex = i;	            }	        }	    }	    if (textIndex == -1) {	        return text;	    }	    int start = 0;	    int increase = 0;	    for (int i = 0; i < searchList.length; i++) {	        if (searchList[i] == null || replacementList[i] == null) {	            continue;	        }	        final int greater = replacementList[i].length() - searchList[i].length();	        if (greater > 0) {	            increase += 3 * greater;	        }	    }	    increase = Math.min(increase, text.length() / 5);	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (textIndex != -1) {	        for (int i = start; i < textIndex; i++) {	            buf.append(text.charAt(i));	        }	        buf.append(replacementList[replaceIndex]);	        start = textIndex + searchList[replaceIndex].length();	        textIndex = -1;	        replaceIndex = -1;	        tempIndex = -1;	        for (int i = 0; i < searchLength; i++) {	            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {	                continue;	            }	            tempIndex = text.indexOf(searchList[i], start);	            if (tempIndex == -1) {	                noMoreMatchesForReplIndex[i] = true;	            } else {	                if (textIndex == -1 || tempIndex < textIndex) {	                    textIndex = tempIndex;	                    replaceIndex = i;	                }	            }	        }	    }	    final int textLength = text.length();	    for (int i = start; i < textLength; i++) {	        buf.append(text.charAt(i));	    }	    final String result = buf.toString();	    if (!repeat) {	        return result;	    }	    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);	}
public static boolean isPrimitiveWrapper(final Class<?> type) {	    return wrapperPrimitiveMap.containsKey(type);	}
public static float max(final float a, final float b) {	    if (Float.isNaN(a)) {	        return b;	    } else if (Float.isNaN(b)) {	        return a;	    } else {	        return Math.max(a, b);	    }	}
private static Object add(final Object array, final int index, final Object element, final Class<?> clss) {	    if (array == null) {	        if (index != 0) {	            throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");	        }	        final Object joinedArray = Array.newInstance(clss, 1);	        Array.set(joinedArray, 0, element);	        return joinedArray;	    }	    final int length = Array.getLength(array);	    if (index > length || index < 0) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(clss, length + 1);	    System.arraycopy(array, 0, result, 0, index);	    Array.set(result, index, element);	    if (index < length) {	        System.arraycopy(array, index, result, index + 1, length - index);	    }	    return result;	}
public int lastIndexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex >= size ? size - 1 : startIndex);	    if (matcher == null || startIndex < 0) {	        return -1;	    }	    final char[] buf = buffer;	    final int endIndex = startIndex + 1;	    for (int i = startIndex; i >= 0; i--) {	        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {	            return i;	        }	    }	    return -1;	}
public static boolean toBoolean(final String str, final String trueString, final String falseString) {	    if (str == trueString) {	        return true;	    } else if (str == falseString) {	        return false;	    } else if (str != null) {	        if (str.equals(trueString)) {	            return true;	        } else if (str.equals(falseString)) {	            return false;	        }	    }	    throw new IllegalArgumentException("The String did not match either specified value");	}
public static String substringBefore(final String str, final String separator) {	    if (isEmpty(str) || separator == null) {	        return str;	    }	    if (separator.isEmpty()) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public boolean contains(final StrMatcher matcher) {	    return indexOf(matcher, 0) >= 0;	}
public boolean containsRange(final Range<T> otherRange) {	    if (otherRange == null) {	        return false;	    }	    return contains(otherRange.minimum) && contains(otherRange.maximum);	}
public static boolean[] hexDigitToBinary(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return new boolean[] { false, false, false, false };	        case '1':	            return new boolean[] { true, false, false, false };	        case '2':	            return new boolean[] { false, true, false, false };	        case '3':	            return new boolean[] { true, true, false, false };	        case '4':	            return new boolean[] { false, false, true, false };	        case '5':	            return new boolean[] { true, false, true, false };	        case '6':	            return new boolean[] { false, true, true, false };	        case '7':	            return new boolean[] { true, true, true, false };	        case '8':	            return new boolean[] { false, false, false, true };	        case '9':	            return new boolean[] { true, false, false, true };	        case 'a':	        case 'A':	            return new boolean[] { false, true, false, true };	        case 'b':	        case 'B':	            return new boolean[] { true, true, false, true };	        case 'c':	        case 'C':	            return new boolean[] { false, false, true, true };	        case 'd':	        case 'D':	            return new boolean[] { true, false, true, true };	        case 'e':	        case 'E':	            return new boolean[] { false, true, true, true };	        case 'f':	        case 'F':	            return new boolean[] { true, true, true, true };	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public static String right(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(str.length() - len);	}
public static Method getMatchingAccessibleMethod(final Class<?> cls, final String methodName, final Class<?>... parameterTypes) {	    try {	        final Method method = cls.getMethod(methodName, parameterTypes);	        MemberUtils.setAccessibleWorkaround(method);	        return method;	    } catch (final NoSuchMethodException e) {	    }	    Method bestMatch = null;	    final Method[] methods = cls.getMethods();	    for (final Method method : methods) {	        if (method.getName().equals(methodName) && ClassUtils.isAssignable(parameterTypes, method.getParameterTypes(), true)) {	            final Method accessibleMethod = getAccessibleMethod(method);	            if (accessibleMethod != null && (bestMatch == null || MemberUtils.compareParameterTypes(accessibleMethod.getParameterTypes(), bestMatch.getParameterTypes(), parameterTypes) < 0)) {	                bestMatch = accessibleMethod;	            }	        }	    }	    if (bestMatch != null) {	        MemberUtils.setAccessibleWorkaround(bestMatch);	    }	    return bestMatch;	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
public static String substringAfter(final String str, final String separator) {	    if (isEmpty(str)) {	        return str;	    }	    if (separator == null) {	        return EMPTY;	    }	    final int pos = str.indexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return EMPTY;	    }	    return str.substring(pos + separator.length());	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
@Override	public int previousIndex() {	    return tokenPos - 1;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static String abbreviate(final String str, int offset, final int maxWidth) {	    if (str == null) {	        return null;	    }	    if (maxWidth < 4) {	        throw new IllegalArgumentException("Minimum abbreviation width is 4");	    }	    if (str.length() <= maxWidth) {	        return str;	    }	    if (offset > str.length()) {	        offset = str.length();	    }	    if (str.length() - offset < maxWidth - 3) {	        offset = str.length() - (maxWidth - 3);	    }	    final String abrevMarker = "...";	    if (offset <= 4) {	        return str.substring(0, maxWidth - 3) + abrevMarker;	    }	    if (maxWidth < 7) {	        throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");	    }	    if (offset + maxWidth - 3 < str.length()) {	        return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);	    }	    return abrevMarker + str.substring(str.length() - (maxWidth - 3));	}
public StrBuilder appendWithSeparators(final Iterator<?> it, String separator) {	    if (it != null) {	        separator = ObjectUtils.toString(separator);	        while (it.hasNext()) {	            append(it.next());	            if (it.hasNext()) {	                append(separator);	            }	        }	    }	    return this;	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public int indexOf(final StrMatcher matcher, int startIndex) {	    startIndex = (startIndex < 0 ? 0 : startIndex);	    if (matcher == null || startIndex >= size) {	        return -1;	    }	    final int len = size;	    final char[] buf = buffer;	    for (int i = startIndex; i < len; i++) {	        if (matcher.isMatch(buf, i, startIndex, len) > 0) {	            return i;	        }	    }	    return -1;	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public Short toShort() {	    return Short.valueOf(shortValue());	}
public static char intToHexDigitMsb0(final int nibble) {	    switch(nibble) {	        case 0x0:	            return '0';	        case 0x1:	            return '8';	        case 0x2:	            return '4';	        case 0x3:	            return 'c';	        case 0x4:	            return '2';	        case 0x5:	            return 'a';	        case 0x6:	            return '6';	        case 0x7:	            return 'e';	        case 0x8:	            return '1';	        case 0x9:	            return '9';	        case 0xA:	            return '5';	        case 0xB:	            return 'd';	        case 0xC:	            return '3';	        case 0xD:	            return 'b';	        case 0xE:	            return '7';	        case 0xF:	            return 'f';	        default:	            throw new IllegalArgumentException("nibble value not between 0 and 15: " + nibble);	    }	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
@Override	public String next() {	    if (hasNext()) {	        return tokens[tokenPos++];	    }	    throw new NoSuchElementException();	}
public static <T extends Comparable<? super T>> int compare(final T c1, final T c2, final boolean nullGreater) {	    if (c1 == c2) {	        return 0;	    } else if (c1 == null) {	        return nullGreater ? 1 : -1;	    } else if (c2 == null) {	        return nullGreater ? -1 : 1;	    }	    return c1.compareTo(c2);	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
@Override	public void setValue(final Number value) {	    this.value = value.floatValue();	}
@Override	public int hashCode() {	    return toHashCode();	}
public String getNewLineText() {	    return newLine;	}
@Override	public boolean translate(final int codepoint, final Writer out) throws IOException {	    if (between) {	        if (codepoint < below || codepoint > above) {	            return false;	        }	    } else {	        if (codepoint >= below && codepoint <= above) {	            return false;	        }	    }	    if (codepoint > 0xffff) {	        out.write(toUtf16Escape(codepoint));	    } else if (codepoint > 0xfff) {	        out.write("\\u" + hex(codepoint));	    } else if (codepoint > 0xff) {	        out.write("\\u0" + hex(codepoint));	    } else if (codepoint > 0xf) {	        out.write("\\u00" + hex(codepoint));	    } else {	        out.write("\\u000" + hex(codepoint));	    }	    return true;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static int indexOfIgnoreCase(final CharSequence str, final CharSequence searchStr, int startPos) {	    if (str == null || searchStr == null) {	        return INDEX_NOT_FOUND;	    }	    if (startPos < 0) {	        startPos = 0;	    }	    final int endLimit = str.length() - searchStr.length() + 1;	    if (startPos > endLimit) {	        return INDEX_NOT_FOUND;	    }	    if (searchStr.length() == 0) {	        return startPos;	    }	    for (int i = startPos; i < endLimit; i++) {	        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
protected String getSummaryObjectEndText() {	    return summaryObjectEndText;	}
public static String capitalize(final String str) {	    int strLen;	    if (str == null || (strLen = str.length()) == 0) {	        return str;	    }	    char firstChar = str.charAt(0);	    if (Character.isTitleCase(firstChar)) {	        return str;	    }	    return new StringBuilder(strLen).append(Character.toTitleCase(firstChar)).append(str.substring(1)).toString();	}
public int toComparison() {	    return comparison;	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
public boolean isEmpty() {	    return size == 0;	}
public static <E extends Enum<E>> boolean isValidEnum(final Class<E> enumClass, final String enumName) {	    if (enumName == null) {	        return false;	    }	    try {	        Enum.valueOf(enumClass, enumName);	        return true;	    } catch (final IllegalArgumentException ex) {	        return false;	    }	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static double toDouble(final String str, final double defaultValue) {	    if (str == null) {	        return defaultValue;	    }	    try {	        return Double.parseDouble(str);	    } catch (final NumberFormatException nfe) {	        return defaultValue;	    }	}
public static String chop(final String str) {	    if (str == null) {	        return null;	    }	    final int strLen = str.length();	    if (strLen < 2) {	        return EMPTY;	    }	    final int lastIdx = strLen - 1;	    final String ret = str.substring(0, lastIdx);	    final char last = str.charAt(lastIdx);	    if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {	        return ret.substring(0, lastIdx - 1);	    }	    return ret;	}
public static int reflectionHashCode(final Object object, final String... excludeFields) {	    return reflectionHashCode(17, 37, object, false, null, excludeFields);	}
protected String getSummaryObjectEndText() {	    return summaryObjectEndText;	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
public String getNullText() {	    return nullText;	}
public static void reverse(final boolean[] array) {	    if (array == null) {	        return;	    }	    int i = 0;	    int j = array.length - 1;	    boolean tmp;	    while (j > i) {	        tmp = array[j];	        array[j] = array[i];	        array[i] = tmp;	        j--;	        i++;	    }	}
public static float max(final float a, final float b) {	    if (Float.isNaN(a)) {	        return b;	    } else if (Float.isNaN(b)) {	        return a;	    } else {	        return Math.max(a, b);	    }	}
public static Boolean or(final Boolean... array) {	    if (array == null) {	        throw new IllegalArgumentException("The Array must not be null");	    }	    if (array.length == 0) {	        throw new IllegalArgumentException("Array is empty");	    }	    try {	        final boolean[] primitive = ArrayUtils.toPrimitive(array);	        return or(primitive) ? Boolean.TRUE : Boolean.FALSE;	    } catch (final NullPointerException ex) {	        throw new IllegalArgumentException("The array must not contain any null elements");	    }	}
protected boolean isUseFieldNames() {	    return useFieldNames;	}
public static String right(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(str.length() - len);	}
public void decrement() {	    value--;	}
public static <T> T notNull(final T object, final String message, final Object... values) {	    if (object == null) {	        throw new NullPointerException(String.format(message, values));	    }	    return object;	}
protected boolean isDefaultFullDetail() {	    return defaultFullDetail;	}
public static boolean isNumeric(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isDigit(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
@Override	public final void applyPattern(final String pattern) {	    if (registry == null) {	        super.applyPattern(pattern);	        toPattern = super.toPattern();	        return;	    }	    final ArrayList<Format> foundFormats = new ArrayList<Format>();	    final ArrayList<String> foundDescriptions = new ArrayList<String>();	    final StringBuilder stripCustom = new StringBuilder(pattern.length());	    final ParsePosition pos = new ParsePosition(0);	    final char[] c = pattern.toCharArray();	    int fmtCount = 0;	    while (pos.getIndex() < pattern.length()) {	        switch(c[pos.getIndex()]) {	            case QUOTE:	                appendQuotedString(pattern, pos, stripCustom, true);	                break;	            case START_FE:	                fmtCount++;	                seekNonWs(pattern, pos);	                final int start = pos.getIndex();	                final int index = readArgumentIndex(pattern, next(pos));	                stripCustom.append(START_FE).append(index);	                seekNonWs(pattern, pos);	                Format format = null;	                String formatDescription = null;	                if (c[pos.getIndex()] == START_FMT) {	                    formatDescription = parseFormatDescription(pattern, next(pos));	                    format = getFormat(formatDescription);	                    if (format == null) {	                        stripCustom.append(START_FMT).append(formatDescription);	                    }	                }	                foundFormats.add(format);	                foundDescriptions.add(format == null ? null : formatDescription);	                Validate.isTrue(foundFormats.size() == fmtCount);	                Validate.isTrue(foundDescriptions.size() == fmtCount);	                if (c[pos.getIndex()] != END_FE) {	                    throw new IllegalArgumentException("Unreadable format element at position " + start);	                }	            default:	                stripCustom.append(c[pos.getIndex()]);	                next(pos);	        }	    }	    super.applyPattern(stripCustom.toString());	    toPattern = insertFormats(super.toPattern(), foundDescriptions);	    if (containsElements(foundFormats)) {	        final Format[] origFormats = getFormats();	        int i = 0;	        for (final Iterator<Format> it = foundFormats.iterator(); it.hasNext(); i++) {	            final Format f = it.next();	            if (f != null) {	                origFormats[i] = f;	            }	        }	        super.setFormats(origFormats);	    }	}
protected String getSizeEndText() {	    return sizeEndText;	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
private static Object add(final Object array, final int index, final Object element, final Class<?> clss) {	    if (array == null) {	        if (index != 0) {	            throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");	        }	        final Object joinedArray = Array.newInstance(clss, 1);	        Array.set(joinedArray, 0, element);	        return joinedArray;	    }	    final int length = Array.getLength(array);	    if (index > length || index < 0) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(clss, length + 1);	    System.arraycopy(array, 0, result, 0, index);	    Array.set(result, index, element);	    if (index < length) {	        System.arraycopy(array, index, result, index + 1, length - index);	    }	    return result;	}
public static CharRange isNotIn(final char start, final char end) {	    return new CharRange(start, end, true);	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static boolean truncatedEquals(final Date date1, final Date date2, final int field) {	    return truncatedCompareTo(date1, date2, field) == 0;	}
public static boolean isAsciiAlpha(final char ch) {	    return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z');	}
@Override	public void setValue(final Number value) {	    this.value = value.shortValue();	}
public Builder namingPattern(final String pattern) {	    if (pattern == null) {	        throw new NullPointerException("Naming pattern must not be null!");	    }	    namingPattern = pattern;	    return this;	}
protected String getContentEnd() {	    return contentEnd;	}
protected String getSummaryObjectStartText() {	    return summaryObjectStartText;	}
private static boolean endsWith(final CharSequence str, final CharSequence suffix, final boolean ignoreCase) {	    if (str == null || suffix == null) {	        return str == null && suffix == null;	    }	    if (suffix.length() > str.length()) {	        return false;	    }	    final int strOffset = str.length() - suffix.length();	    return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());	}
static void unregister(final Object lhs, final Object rhs) {	    Set<Pair<IDKey, IDKey>> registry = getRegistry();	    if (registry != null) {	        final Pair<IDKey, IDKey> pair = getRegisterPair(lhs, rhs);	        registry.remove(pair);	        synchronized (EqualsBuilder.class) {	            registry = getRegistry();	            if (registry != null && registry.isEmpty()) {	                REGISTRY.remove();	            }	        }	    }	}
public boolean atLeast(final JavaVersion requiredVersion) {	    return this.value >= requiredVersion.value;	}
public static final String escapeJava(final String input) {	    return ESCAPE_JAVA.translate(input);	}
public static Fraction getReducedFraction(int numerator, int denominator) {	    if (denominator == 0) {	        throw new ArithmeticException("The denominator must not be zero");	    }	    if (numerator == 0) {	        return ZERO;	    }	    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {	        numerator /= 2;	        denominator /= 2;	    }	    if (denominator < 0) {	        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {	            throw new ArithmeticException("overflow: can't negate");	        }	        numerator = -numerator;	        denominator = -denominator;	    }	    final int gcd = greatestCommonDivisor(numerator, denominator);	    numerator /= gcd;	    denominator /= gcd;	    return new Fraction(numerator, denominator);	}
public String getNewLineText() {	    return newLine;	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
public boolean isEmpty() {	    return size == 0;	}
public static <T extends Comparable<? super T>> T min(final T... values) {	    T result = null;	    if (values != null) {	        for (final T value : values) {	            if (compare(value, result, true) < 0) {	                result = value;	            }	        }	    }	    return result;	}
@Override	public int compare(final Object obj1, final Object obj2) {	    return ((Comparable) obj1).compareTo(obj2);	}
public static String right(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(str.length() - len);	}
@Override	public int previousIndex() {	    return tokenPos - 1;	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public static String toString(final Character ch) {	    if (ch == null) {	        return null;	    }	    return toString(ch.charValue());	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
synchronized void endOfPeriod() {	    lastCallsPerPeriod = acquireCount;	    totalAcquireCount += acquireCount;	    periodCount++;	    acquireCount = 0;	    notifyAll();	}
public static StrMatcher charSetMatcher(final String chars) {	    if (StringUtils.isEmpty(chars)) {	        return NONE_MATCHER;	    }	    if (chars.length() == 1) {	        return new CharMatcher(chars.charAt(0));	    }	    return new CharSetMatcher(chars.toCharArray());	}
public static boolean isAlphanumeric(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetterOrDigit(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public int toHashCode() {	    return iTotal;	}
protected String getSummaryObjectStartText() {	    return summaryObjectStartText;	}
public StrBuilder appendWithSeparators(final Iterator<?> it, String separator) {	    if (it != null) {	        separator = ObjectUtils.toString(separator);	        while (it.hasNext()) {	            append(it.next());	            if (it.hasNext()) {	                append(separator);	            }	        }	    }	    return this;	}
private static boolean startsWith(final CharSequence str, final CharSequence prefix, final boolean ignoreCase) {	    if (str == null || prefix == null) {	        return str == null && prefix == null;	    }	    if (prefix.length() > str.length()) {	        return false;	    }	    return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());	}
public static boolean containsWhitespace(final CharSequence seq) {	    if (isEmpty(seq)) {	        return false;	    }	    final int strLen = seq.length();	    for (int i = 0; i < strLen; i++) {	        if (Character.isWhitespace(seq.charAt(i))) {	            return true;	        }	    }	    return false;	}
public static char binaryToHexDigit(final boolean[] src, final int srcPos) {	    if (src.length == 0) {	        throw new IllegalArgumentException("Cannot convert an empty array.");	    }	    if (src.length > srcPos + 3 && src[srcPos + 3]) {	        if (src.length > srcPos + 2 && src[srcPos + 2]) {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'f';	                } else {	                    return 'e';	                }	            } else {	                if (src[srcPos]) {	                    return 'd';	                } else {	                    return 'c';	                }	            }	        } else {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'b';	                } else {	                    return 'a';	                }	            } else {	                if (src[srcPos]) {	                    return '9';	                } else {	                    return '8';	                }	            }	        }	    } else {	        if (src.length > srcPos + 2 && src[srcPos + 2]) {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return '7';	                } else {	                    return '6';	                }	            } else {	                if (src[srcPos]) {	                    return '5';	                } else {	                    return '4';	                }	            }	        } else {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return '3';	                } else {	                    return '2';	                }	            } else {	                if (src[srcPos]) {	                    return '1';	                } else {	                    return '0';	                }	            }	        }	    }	}
public static boolean contains(final boolean[] array, final boolean valueToFind) {	    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;	}
@Override	public int hashCode() {	    final char[] buf = buffer;	    int hash = 0;	    for (int i = size - 1; i >= 0; i--) {	        hash = 31 * hash + buf[i];	    }	    return hash;	}
public StrBuilder deleteFirst(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, 1);	}
public static <T> Future<T> constantFuture(final T value) {	    return new ConstantFuture<T>(value);	}
public static int countMatches(final CharSequence str, final CharSequence sub) {	    if (isEmpty(str) || isEmpty(sub)) {	        return 0;	    }	    int count = 0;	    int idx = 0;	    while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND) {	        count++;	        idx += sub.length();	    }	    return count;	}
public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {	    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {	        return false;	    }	    return true;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public static boolean isAscii(final char ch) {	    return ch < 128;	}
@Override	public String toString() {	    return new String(buffer, 0, size);	}
public static boolean containsOnly(final CharSequence cs, final String validChars) {	    if (cs == null || validChars == null) {	        return false;	    }	    return containsOnly(cs, validChars.toCharArray());	}
@Override	public int length() {	    return size;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
protected boolean isFieldSeparatorAtStart() {	    return fieldSeparatorAtStart;	}
public static String substringBeforeLast(final String str, final String separator) {	    if (isEmpty(str) || isEmpty(separator)) {	        return str;	    }	    final int pos = str.lastIndexOf(separator);	    if (pos == INDEX_NOT_FOUND) {	        return str;	    }	    return str.substring(0, pos);	}
public boolean isNegated() {	    return negated;	}
@Override	public boolean ready() {	    return pos < StrBuilder.this.size();	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
@Override	public int length() {	    return size;	}
protected String getContentStart() {	    return contentStart;	}
protected String getSizeStartText() {	    return sizeStartText;	}
public static String removeStart(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (str.startsWith(remove)) {	        return str.substring(remove.length());	    }	    return str;	}
public static <T> Range<T> between(final T fromInclusive, final T toInclusive, final Comparator<T> comparator) {	    return new Range<T>(fromInclusive, toInclusive, comparator);	}
public static char toChar(final String str, final char defaultValue) {	    if (StringUtils.isEmpty(str)) {	        return defaultValue;	    }	    return str.charAt(0);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public void stop() {	    if (this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {	        throw new IllegalStateException("Stopwatch is not running. ");	    }	    if (this.runningState == STATE_RUNNING) {	        this.stopTime = System.nanoTime();	    }	    this.runningState = STATE_STOPPED;	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public int getNumerator() {	    return numerator;	}
public static boolean isAlpha(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
@Override	public String toString() {	    return new String(buffer, 0, size);	}
@Override	public int nextIndex() {	    return tokenPos;	}
public static Date addMinutes(final Date date, final int amount) {	    return add(date, Calendar.MINUTE, amount);	}
public static String[] splitByWholeSeparator(final String str, final String separator, final int max) {	    return splitByWholeSeparatorWorker(str, separator, max, false);	}
public int size() {	    return size;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public void setEnableSubstitutionInVariables(final boolean enableSubstitutionInVariables) {	    this.enableSubstitutionInVariables = enableSubstitutionInVariables;	}
public static boolean[] hexDigitToBinary(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return new boolean[] { false, false, false, false };	        case '1':	            return new boolean[] { true, false, false, false };	        case '2':	            return new boolean[] { false, true, false, false };	        case '3':	            return new boolean[] { true, true, false, false };	        case '4':	            return new boolean[] { false, false, true, false };	        case '5':	            return new boolean[] { true, false, true, false };	        case '6':	            return new boolean[] { false, true, true, false };	        case '7':	            return new boolean[] { true, true, true, false };	        case '8':	            return new boolean[] { false, false, false, true };	        case '9':	            return new boolean[] { true, false, false, true };	        case 'a':	        case 'A':	            return new boolean[] { false, true, false, true };	        case 'b':	        case 'B':	            return new boolean[] { true, true, false, true };	        case 'c':	        case 'C':	            return new boolean[] { false, false, true, true };	        case 'd':	        case 'D':	            return new boolean[] { true, false, true, true };	        case 'e':	        case 'E':	            return new boolean[] { false, true, true, true };	        case 'f':	        case 'F':	            return new boolean[] { true, true, true, true };	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public synchronized boolean isStarted() {	    return future != null;	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
@Override	public void reset() {	    pos = mark;	}
public static boolean isAllUpperCase(final CharSequence cs) {	    if (cs == null || isEmpty(cs)) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isUpperCase(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public int size() {	    return size;	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public static <T> T firstNonNull(final T... values) {	    if (values != null) {	        for (final T val : values) {	            if (val != null) {	                return val;	            }	        }	    }	    return null;	}
public boolean atLeast(final JavaVersion requiredVersion) {	    return this.value >= requiredVersion.value;	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static Fraction getFraction(String str) {	    if (str == null) {	        throw new IllegalArgumentException("The string must not be null");	    }	    int pos = str.indexOf('.');	    if (pos >= 0) {	        return getFraction(Double.parseDouble(str));	    }	    pos = str.indexOf(' ');	    if (pos > 0) {	        final int whole = Integer.parseInt(str.substring(0, pos));	        str = str.substring(pos + 1);	        pos = str.indexOf('/');	        if (pos < 0) {	            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");	        } else {	            final int numer = Integer.parseInt(str.substring(0, pos));	            final int denom = Integer.parseInt(str.substring(pos + 1));	            return getFraction(whole, numer, denom);	        }	    }	    pos = str.indexOf('/');	    if (pos < 0) {	        return getFraction(Integer.parseInt(str), 1);	    } else {	        final int numer = Integer.parseInt(str.substring(0, pos));	        final int denom = Integer.parseInt(str.substring(pos + 1));	        return getFraction(numer, denom);	    }	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public boolean isStartedBy(final T element) {	    if (element == null) {	        return false;	    }	    return comparator.compare(element, minimum) == 0;	}
public boolean isEmpty() {	    return size == 0;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
protected String getFieldNameValueSeparator() {	    return fieldNameValueSeparator;	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public static int indexOfDifference(final CharSequence... css) {	    if (css == null || css.length <= 1) {	        return INDEX_NOT_FOUND;	    }	    boolean anyStringNull = false;	    boolean allStringsNull = true;	    final int arrayLen = css.length;	    int shortestStrLen = Integer.MAX_VALUE;	    int longestStrLen = 0;	    for (int i = 0; i < arrayLen; i++) {	        if (css[i] == null) {	            anyStringNull = true;	            shortestStrLen = 0;	        } else {	            allStringsNull = false;	            shortestStrLen = Math.min(css[i].length(), shortestStrLen);	            longestStrLen = Math.max(css[i].length(), longestStrLen);	        }	    }	    if (allStringsNull || longestStrLen == 0 && !anyStringNull) {	        return INDEX_NOT_FOUND;	    }	    if (shortestStrLen == 0) {	        return 0;	    }	    int firstDiff = -1;	    for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {	        final char comparisonChar = css[0].charAt(stringPos);	        for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {	            if (css[arrayPos].charAt(stringPos) != comparisonChar) {	                firstDiff = stringPos;	                break;	            }	        }	        if (firstDiff != -1) {	            break;	        }	    }	    if (firstDiff == -1 && shortestStrLen != longestStrLen) {	        return shortestStrLen;	    }	    return firstDiff;	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public static String removeEndIgnoreCase(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (endsWithIgnoreCase(str, remove)) {	        return str.substring(0, str.length() - remove.length());	    }	    return str;	}
@Override	public int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd) {	    return buffer[pos] <= 32 ? 1 : 0;	}
public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (isEquals == false) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null || rhs == null) {	        this.setEquals(false);	        return this;	    }	    if (lhs.length != rhs.length) {	        this.setEquals(false);	        return this;	    }	    for (int i = 0; i < lhs.length && isEquals; ++i) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
int getFieldWidth() {	    return currentFormatField.length();	}
public static Character toCharacterObject(final String str) {	    if (StringUtils.isEmpty(str)) {	        return null;	    }	    return Character.valueOf(str.charAt(0));	}
public static String overlay(final String str, String overlay, int start, int end) {	    if (str == null) {	        return null;	    }	    if (overlay == null) {	        overlay = EMPTY;	    }	    final int len = str.length();	    if (start < 0) {	        start = 0;	    }	    if (start > len) {	        start = len;	    }	    if (end < 0) {	        end = 0;	    }	    if (end > len) {	        end = len;	    }	    if (start > end) {	        final int temp = start;	        start = end;	        end = temp;	    }	    return new StringBuilder(len + start - end + overlay.length() + 1).append(str.substring(0, start)).append(overlay).append(str.substring(end)).toString();	}
@Override	public double doubleValue() {	    return value;	}
protected String getSummaryObjectEndText() {	    return summaryObjectEndText;	}
public static <T extends CharSequence> T validIndex(final T chars, final int index) {	    return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, Integer.valueOf(index));	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
protected String getArrayEnd() {	    return arrayEnd;	}
public void reset() {	    this.isEquals = true;	}
public StrBuilder appendWithSeparators(final Iterator<?> it, String separator) {	    if (it != null) {	        separator = ObjectUtils.toString(separator);	        while (it.hasNext()) {	            append(it.next());	            if (it.hasNext()) {	                append(separator);	            }	        }	    }	    return this;	}
public static char binaryBeMsb0ToHexDigit(boolean[] src, int srcPos) {	    if (src.length == 0) {	        throw new IllegalArgumentException("Cannot convert an empty array.");	    }	    final int beSrcPos = src.length - 1 - srcPos;	    final int srcLen = Math.min(4, beSrcPos + 1);	    final boolean[] paddedSrc = new boolean[4];	    System.arraycopy(src, beSrcPos + 1 - srcLen, paddedSrc, 4 - srcLen, srcLen);	    src = paddedSrc;	    srcPos = 0;	    if (src[srcPos]) {	        if (src.length > srcPos + 1 && src[srcPos + 1]) {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'f';	                } else {	                    return 'e';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'd';	                } else {	                    return 'c';	                }	            }	        } else {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return 'b';	                } else {	                    return 'a';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '9';	                } else {	                    return '8';	                }	            }	        }	    } else {	        if (src.length > srcPos + 1 && src[srcPos + 1]) {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '7';	                } else {	                    return '6';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '5';	                } else {	                    return '4';	                }	            }	        } else {	            if (src.length > srcPos + 2 && src[srcPos + 2]) {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '3';	                } else {	                    return '2';	                }	            } else {	                if (src.length > srcPos + 3 && src[srcPos + 3]) {	                    return '1';	                } else {	                    return '0';	                }	            }	        }	    }	}
public static CharRange is(final char ch) {	    return new CharRange(ch, ch, false);	}
public static long getFragmentInSeconds(final Calendar calendar, final int fragment) {	    return getFragment(calendar, fragment, Calendar.SECOND);	}
public static String right(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(str.length() - len);	}
@Override	public void mark(final int readAheadLimit) {	    mark = pos;	}
@Override	public boolean equals(final Object obj) {	    if (obj == this) {	        return true;	    }	    if (obj instanceof Triple<?, ?, ?>) {	        final Triple<?, ?, ?> other = (Triple<?, ?, ?>) obj;	        return ObjectUtils.equals(getLeft(), other.getLeft()) && ObjectUtils.equals(getMiddle(), other.getMiddle()) && ObjectUtils.equals(getRight(), other.getRight());	    }	    return false;	}
public static String defaultString(final String str, final String defaultStr) {	    return str == null ? defaultStr : str;	}
public static <L, M, R> Triple<L, M, R> of(final L left, final M middle, final R right) {	    return new ImmutableTriple<L, M, R>(left, middle, right);	}
public synchronized int getAcquireCount() {	    return acquireCount;	}
@Override	public long longValue() {	    return value;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
static Set<Pair<IDKey, IDKey>> getRegistry() {	    return REGISTRY.get();	}
@Override	public StringBuffer format(final Calendar calendar, final StringBuffer buf) {	    return printer.format(calendar, buf);	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
public static String random(final int count, final char... chars) {	    if (chars == null) {	        return random(count, 0, 0, false, false, null, RANDOM);	    }	    return random(count, 0, chars.length, false, false, chars, RANDOM);	}
public static int indexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = Integer.MAX_VALUE;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.indexOf(str, search, 0);	        if (tmp == INDEX_NOT_FOUND) {	            continue;	        }	        if (tmp < ret) {	            ret = tmp;	        }	    }	    return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;	}
public int size() {	    return size;	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
public static int length(final CharSequence cs) {	    return cs == null ? 0 : cs.length();	}
@Override	public int hashCode() {	    return toHashCode();	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public String nextToken() {	    if (hasNext()) {	        return tokens[tokenPos++];	    }	    return null;	}
public static int indexOfType(final Throwable throwable, final Class<?> type, final int fromIndex) {	    return indexOf(throwable, type, fromIndex, true);	}
public StrSubstitutor setVariablePrefixMatcher(final StrMatcher prefixMatcher) {	    if (prefixMatcher == null) {	        throw new IllegalArgumentException("Variable prefix matcher must not be null!");	    }	    this.prefixMatcher = prefixMatcher;	    return this;	}
@Override	public String build() {	    return toString();	}
@Override	public String toString() {	    return StringUtils.repeat(this.value.toString(), this.count);	}
public static CharRange isNotIn(final char start, final char end) {	    return new CharRange(start, end, true);	}
public String getNullText() {	    return nullText;	}
public boolean isEmpty() {	    return size == 0;	}
public static String leftPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return leftPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return padStr.concat(str);	    } else if (pads < padLen) {	        return padStr.substring(0, pads).concat(str);	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return new String(padding).concat(str);	    }	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
public boolean isEquals() {	    return this.isEquals;	}
public static boolean isAlpha(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public int toComparison() {	    return comparison;	}
public static <T extends Comparable<? super T>> int compare(final T c1, final T c2, final boolean nullGreater) {	    if (c1 == c2) {	        return 0;	    } else if (c1 == null) {	        return nullGreater ? 1 : -1;	    } else if (c2 == null) {	        return nullGreater ? -1 : 1;	    }	    return c1.compareTo(c2);	}
public String toString(final String format) {	    return String.format(format, minimum, maximum, comparator);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public int size() {	    return size;	}
public StrTokenizer setEmptyTokenAsNull(final boolean emptyAsNull) {	    this.emptyAsNull = emptyAsNull;	    return this;	}
public Fraction pow(final int power) {	    if (power == 1) {	        return this;	    } else if (power == 0) {	        return ONE;	    } else if (power < 0) {	        if (power == Integer.MIN_VALUE) {	            return this.invert().pow(2).pow(-(power / 2));	        }	        return this.invert().pow(-power);	    } else {	        final Fraction f = this.multiplyBy(this);	        if (power % 2 == 0) {	            return f.pow(power / 2);	        } else {	            return f.pow(power / 2).multiplyBy(this);	        }	    }	}
public static String leftPad(final String str, final int size, String padStr) {	    if (str == null) {	        return null;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int padLen = padStr.length();	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    if (padLen == 1 && pads <= PAD_LIMIT) {	        return leftPad(str, size, padStr.charAt(0));	    }	    if (pads == padLen) {	        return padStr.concat(str);	    } else if (pads < padLen) {	        return padStr.substring(0, pads).concat(str);	    } else {	        final char[] padding = new char[pads];	        final char[] padChars = padStr.toCharArray();	        for (int i = 0; i < pads; i++) {	            padding[i] = padChars[i % padLen];	        }	        return new String(padding).concat(str);	    }	}
public boolean isNegated() {	    return negated;	}
public String getNullText() {	    return nullText;	}
public static boolean containsWhitespace(final CharSequence seq) {	    if (isEmpty(seq)) {	        return false;	    }	    final int strLen = seq.length();	    for (int i = 0; i < strLen; i++) {	        if (Character.isWhitespace(seq.charAt(i))) {	            return true;	        }	    }	    return false;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static String formatDurationWords(final long durationMillis, final boolean suppressLeadingZeroElements, final boolean suppressTrailingZeroElements) {	    String duration = formatDuration(durationMillis, "d' days 'H' hours 'm' minutes 's' seconds'");	    if (suppressLeadingZeroElements) {	        duration = " " + duration;	        String tmp = StringUtils.replaceOnce(duration, " 0 days", "");	        if (tmp.length() != duration.length()) {	            duration = tmp;	            tmp = StringUtils.replaceOnce(duration, " 0 hours", "");	            if (tmp.length() != duration.length()) {	                duration = tmp;	                tmp = StringUtils.replaceOnce(duration, " 0 minutes", "");	                duration = tmp;	                if (tmp.length() != duration.length()) {	                    duration = StringUtils.replaceOnce(tmp, " 0 seconds", "");	                }	            }	        }	        if (duration.length() != 0) {	            duration = duration.substring(1);	        }	    }	    if (suppressTrailingZeroElements) {	        String tmp = StringUtils.replaceOnce(duration, " 0 seconds", "");	        if (tmp.length() != duration.length()) {	            duration = tmp;	            tmp = StringUtils.replaceOnce(duration, " 0 minutes", "");	            if (tmp.length() != duration.length()) {	                duration = tmp;	                tmp = StringUtils.replaceOnce(duration, " 0 hours", "");	                if (tmp.length() != duration.length()) {	                    duration = StringUtils.replaceOnce(tmp, " 0 days", "");	                }	            }	        }	    }	    duration = " " + duration;	    duration = StringUtils.replaceOnce(duration, " 1 seconds", " 1 second");	    duration = StringUtils.replaceOnce(duration, " 1 minutes", " 1 minute");	    duration = StringUtils.replaceOnce(duration, " 1 hours", " 1 hour");	    duration = StringUtils.replaceOnce(duration, " 1 days", " 1 day");	    return duration.trim();	}
public static void writeStaticField(final Class<?> cls, final String fieldName, final Object value, final boolean forceAccess) throws IllegalAccessException {	    final Field field = getField(cls, fieldName, forceAccess);	    if (field == null) {	        throw new IllegalArgumentException("Cannot locate field " + fieldName + " on " + cls);	    }	    writeStaticField(field, value);	}
public static boolean isAlpha(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static boolean[] hexDigitMsb0ToBinary(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return new boolean[] { false, false, false, false };	        case '1':	            return new boolean[] { false, false, false, true };	        case '2':	            return new boolean[] { false, false, true, false };	        case '3':	            return new boolean[] { false, false, true, true };	        case '4':	            return new boolean[] { false, true, false, false };	        case '5':	            return new boolean[] { false, true, false, true };	        case '6':	            return new boolean[] { false, true, true, false };	        case '7':	            return new boolean[] { false, true, true, true };	        case '8':	            return new boolean[] { true, false, false, false };	        case '9':	            return new boolean[] { true, false, false, true };	        case 'a':	        case 'A':	            return new boolean[] { true, false, true, false };	        case 'b':	        case 'B':	            return new boolean[] { true, false, true, true };	        case 'c':	        case 'C':	            return new boolean[] { true, true, false, false };	        case 'd':	        case 'D':	            return new boolean[] { true, true, false, true };	        case 'e':	        case 'E':	            return new boolean[] { true, true, true, false };	        case 'f':	        case 'F':	            return new boolean[] { true, true, true, true };	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public static String[][] JAVA_CTRL_CHARS_ESCAPE() {	    return JAVA_CTRL_CHARS_ESCAPE.clone();	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
public int capacity() {	    return buffer.length;	}
public static String strip(String str, final String stripChars) {	    if (isEmpty(str)) {	        return str;	    }	    str = stripStart(str, stripChars);	    return stripEnd(str, stripChars);	}
public static Integer toIntegerObject(final Boolean bool, final Integer trueValue, final Integer falseValue, final Integer nullValue) {	    if (bool == null) {	        return nullValue;	    }	    return bool.booleanValue() ? trueValue : falseValue;	}
@Override	public TimeZone getTimeZone() {	    return timeZone;	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public static String formatDuration(long durationMillis, final String format, final boolean padWithZeros) {	    final Token[] tokens = lexx(format);	    int days = 0;	    int hours = 0;	    int minutes = 0;	    int seconds = 0;	    int milliseconds = 0;	    if (Token.containsTokenWithValue(tokens, d)) {	        days = (int) (durationMillis / DateUtils.MILLIS_PER_DAY);	        durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY);	    }	    if (Token.containsTokenWithValue(tokens, H)) {	        hours = (int) (durationMillis / DateUtils.MILLIS_PER_HOUR);	        durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR);	    }	    if (Token.containsTokenWithValue(tokens, m)) {	        minutes = (int) (durationMillis / DateUtils.MILLIS_PER_MINUTE);	        durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE);	    }	    if (Token.containsTokenWithValue(tokens, s)) {	        seconds = (int) (durationMillis / DateUtils.MILLIS_PER_SECOND);	        durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND);	    }	    if (Token.containsTokenWithValue(tokens, S)) {	        milliseconds = (int) durationMillis;	    }	    return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros);	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
@Override	public DefaultExceptionContext setContextValue(final String label, final Object value) {	    for (final Iterator<Pair<String, Object>> iter = contextValues.iterator(); iter.hasNext(); ) {	        final Pair<String, Object> p = iter.next();	        if (StringUtils.equals(label, p.getKey())) {	            iter.remove();	        }	    }	    addContextValue(label, value);	    return this;	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static boolean isAlpha(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] result = new boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        final Boolean b = array[i];	        result[i] = (b == null ? valueForNull : b.booleanValue());	    }	    return result;	}
@Override	public int intValue() {	    return value;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static boolean isAlpha(final CharSequence cs) {	    if (cs == null || cs.length() == 0) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isLetter(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) {	    if (cs instanceof String && substring instanceof String) {	        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);	    } else {	        int index1 = thisStart;	        int index2 = start;	        int tmpLen = length;	        while (tmpLen-- > 0) {	            char c1 = cs.charAt(index1++);	            char c2 = substring.charAt(index2++);	            if (c1 == c2) {	                continue;	            }	            if (!ignoreCase) {	                return false;	            }	            if (Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {	                return false;	            }	        }	        return true;	    }	}
public final void translate(final CharSequence input, final Writer out) throws IOException {	    if (out == null) {	        throw new IllegalArgumentException("The Writer must not be null");	    }	    if (input == null) {	        return;	    }	    int pos = 0;	    final int len = input.length();	    while (pos < len) {	        final int consumed = translate(input, pos, out);	        if (consumed == 0) {	            final char[] c = Character.toChars(Character.codePointAt(input, pos));	            out.write(c);	            pos += c.length;	            continue;	        }	        for (int pt = 0; pt < consumed; pt++) {	            pos += Character.charCount(Character.codePointAt(input, pt));	        }	    }	}
@Override	public String toString() {	    if (this.getObject() == null) {	        return this.getStyle().getNullText();	    }	    Class<?> clazz = this.getObject().getClass();	    this.appendFieldsIn(clazz);	    while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {	        clazz = clazz.getSuperclass();	        this.appendFieldsIn(clazz);	    }	    return super.toString();	}
public boolean replaceIn(final StrBuilder source, final int offset, final int length) {	    if (source == null) {	        return false;	    }	    return substitute(source, offset, length);	}
@Override	public void write(final String str, final int off, final int len) {	    StrBuilder.this.append(str, off, len);	}
public final void translate(final CharSequence input, final Writer out) throws IOException {	    if (out == null) {	        throw new IllegalArgumentException("The Writer must not be null");	    }	    if (input == null) {	        return;	    }	    int pos = 0;	    final int len = input.length();	    while (pos < len) {	        final int consumed = translate(input, pos, out);	        if (consumed == 0) {	            final char[] c = Character.toChars(Character.codePointAt(input, pos));	            out.write(c);	            pos += c.length;	            continue;	        }	        for (int pt = 0; pt < consumed; pt++) {	            pos += Character.charCount(Character.codePointAt(input, pt));	        }	    }	}
public static <L, M, R> Triple<L, M, R> of(final L left, final M middle, final R right) {	    return new ImmutableTriple<L, M, R>(left, middle, right);	}
public static String defaultString(final String str, final String defaultStr) {	    return str == null ? defaultStr : str;	}
public Boolean toBoolean() {	    return Boolean.valueOf(booleanValue());	}
public static String repeat(final char ch, final int repeat) {	    final char[] buf = new char[repeat];	    for (int i = repeat - 1; i >= 0; i--) {	        buf[i] = ch;	    }	    return new String(buf);	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static final String escapeJava(final String input) {	    return ESCAPE_JAVA.translate(input);	}
@Override	public void setSummaryObjectStartText(final String summaryObjectStartText) {	    super.setSummaryObjectStartText(summaryObjectStartText);	}
@Override	public String toString() {	    return new String(buffer, 0, size);	}
public static float min(final float a, final float b) {	    if (Float.isNaN(a)) {	        return b;	    } else if (Float.isNaN(b)) {	        return a;	    } else {	        return Math.min(a, b);	    }	}
public static String wrap(final String str, int wrapLength, String newLineStr, final boolean wrapLongWords) {	    if (str == null) {	        return null;	    }	    if (newLineStr == null) {	        newLineStr = SystemUtils.LINE_SEPARATOR;	    }	    if (wrapLength < 1) {	        wrapLength = 1;	    }	    final int inputLineLength = str.length();	    int offset = 0;	    final StringBuilder wrappedLine = new StringBuilder(inputLineLength + 32);	    while (inputLineLength - offset > wrapLength) {	        if (str.charAt(offset) == ' ') {	            offset++;	            continue;	        }	        int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);	        if (spaceToWrapAt >= offset) {	            wrappedLine.append(str.substring(offset, spaceToWrapAt));	            wrappedLine.append(newLineStr);	            offset = spaceToWrapAt + 1;	        } else {	            if (wrapLongWords) {	                wrappedLine.append(str.substring(offset, wrapLength + offset));	                wrappedLine.append(newLineStr);	                offset += wrapLength;	            } else {	                spaceToWrapAt = str.indexOf(' ', wrapLength + offset);	                if (spaceToWrapAt >= 0) {	                    wrappedLine.append(str.substring(offset, spaceToWrapAt));	                    wrappedLine.append(newLineStr);	                    offset = spaceToWrapAt + 1;	                } else {	                    wrappedLine.append(str.substring(offset));	                    offset = inputLineLength;	                }	            }	        }	    }	    wrappedLine.append(str.substring(offset));	    return wrappedLine.toString();	}
public static String appendIfMissing(final String str, final CharSequence suffix, final CharSequence... suffixes) {	    return appendIfMissing(str, suffix, false, suffixes);	}
@Override	public int length() {	    return size;	}
public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {	    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {	        return false;	    }	    return true;	}
@Override	public T get() throws ConcurrentException {	    try {	        return getFuture().get();	    } catch (final ExecutionException execex) {	        ConcurrentUtils.handleCause(execex);	        return null;	    } catch (final InterruptedException iex) {	        Thread.currentThread().interrupt();	        throw new ConcurrentException(iex);	    }	}
public void getChars(final int startIndex, final int endIndex, final char[] destination, final int destinationIndex) {	    if (startIndex < 0) {	        throw new StringIndexOutOfBoundsException(startIndex);	    }	    if (endIndex < 0 || endIndex > length()) {	        throw new StringIndexOutOfBoundsException(endIndex);	    }	    if (startIndex > endIndex) {	        throw new StringIndexOutOfBoundsException("end < start");	    }	    System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
static String getPatternForStyle(final Integer dateStyle, final Integer timeStyle, final Locale locale) {	    final MultipartKey key = new MultipartKey(dateStyle, timeStyle, locale);	    String pattern = cDateTimeInstanceCache.get(key);	    if (pattern == null) {	        try {	            DateFormat formatter;	            if (dateStyle == null) {	                formatter = DateFormat.getTimeInstance(timeStyle.intValue(), locale);	            } else if (timeStyle == null) {	                formatter = DateFormat.getDateInstance(dateStyle.intValue(), locale);	            } else {	                formatter = DateFormat.getDateTimeInstance(dateStyle.intValue(), timeStyle.intValue(), locale);	            }	            pattern = ((SimpleDateFormat) formatter).toPattern();	            final String previous = cDateTimeInstanceCache.putIfAbsent(key, pattern);	            if (previous != null) {	                pattern = previous;	            }	        } catch (final ClassCastException ex) {	            throw new IllegalArgumentException("No date time pattern for locale: " + locale);	        }	    }	    return pattern;	}
public static String center(String str, final int size, String padStr) {	    if (str == null || size <= 0) {	        return str;	    }	    if (isEmpty(padStr)) {	        padStr = SPACE;	    }	    final int strLen = str.length();	    final int pads = size - strLen;	    if (pads <= 0) {	        return str;	    }	    str = leftPad(str, strLen + pads / 2, padStr);	    str = rightPad(str, size, padStr);	    return str;	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
protected String getNullText() {	    return nullText;	}
public static int getLevenshteinDistance(CharSequence s, CharSequence t, final int threshold) {	    if (s == null || t == null) {	        throw new IllegalArgumentException("Strings must not be null");	    }	    if (threshold < 0) {	        throw new IllegalArgumentException("Threshold must not be negative");	    }	    int n = s.length();	    int m = t.length();	    if (n == 0) {	        return m <= threshold ? m : -1;	    } else if (m == 0) {	        return n <= threshold ? n : -1;	    }	    if (n > m) {	        final CharSequence tmp = s;	        s = t;	        t = tmp;	        n = m;	        m = t.length();	    }	    int[] p = new int[n + 1];	    int[] d = new int[n + 1];	    int[] _d;	    final int boundary = Math.min(n, threshold) + 1;	    for (int i = 0; i < boundary; i++) {	        p[i] = i;	    }	    Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);	    Arrays.fill(d, Integer.MAX_VALUE);	    for (int j = 1; j <= m; j++) {	        final char t_j = t.charAt(j - 1);	        d[0] = j;	        final int min = Math.max(1, j - threshold);	        final int max = Math.min(n, j + threshold);	        if (min > max) {	            return -1;	        }	        if (min > 1) {	            d[min - 1] = Integer.MAX_VALUE;	        }	        for (int i = min; i <= max; i++) {	            if (s.charAt(i - 1) == t_j) {	                d[i] = p[i - 1];	            } else {	                d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);	            }	        }	        _d = p;	        p = d;	        d = _d;	    }	    if (p[n] <= threshold) {	        return p[n];	    }	    return -1;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public int size() {	    return size;	}
protected boolean isDefaultFullDetail() {	    return defaultFullDetail;	}
protected boolean isArrayContentDetail() {	    return arrayContentDetail;	}
public static Character toCharacterObject(final String str) {	    if (StringUtils.isEmpty(str)) {	        return null;	    }	    return Character.valueOf(str.charAt(0));	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
@Override	public int hashCode() {	    return toHashCode();	}
public static void isTrue(final boolean expression) {	    if (expression == false) {	        throw new IllegalArgumentException(DEFAULT_IS_TRUE_EX_MESSAGE);	    }	}
protected void appendCyclicObject(final StringBuffer buffer, final String fieldName, final Object value) {	    ObjectUtils.identityToString(buffer, value);	}
public static long shortArrayToLong(final short[] src, final int srcPos, final long dstInit, final int dstPos, final int nShorts) {	    if ((src.length == 0 && srcPos == 0) || 0 == nShorts) {	        return dstInit;	    }	    if ((nShorts - 1) * 16 + dstPos >= 64) {	        throw new IllegalArgumentException("(nShorts-1)*16+dstPos is greather or equal to than 64");	    }	    long out = dstInit;	    int shift = 0;	    for (int i = 0; i < nShorts; i++) {	        shift = i * 16 + dstPos;	        final long bits = (0xffffL & src[i + srcPos]) << shift;	        final long mask = 0xffffL << shift;	        out = (out & ~mask) | bits;	    }	    return out;	}
public static byte[] uuidToByteArray(final UUID src, final byte[] dst, final int dstPos, final int nBytes) {	    if (0 == nBytes) {	        return dst;	    }	    if (nBytes > 16) {	        throw new IllegalArgumentException("nBytes is greather than 16");	    }	    longToByteArray(src.getMostSignificantBits(), 0, dst, dstPos, nBytes > 8 ? 8 : nBytes);	    if (nBytes >= 8) {	        longToByteArray(src.getLeastSignificantBits(), 0, dst, dstPos + 8, nBytes - 8);	    }	    return dst;	}
public String getNullText() {	    return nullText;	}
@Override	public String toString() {	    return new String(buffer, 0, size);	}
@Override	public int length() {	    return size;	}
public static Date addDays(final Date date, final int amount) {	    return add(date, Calendar.DAY_OF_MONTH, amount);	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
@Override	public boolean equals(final Object obj) {	    return obj instanceof MutableDouble && Double.doubleToLongBits(((MutableDouble) obj).value) == Double.doubleToLongBits(value);	}
public int capacity() {	    return buffer.length;	}
public void appendToString(final StringBuffer buffer, final String toString) {	    if (toString != null) {	        final int pos1 = toString.indexOf(contentStart) + contentStart.length();	        final int pos2 = toString.lastIndexOf(contentEnd);	        if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {	            final String data = toString.substring(pos1, pos2);	            if (fieldSeparatorAtStart) {	                removeLastFieldSeparator(buffer);	            }	            buffer.append(data);	            appendFieldSeparator(buffer);	        }	    }	}
public static int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);	}
public static FastDateFormat getTimeInstance(final int style, final TimeZone timeZone, final Locale locale) {	    return cache.getTimeInstance(style, timeZone, locale);	}
public static Formatter append(final CharSequence seq, final Formatter formatter, final int flags, final int width, final int precision, final char padChar, final CharSequence ellipsis) {	    Validate.isTrue(ellipsis == null || precision < 0 || ellipsis.length() <= precision, "Specified ellipsis '%1$s' exceeds precision of %2$s", ellipsis, Integer.valueOf(precision));	    final StringBuilder buf = new StringBuilder(seq);	    if (precision >= 0 && precision < seq.length()) {	        final CharSequence _ellipsis = ObjectUtils.defaultIfNull(ellipsis, StringUtils.EMPTY);	        buf.replace(precision - _ellipsis.length(), seq.length(), _ellipsis.toString());	    }	    final boolean leftJustify = (flags & LEFT_JUSTIFY) == LEFT_JUSTIFY;	    for (int i = buf.length(); i < width; i++) {	        buf.insert(leftJustify ? i : 0, padChar);	    }	    formatter.format(buf.toString());	    return formatter;	}
public int capacity() {	    return buffer.length;	}
@Override	public int compareTo(final MutableInt other) {	    final int anotherVal = other.value;	    return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);	}
public HashCodeBuilder appendSuper(final int superHashCode) {	    iTotal = iTotal * iConstant + superHashCode;	    return this;	}
@Override	public double doubleValue() {	    return (double) numerator / (double) denominator;	}
public String leftString(final int length) {	    if (length <= 0) {	        return "";	    } else if (length >= size) {	        return new String(buffer, 0, size);	    } else {	        return new String(buffer, 0, length);	    }	}
int adjustYear(final int twoDigitYear) {	    final int trial = twoDigitYear + thisYear - thisYear % 100;	    if (trial < thisYear + 20) {	        return trial;	    }	    return trial - 100;	}
public ToStringBuilder append(final String fieldName, final short[] array, final boolean fullDetail) {	    style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));	    return this;	}
public String getNullText() {	    return nullText;	}
public static boolean toBoolean(final String str, final String trueString, final String falseString) {	    if (str == trueString) {	        return true;	    } else if (str == falseString) {	        return false;	    } else if (str != null) {	        if (str.equals(trueString)) {	            return true;	        } else if (str.equals(falseString)) {	            return false;	        }	    }	    throw new IllegalArgumentException("The String did not match either specified value");	}
@Override	public Object parseObject(final String source, final ParsePosition pos) {	    return parser.parseObject(source, pos);	}
public String getNullText() {	    return nullText;	}
public void reset() {	    this.isEquals = true;	}
public void subtract(final Number operand) {	    this.value -= operand.intValue();	}
public int getDenominator() {	    return denominator;	}
public boolean isEmpty() {	    return size == 0;	}
@Override	public Date parse(final String source, final ParsePosition pos) {	    final int offset = pos.getIndex();	    final Matcher matcher = parsePattern.matcher(source.substring(offset));	    if (!matcher.lookingAt()) {	        return null;	    }	    final Calendar cal = Calendar.getInstance(timeZone, locale);	    cal.clear();	    for (int i = 0; i < strategies.length; ) {	        final Strategy strategy = strategies[i++];	        strategy.setCalendar(this, cal, matcher.group(i));	    }	    pos.setIndex(offset + matcher.end());	    return cal.getTime();	}
public static String overlay(final String str, String overlay, int start, int end) {	    if (str == null) {	        return null;	    }	    if (overlay == null) {	        overlay = EMPTY;	    }	    final int len = str.length();	    if (start < 0) {	        start = 0;	    }	    if (start > len) {	        start = len;	    }	    if (end < 0) {	        end = 0;	    }	    if (end > len) {	        end = len;	    }	    if (start > end) {	        final int temp = start;	        start = end;	        end = temp;	    }	    return new StringBuilder(len + start - end + overlay.length() + 1).append(str.substring(0, start)).append(overlay).append(str.substring(end)).toString();	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public String getNewLineText() {	    return newLine;	}
public static String toString(final Formattable formattable) {	    return String.format(SIMPLEST_FORMAT, formattable);	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public StrTokenizer setDelimiterChar(final char delim) {	    return setDelimiterMatcher(StrMatcher.charMatcher(delim));	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
public static int truncatedCompareTo(final Date date1, final Date date2, final int field) {	    final Date truncatedDate1 = truncate(date1, field);	    final Date truncatedDate2 = truncate(date2, field);	    return truncatedDate1.compareTo(truncatedDate2);	}
public static int indexOfIgnoreCase(final CharSequence str, final CharSequence searchStr, int startPos) {	    if (str == null || searchStr == null) {	        return INDEX_NOT_FOUND;	    }	    if (startPos < 0) {	        startPos = 0;	    }	    final int endLimit = str.length() - searchStr.length() + 1;	    if (startPos > endLimit) {	        return INDEX_NOT_FOUND;	    }	    if (searchStr.length() == 0) {	        return startPos;	    }	    for (int i = startPos; i < endLimit; i++) {	        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
@Override	public TimeZone getTimeZone() {	    return timeZone;	}
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        return INDEX_NOT_FOUND;	    } else if (startIndex >= array.length) {	        startIndex = array.length - 1;	    }	    for (int i = startIndex; i >= 0; i--) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static int indexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = Integer.MAX_VALUE;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.indexOf(str, search, 0);	        if (tmp == INDEX_NOT_FOUND) {	            continue;	        }	        if (tmp < ret) {	            ret = tmp;	        }	    }	    return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;	}
public static String[] stripAll(final String[] strs, final String stripChars) {	    int strsLen;	    if (strs == null || (strsLen = strs.length) == 0) {	        return strs;	    }	    final String[] newArr = new String[strsLen];	    for (int i = 0; i < strsLen; i++) {	        newArr[i] = strip(strs[i], stripChars);	    }	    return newArr;	}
public StrBuilder deleteAll(final StrMatcher matcher) {	    return replace(matcher, null, 0, size, -1);	}
public static String left(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(0, len);	}
public int size() {	    return size;	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
@Override	public T get() throws ConcurrentException {	    try {	        return getFuture().get();	    } catch (final ExecutionException execex) {	        ConcurrentUtils.handleCause(execex);	        return null;	    } catch (final InterruptedException iex) {	        Thread.currentThread().interrupt();	        throw new ConcurrentException(iex);	    }	}
public static int indexOfDifference(final CharSequence... css) {	    if (css == null || css.length <= 1) {	        return INDEX_NOT_FOUND;	    }	    boolean anyStringNull = false;	    boolean allStringsNull = true;	    final int arrayLen = css.length;	    int shortestStrLen = Integer.MAX_VALUE;	    int longestStrLen = 0;	    for (int i = 0; i < arrayLen; i++) {	        if (css[i] == null) {	            anyStringNull = true;	            shortestStrLen = 0;	        } else {	            allStringsNull = false;	            shortestStrLen = Math.min(css[i].length(), shortestStrLen);	            longestStrLen = Math.max(css[i].length(), longestStrLen);	        }	    }	    if (allStringsNull || longestStrLen == 0 && !anyStringNull) {	        return INDEX_NOT_FOUND;	    }	    if (shortestStrLen == 0) {	        return 0;	    }	    int firstDiff = -1;	    for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {	        final char comparisonChar = css[0].charAt(stringPos);	        for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {	            if (css[arrayPos].charAt(stringPos) != comparisonChar) {	                firstDiff = stringPos;	                break;	            }	        }	        if (firstDiff != -1) {	            break;	        }	    }	    if (firstDiff == -1 && shortestStrLen != longestStrLen) {	        return shortestStrLen;	    }	    return firstDiff;	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public static int toInteger(final Boolean bool, final int trueValue, final int falseValue, final int nullValue) {	    if (bool == null) {	        return nullValue;	    }	    return bool.booleanValue() ? trueValue : falseValue;	}
public static Object invokeMethod(final Object object, final String methodName, Object[] args, Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {	    if (parameterTypes == null) {	        parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;	    }	    if (args == null) {	        args = ArrayUtils.EMPTY_OBJECT_ARRAY;	    }	    final Method method = getMatchingAccessibleMethod(object.getClass(), methodName, parameterTypes);	    if (method == null) {	        throw new NoSuchMethodException("No such accessible method: " + methodName + "() on object: " + object.getClass().getName());	    }	    return method.invoke(object, args);	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public static boolean contains(final boolean[] array, final boolean valueToFind) {	    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;	}
public HashCodeBuilder appendSuper(final int superHashCode) {	    iTotal = iTotal * iConstant + superHashCode;	    return this;	}
public static String remove(final String str, final char remove) {	    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {	        return str;	    }	    final char[] chars = str.toCharArray();	    int pos = 0;	    for (int i = 0; i < chars.length; i++) {	        if (chars[i] != remove) {	            chars[pos++] = chars[i];	        }	    }	    return new String(chars, 0, pos);	}
public static String replaceChars(final String str, final String searchChars, String replaceChars) {	    if (isEmpty(str) || isEmpty(searchChars)) {	        return str;	    }	    if (replaceChars == null) {	        replaceChars = EMPTY;	    }	    boolean modified = false;	    final int replaceCharsLength = replaceChars.length();	    final int strLength = str.length();	    final StringBuilder buf = new StringBuilder(strLength);	    for (int i = 0; i < strLength; i++) {	        final char ch = str.charAt(i);	        final int index = searchChars.indexOf(ch);	        if (index >= 0) {	            modified = true;	            if (index < replaceCharsLength) {	                buf.append(replaceChars.charAt(index));	            }	        } else {	            buf.append(ch);	        }	    }	    if (modified) {	        return buf.toString();	    }	    return str;	}
static Throwable checkedException(final Throwable ex) {	    if (ex != null && !(ex instanceof RuntimeException) && !(ex instanceof Error)) {	        return ex;	    } else {	        throw new IllegalArgumentException("Not a checked exception: " + ex);	    }	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static int getLevenshteinDistance(CharSequence s, CharSequence t, final int threshold) {	    if (s == null || t == null) {	        throw new IllegalArgumentException("Strings must not be null");	    }	    if (threshold < 0) {	        throw new IllegalArgumentException("Threshold must not be negative");	    }	    int n = s.length();	    int m = t.length();	    if (n == 0) {	        return m <= threshold ? m : -1;	    } else if (m == 0) {	        return n <= threshold ? n : -1;	    }	    if (n > m) {	        final CharSequence tmp = s;	        s = t;	        t = tmp;	        n = m;	        m = t.length();	    }	    int[] p = new int[n + 1];	    int[] d = new int[n + 1];	    int[] _d;	    final int boundary = Math.min(n, threshold) + 1;	    for (int i = 0; i < boundary; i++) {	        p[i] = i;	    }	    Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);	    Arrays.fill(d, Integer.MAX_VALUE);	    for (int j = 1; j <= m; j++) {	        final char t_j = t.charAt(j - 1);	        d[0] = j;	        final int min = Math.max(1, j - threshold);	        final int max = Math.min(n, j + threshold);	        if (min > max) {	            return -1;	        }	        if (min > 1) {	            d[min - 1] = Integer.MAX_VALUE;	        }	        for (int i = min; i <= max; i++) {	            if (s.charAt(i - 1) == t_j) {	                d[i] = p[i - 1];	            } else {	                d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);	            }	        }	        _d = p;	        p = d;	        d = _d;	    }	    if (p[n] <= threshold) {	        return p[n];	    }	    return -1;	}
public static <T> T CONST(final T v) {	    return v;	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
public static String repeat(final char ch, final int repeat) {	    final char[] buf = new char[repeat];	    for (int i = repeat - 1; i >= 0; i--) {	        buf[i] = ch;	    }	    return new String(buf);	}
public int getDenominator() {	    return denominator;	}
protected boolean isUseShortClassName() {	    return useShortClassName;	}
@Override	public Thread newThread(final Runnable r) {	    final Thread t = getWrappedFactory().newThread(r);	    initializeThread(t);	    return t;	}
public boolean isEmpty() {	    return size == 0;	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static String upperCase(final String str, final Locale locale) {	    if (str == null) {	        return null;	    }	    return str.toUpperCase(locale);	}
public static boolean toBoolean(final String str, final String trueString, final String falseString) {	    if (str == trueString) {	        return true;	    } else if (str == falseString) {	        return false;	    } else if (str != null) {	        if (str.equals(trueString)) {	            return true;	        } else if (str.equals(falseString)) {	            return false;	        }	    }	    throw new IllegalArgumentException("The String did not match either specified value");	}
public static String formatDuration(long durationMillis, final String format, final boolean padWithZeros) {	    final Token[] tokens = lexx(format);	    int days = 0;	    int hours = 0;	    int minutes = 0;	    int seconds = 0;	    int milliseconds = 0;	    if (Token.containsTokenWithValue(tokens, d)) {	        days = (int) (durationMillis / DateUtils.MILLIS_PER_DAY);	        durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY);	    }	    if (Token.containsTokenWithValue(tokens, H)) {	        hours = (int) (durationMillis / DateUtils.MILLIS_PER_HOUR);	        durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR);	    }	    if (Token.containsTokenWithValue(tokens, m)) {	        minutes = (int) (durationMillis / DateUtils.MILLIS_PER_MINUTE);	        durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE);	    }	    if (Token.containsTokenWithValue(tokens, s)) {	        seconds = (int) (durationMillis / DateUtils.MILLIS_PER_SECOND);	        durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND);	    }	    if (Token.containsTokenWithValue(tokens, S)) {	        milliseconds = (int) durationMillis;	    }	    return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros);	}
public int capacity() {	    return buffer.length;	}
@Override	public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) {	    return formatter.format(obj, toAppendTo, pos);	}
public boolean isEmpty() {	    return size == 0;	}
public static Date parseDateStrictly(final String str, final Locale locale, final String... parsePatterns) throws ParseException {	    return parseDateWithLeniency(str, null, parsePatterns, false);	}
@Override	public String build() {	    return toString();	}
public static boolean endsWithAny(final CharSequence string, final CharSequence... searchStrings) {	    if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {	        return false;	    }	    for (final CharSequence searchString : searchStrings) {	        if (StringUtils.endsWith(string, searchString)) {	            return true;	        }	    }	    return false;	}
public int toComparison() {	    return comparison;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
@Override	public Date parse(final String source, final ParsePosition pos) {	    final int offset = pos.getIndex();	    final Matcher matcher = parsePattern.matcher(source.substring(offset));	    if (!matcher.lookingAt()) {	        return null;	    }	    final Calendar cal = Calendar.getInstance(timeZone, locale);	    cal.clear();	    for (int i = 0; i < strategies.length; ) {	        final Strategy strategy = strategies[i++];	        strategy.setCalendar(this, cal, matcher.group(i));	    }	    pos.setIndex(offset + matcher.end());	    return cal.getTime();	}
@Override	public int read(final char[] b, final int off, int len) {	    if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) {	        throw new IndexOutOfBoundsException();	    }	    if (len == 0) {	        return 0;	    }	    if (pos >= StrBuilder.this.size()) {	        return -1;	    }	    if (pos + len > size()) {	        len = StrBuilder.this.size() - pos;	    }	    StrBuilder.this.getChars(pos, pos + len, b, off);	    pos += len;	    return len;	}
@Override	public Date parse(final String source, final ParsePosition pos) {	    return parser.parse(source, pos);	}
public String getNullText() {	    return nullText;	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public static String toString(final byte[] bytes, final String charsetName) throws UnsupportedEncodingException {	    return charsetName == null ? new String(bytes) : new String(bytes, charsetName);	}
protected boolean isUseIdentityHashCode() {	    return useIdentityHashCode;	}
public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] result = new boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        final Boolean b = array[i];	        result[i] = (b == null ? valueForNull : b.booleanValue());	    }	    return result;	}
public static Fraction getFraction(String str) {	    if (str == null) {	        throw new IllegalArgumentException("The string must not be null");	    }	    int pos = str.indexOf('.');	    if (pos >= 0) {	        return getFraction(Double.parseDouble(str));	    }	    pos = str.indexOf(' ');	    if (pos > 0) {	        final int whole = Integer.parseInt(str.substring(0, pos));	        str = str.substring(pos + 1);	        pos = str.indexOf('/');	        if (pos < 0) {	            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");	        } else {	            final int numer = Integer.parseInt(str.substring(0, pos));	            final int denom = Integer.parseInt(str.substring(pos + 1));	            return getFraction(whole, numer, denom);	        }	    }	    pos = str.indexOf('/');	    if (pos < 0) {	        return getFraction(Integer.parseInt(str), 1);	    } else {	        final int numer = Integer.parseInt(str.substring(0, pos));	        final int denom = Integer.parseInt(str.substring(pos + 1));	        return getFraction(numer, denom);	    }	}
@Override	public int length() {	    return size;	}
protected boolean isUseShortClassName() {	    return useShortClassName;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public int capacity() {	    return buffer.length;	}
public static boolean isNumericSpace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {	            return false;	        }	    }	    return true;	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
public static Object invokeExactMethod(final Object object, final String methodName, Object[] args, Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {	    if (args == null) {	        args = ArrayUtils.EMPTY_OBJECT_ARRAY;	    }	    if (parameterTypes == null) {	        parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;	    }	    final Method method = getAccessibleMethod(object.getClass(), methodName, parameterTypes);	    if (method == null) {	        throw new NoSuchMethodException("No such accessible method: " + methodName + "() on object: " + object.getClass().getName());	    }	    return method.invoke(object, args);	}
protected void appendSummary(final StringBuffer buffer, final String fieldName, final boolean[] array) {	    appendSummarySize(buffer, fieldName, array.length);	}
public static String appendIfMissingIgnoreCase(final String str, final CharSequence suffix, final CharSequence... suffixes) {	    return appendIfMissing(str, suffix, true, suffixes);	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public static <T> Range<T> is(final T element, final Comparator<T> comparator) {	    return between(element, element, comparator);	}
public boolean isEmptyTokenAsNull() {	    return this.emptyAsNull;	}
public synchronized void acquire() throws InterruptedException {	    if (isShutdown()) {	        throw new IllegalStateException("TimedSemaphore is shut down!");	    }	    if (task == null) {	        task = startTimer();	    }	    boolean canPass = false;	    do {	        canPass = getLimit() <= NO_LIMIT || acquireCount < getLimit();	        if (!canPass) {	            wait();	        } else {	            acquireCount++;	        }	    } while (!canPass);	}
public String getNewLineText() {	    return newLine;	}
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {	    endIndex = validateRange(startIndex, endIndex);	    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);	}
private static boolean startsWith(final CharSequence str, final CharSequence prefix, final boolean ignoreCase) {	    if (str == null || prefix == null) {	        return str == null && prefix == null;	    }	    if (prefix.length() > str.length()) {	        return false;	    }	    return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());	}
public String getNullText() {	    return nullText;	}
public static boolean isWhitespace(final CharSequence cs) {	    if (cs == null) {	        return false;	    }	    final int sz = cs.length();	    for (int i = 0; i < sz; i++) {	        if (Character.isWhitespace(cs.charAt(i)) == false) {	            return false;	        }	    }	    return true;	}
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {	    if (str == null) {	        if (trueString == null) {	            return Boolean.TRUE;	        }	        if (falseString == null) {	            return Boolean.FALSE;	        }	        if (nullString == null) {	            return null;	        }	    } else if (str.equals(trueString)) {	        return Boolean.TRUE;	    } else if (str.equals(falseString)) {	        return Boolean.FALSE;	    } else if (str.equals(nullString)) {	        return null;	    }	    throw new IllegalArgumentException("The String did not match any specified value");	}
@Override	public Integer build() {	    return Integer.valueOf(toComparison());	}
@Override	public boolean isUseIdentityHashCode() {	    return super.isUseIdentityHashCode();	}
@Override	public double doubleValue() {	    return value;	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public static <T> Range<T> between(final T fromInclusive, final T toInclusive, final Comparator<T> comparator) {	    return new Range<T>(fromInclusive, toInclusive, comparator);	}
protected void appendSummary(final StringBuffer buffer, final String fieldName, final boolean[] array) {	    appendSummarySize(buffer, fieldName, array.length);	}
public int size() {	    return size;	}
public static String normalizeSpace(final String str) {	    if (str == null) {	        return null;	    }	    return WHITESPACE_PATTERN.matcher(trim(str)).replaceAll(SPACE);	}
protected String getSummaryObjectEndText() {	    return summaryObjectEndText;	}
@Override	public int hashCode() {	    return toHashCode();	}
public static int indexOfAny(final CharSequence str, final CharSequence... searchStrs) {	    if (str == null || searchStrs == null) {	        return INDEX_NOT_FOUND;	    }	    final int sz = searchStrs.length;	    int ret = Integer.MAX_VALUE;	    int tmp = 0;	    for (int i = 0; i < sz; i++) {	        final CharSequence search = searchStrs[i];	        if (search == null) {	            continue;	        }	        tmp = CharSequenceUtils.indexOf(str, search, 0);	        if (tmp == INDEX_NOT_FOUND) {	            continue;	        }	        if (tmp < ret) {	            ret = tmp;	        }	    }	    return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;	}
public void reset() {	    this.isEquals = true;	}
public static String right(final String str, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0) {	        return EMPTY;	    }	    if (str.length() <= len) {	        return str;	    }	    return str.substring(str.length() - len);	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public char getEscapeChar() {	    return this.escapeChar;	}
private static long getFragment(final Calendar calendar, final int fragment, final int unit) {	    if (calendar == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    final long millisPerUnit = getMillisPerUnit(unit);	    long result = 0;	    switch(fragment) {	        case Calendar.YEAR:	            result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;	            break;	        case Calendar.MONTH:	            result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;	            break;	    }	    switch(fragment) {	        case Calendar.YEAR:	        case Calendar.MONTH:	        case Calendar.DAY_OF_YEAR:	        case Calendar.DATE:	            result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;	        case Calendar.HOUR_OF_DAY:	            result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;	        case Calendar.MINUTE:	            result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;	        case Calendar.SECOND:	            result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;	            break;	        case Calendar.MILLISECOND:	            break;	        default:	            throw new IllegalArgumentException("The fragment " + fragment + " is not supported");	    }	    return result;	}
@Override	public L getLeft() {	    return left;	}
public StrBuilder appendSeparator(final char separator, final int loopIndex) {	    if (loopIndex > 0) {	        append(separator);	    }	    return this;	}
private static boolean startsWith(final CharSequence str, final CharSequence prefix, final boolean ignoreCase) {	    if (str == null || prefix == null) {	        return str == null && prefix == null;	    }	    if (prefix.length() > str.length()) {	        return false;	    }	    return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());	}
public void stop() {	    if (this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {	        throw new IllegalStateException("Stopwatch is not running. ");	    }	    if (this.runningState == STATE_RUNNING) {	        this.stopTime = System.nanoTime();	    }	    this.runningState = STATE_STOPPED;	}
public static String removeEnd(final String str, final String remove) {	    if (isEmpty(str) || isEmpty(remove)) {	        return str;	    }	    if (str.endsWith(remove)) {	        return str.substring(0, str.length() - remove.length());	    }	    return str;	}
public String getNullText() {	    return nullText;	}
public static void handleCauseUnchecked(final ExecutionException ex) {	    final ConcurrentRuntimeException crex = extractCauseUnchecked(ex);	    if (crex != null) {	        throw crex;	    }	}
public static Date round(final Object date, final int field) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    if (date instanceof Date) {	        return round((Date) date, field);	    } else if (date instanceof Calendar) {	        return round((Calendar) date, field).getTime();	    } else {	        throw new ClassCastException("Could not round " + date);	    }	}
@Override	public int hashCode() {	    return toHashCode();	}
public static String wrap(final String str, int wrapLength, String newLineStr, final boolean wrapLongWords) {	    if (str == null) {	        return null;	    }	    if (newLineStr == null) {	        newLineStr = SystemUtils.LINE_SEPARATOR;	    }	    if (wrapLength < 1) {	        wrapLength = 1;	    }	    final int inputLineLength = str.length();	    int offset = 0;	    final StringBuilder wrappedLine = new StringBuilder(inputLineLength + 32);	    while (inputLineLength - offset > wrapLength) {	        if (str.charAt(offset) == ' ') {	            offset++;	            continue;	        }	        int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);	        if (spaceToWrapAt >= offset) {	            wrappedLine.append(str.substring(offset, spaceToWrapAt));	            wrappedLine.append(newLineStr);	            offset = spaceToWrapAt + 1;	        } else {	            if (wrapLongWords) {	                wrappedLine.append(str.substring(offset, wrapLength + offset));	                wrappedLine.append(newLineStr);	                offset += wrapLength;	            } else {	                spaceToWrapAt = str.indexOf(' ', wrapLength + offset);	                if (spaceToWrapAt >= 0) {	                    wrappedLine.append(str.substring(offset, spaceToWrapAt));	                    wrappedLine.append(newLineStr);	                    offset = spaceToWrapAt + 1;	                } else {	                    wrappedLine.append(str.substring(offset));	                    offset = inputLineLength;	                }	            }	        }	    }	    wrappedLine.append(str.substring(offset));	    return wrappedLine.toString();	}
public static long intArrayToLong(final int[] src, final int srcPos, final long dstInit, final int dstPos, final int nInts) {	    if ((src.length == 0 && srcPos == 0) || 0 == nInts) {	        return dstInit;	    }	    if ((nInts - 1) * 32 + dstPos >= 64) {	        throw new IllegalArgumentException("(nInts-1)*32+dstPos is greather or equal to than 64");	    }	    long out = dstInit;	    int shift = 0;	    for (int i = 0; i < nInts; i++) {	        shift = i * 32 + dstPos;	        final long bits = ((0xffffffffL & src[i + srcPos]) << shift);	        final long mask = 0xffffffffL << shift;	        out = (out & ~mask) | bits;	    }	    return out;	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
protected String getArrayStart() {	    return arrayStart;	}
public static Number createNumber(final String str) throws NumberFormatException {	    if (str == null) {	        return null;	    }	    if (StringUtils.isBlank(str)) {	        throw new NumberFormatException("A blank string is not a valid number");	    }	    final String[] hex_prefixes = { "0x", "0X", "-0x", "-0X", "#", "-#" };	    int pfxLen = 0;	    for (final String pfx : hex_prefixes) {	        if (str.startsWith(pfx)) {	            pfxLen += pfx.length();	            break;	        }	    }	    if (pfxLen > 0) {	        final int hexDigits = str.length() - pfxLen;	        if (hexDigits > 16) {	            return createBigInteger(str);	        }	        if (hexDigits > 8) {	            return createLong(str);	        }	        return createInteger(str);	    }	    final char lastChar = str.charAt(str.length() - 1);	    String mant;	    String dec;	    String exp;	    final int decPos = str.indexOf('.');	    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;	    int numDecimals = 0;	    if (decPos > -1) {	        if (expPos > -1) {	            if (expPos < decPos || expPos > str.length()) {	                throw new NumberFormatException(str + " is not a valid number.");	            }	            dec = str.substring(decPos + 1, expPos);	        } else {	            dec = str.substring(decPos + 1);	        }	        mant = str.substring(0, decPos);	        numDecimals = dec.length();	    } else {	        if (expPos > -1) {	            if (expPos > str.length()) {	                throw new NumberFormatException(str + " is not a valid number.");	            }	            mant = str.substring(0, expPos);	        } else {	            mant = str;	        }	        dec = null;	    }	    if (!Character.isDigit(lastChar) && lastChar != '.') {	        if (expPos > -1 && expPos < str.length() - 1) {	            exp = str.substring(expPos + 1, str.length() - 1);	        } else {	            exp = null;	        }	        final String numeric = str.substring(0, str.length() - 1);	        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);	        switch(lastChar) {	            case 'l':	            case 'L':	                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {	                    try {	                        return createLong(numeric);	                    } catch (final NumberFormatException nfe) {	                    }	                    return createBigInteger(numeric);	                }	                throw new NumberFormatException(str + " is not a valid number.");	            case 'f':	            case 'F':	                try {	                    final Float f = NumberUtils.createFloat(numeric);	                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {	                        return f;	                    }	                } catch (final NumberFormatException nfe) {	                }	            case 'd':	            case 'D':	                try {	                    final Double d = NumberUtils.createDouble(numeric);	                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {	                        return d;	                    }	                } catch (final NumberFormatException nfe) {	                }	                try {	                    return createBigDecimal(numeric);	                } catch (final NumberFormatException e) {	                }	            default:	                throw new NumberFormatException(str + " is not a valid number.");	        }	    }	    if (expPos > -1 && expPos < str.length() - 1) {	        exp = str.substring(expPos + 1, str.length());	    } else {	        exp = null;	    }	    if (dec == null && exp == null) {	        try {	            return createInteger(str);	        } catch (final NumberFormatException nfe) {	        }	        try {	            return createLong(str);	        } catch (final NumberFormatException nfe) {	        }	        return createBigInteger(str);	    }	    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);	    try {	        if (numDecimals <= 7) {	            final Float f = createFloat(str);	            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {	                return f;	            }	        }	    } catch (final NumberFormatException nfe) {	    }	    try {	        if (numDecimals <= 16) {	            final Double d = createDouble(str);	            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {	                return d;	            }	        }	    } catch (final NumberFormatException nfe) {	    }	    return createBigDecimal(str);	}
public static String stripStart(final String str, final String stripChars) {	    int strLen;	    if (str == null || (strLen = str.length()) == 0) {	        return str;	    }	    int start = 0;	    if (stripChars == null) {	        while (start != strLen && Character.isWhitespace(str.charAt(start))) {	            start++;	        }	    } else if (stripChars.isEmpty()) {	        return str;	    } else {	        while (start != strLen && stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND) {	            start++;	        }	    }	    return str.substring(start);	}
@Override	public String toString() {	    return StringUtils.repeat(this.value.toString(), this.count);	}
public static boolean isDigits(final String str) {	    if (StringUtils.isEmpty(str)) {	        return false;	    }	    for (int i = 0; i < str.length(); i++) {	        if (!Character.isDigit(str.charAt(i))) {	            return false;	        }	    }	    return true;	}
protected String getContentStart() {	    return contentStart;	}
protected String getArraySeparator() {	    return arraySeparator;	}
public String getNullText() {	    return nullText;	}
protected String getFieldSeparator() {	    return fieldSeparator;	}
public static String replace(final String text, final String searchString, final String replacement, int max) {	    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {	        return text;	    }	    int start = 0;	    int end = text.indexOf(searchString, start);	    if (end == INDEX_NOT_FOUND) {	        return text;	    }	    final int replLength = searchString.length();	    int increase = replacement.length() - replLength;	    increase = increase < 0 ? 0 : increase;	    increase *= max < 0 ? 16 : max > 64 ? 64 : max;	    final StringBuilder buf = new StringBuilder(text.length() + increase);	    while (end != INDEX_NOT_FOUND) {	        buf.append(text.substring(start, end)).append(replacement);	        start = end + replLength;	        if (--max == 0) {	            break;	        }	        end = text.indexOf(searchString, start);	    }	    buf.append(text.substring(start));	    return buf.toString();	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {	    if (ArrayUtils.isEmpty(array)) {	        return INDEX_NOT_FOUND;	    }	    if (startIndex < 0) {	        startIndex = 0;	    }	    for (int i = startIndex; i < array.length; i++) {	        if (valueToFind == array[i]) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static String repeat(final char ch, final int repeat) {	    final char[] buf = new char[repeat];	    for (int i = repeat - 1; i >= 0; i--) {	        buf[i] = ch;	    }	    return new String(buf);	}
public String getNewLineText() {	    return newLine;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static String toString(final byte[] bytes, final String charsetName) throws UnsupportedEncodingException {	    return charsetName == null ? new String(bytes) : new String(bytes, charsetName);	}
public static void matchesPattern(final CharSequence input, final String pattern, final String message, final Object... values) {	    if (Pattern.matches(pattern, input) == false) {	        throw new IllegalArgumentException(String.format(message, values));	    }	}
public static String[] stripAll(final String[] strs, final String stripChars) {	    int strsLen;	    if (strs == null || (strsLen = strs.length) == 0) {	        return strs;	    }	    final String[] newArr = new String[strsLen];	    for (int i = 0; i < strsLen; i++) {	        newArr[i] = strip(strs[i], stripChars);	    }	    return newArr;	}
public static boolean isAsciiAlpha(final char ch) {	    return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z');	}
public static float min(final float a, final float b, final float c) {	    return Math.min(Math.min(a, b), c);	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
static boolean isOSMatch(final String osName, final String osVersion, final String osNamePrefix, final String osVersionPrefix) {	    if (osName == null || osVersion == null) {	        return false;	    }	    return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);	}
public static UnicodeEscaper outsideOf(final int codepointLow, final int codepointHigh) {	    return new UnicodeEscaper(codepointLow, codepointHigh, false);	}
public static String toString(final byte[] bytes, final String charsetName) throws UnsupportedEncodingException {	    return charsetName == null ? new String(bytes) : new String(bytes, charsetName);	}
protected String getArrayEnd() {	    return arrayEnd;	}
public int size() {	    return size;	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public int capacity() {	    return buffer.length;	}
private static Object remove(final Object array, final int index) {	    final int length = getLength(array);	    if (index < 0 || index >= length) {	        throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);	    }	    final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);	    System.arraycopy(array, 0, result, 0, index);	    if (index < length - 1) {	        System.arraycopy(array, index + 1, result, index, length - index - 1);	    }	    return result;	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static int reflectionCompare(final Object lhs, final Object rhs, final boolean compareTransients, final Class<?> reflectUpToClass, final String... excludeFields) {	    if (lhs == rhs) {	        return 0;	    }	    if (lhs == null || rhs == null) {	        throw new NullPointerException();	    }	    Class<?> lhsClazz = lhs.getClass();	    if (!lhsClazz.isInstance(rhs)) {	        throw new ClassCastException();	    }	    final CompareToBuilder compareToBuilder = new CompareToBuilder();	    reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);	    while (lhsClazz.getSuperclass() != null && lhsClazz != reflectUpToClass) {	        lhsClazz = lhsClazz.getSuperclass();	        reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);	    }	    return compareToBuilder.toComparison();	}
@Override	public boolean translate(final int codepoint, final Writer out) throws IOException {	    if (between) {	        if (codepoint < below || codepoint > above) {	            return false;	        }	    } else {	        if (codepoint >= below && codepoint <= above) {	            return false;	        }	    }	    out.write("&#");	    out.write(Integer.toString(codepoint, 10));	    out.write(';');	    return true;	}
@Override	protected String toUtf16Escape(final int codepoint) {	    final char[] surrogatePair = Character.toChars(codepoint);	    return "\\u" + hex(surrogatePair[0]) + "\\u" + hex(surrogatePair[1]);	}
protected boolean isUseShortClassName() {	    return useShortClassName;	}
public static Boolean xor(final Boolean... array) {	    if (array == null) {	        throw new IllegalArgumentException("The Array must not be null");	    }	    if (array.length == 0) {	        throw new IllegalArgumentException("Array is empty");	    }	    try {	        final boolean[] primitive = ArrayUtils.toPrimitive(array);	        return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;	    } catch (final NullPointerException ex) {	        throw new IllegalArgumentException("The array must not contain any null elements");	    }	}
@Override	public void setValue(final Boolean value) {	    this.value = value.booleanValue();	}
public static String capitalizeFully(String str, final char... delimiters) {	    final int delimLen = delimiters == null ? -1 : delimiters.length;	    if (StringUtils.isEmpty(str) || delimLen == 0) {	        return str;	    }	    str = str.toLowerCase();	    return capitalize(str, delimiters);	}
public static String[] split(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, false);	}
public int size() {	    return size;	}
public static boolean isNumber(final String str) {	    if (StringUtils.isEmpty(str)) {	        return false;	    }	    final char[] chars = str.toCharArray();	    int sz = chars.length;	    boolean hasExp = false;	    boolean hasDecPoint = false;	    boolean allowSigns = false;	    boolean foundDigit = false;	    final int start = (chars[0] == '-') ? 1 : 0;	    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {	        int i = start + 2;	        if (i == sz) {	            return false;	        }	        for (; i < chars.length; i++) {	            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {	                return false;	            }	        }	        return true;	    }	    sz--;	    int i = start;	    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {	        if (chars[i] >= '0' && chars[i] <= '9') {	            foundDigit = true;	            allowSigns = false;	        } else if (chars[i] == '.') {	            if (hasDecPoint || hasExp) {	                return false;	            }	            hasDecPoint = true;	        } else if (chars[i] == 'e' || chars[i] == 'E') {	            if (hasExp) {	                return false;	            }	            if (!foundDigit) {	                return false;	            }	            hasExp = true;	            allowSigns = true;	        } else if (chars[i] == '+' || chars[i] == '-') {	            if (!allowSigns) {	                return false;	            }	            allowSigns = false;	            foundDigit = false;	        } else {	            return false;	        }	        i++;	    }	    if (i < chars.length) {	        if (chars[i] >= '0' && chars[i] <= '9') {	            return true;	        }	        if (chars[i] == 'e' || chars[i] == 'E') {	            return false;	        }	        if (chars[i] == '.') {	            if (hasDecPoint || hasExp) {	                return false;	            }	            return foundDigit;	        }	        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {	            return foundDigit;	        }	        if (chars[i] == 'l' || chars[i] == 'L') {	            return foundDigit && !hasExp && !hasDecPoint;	        }	        return false;	    }	    return !allowSigns && foundDigit;	}
public boolean isEquals() {	    return this.isEquals;	}
public static String format(final Calendar calendar, final String pattern, final TimeZone timeZone, final Locale locale) {	    final FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);	    return df.format(calendar);	}
public static String defaultString(final String str, final String defaultStr) {	    return str == null ? defaultStr : str;	}
public int capacity() {	    return buffer.length;	}
public static String mid(final String str, int pos, final int len) {	    if (str == null) {	        return null;	    }	    if (len < 0 || pos > str.length()) {	        return EMPTY;	    }	    if (pos < 0) {	        pos = 0;	    }	    if (str.length() <= pos + len) {	        return str.substring(pos);	    }	    return str.substring(pos, pos + len);	}
public StrBuilder append(final double value) {	    return append(String.valueOf(value));	}
public static void reverse(final boolean[] array) {	    if (array == null) {	        return;	    }	    int i = 0;	    int j = array.length - 1;	    boolean tmp;	    while (j > i) {	        tmp = array[j];	        array[j] = array[i];	        array[i] = tmp;	        j--;	        i++;	    }	}
public static <T> T initialize(final ConcurrentInitializer<T> initializer) throws ConcurrentException {	    return initializer != null ? initializer.get() : null;	}
static Object removeAll(final Object array, final BitSet indices) {	    final int srcLength = ArrayUtils.getLength(array);	    final int removals = indices.cardinality();	    final Object result = Array.newInstance(array.getClass().getComponentType(), srcLength - removals);	    int srcIndex = 0;	    int destIndex = 0;	    int count;	    int set;	    while ((set = indices.nextSetBit(srcIndex)) != -1) {	        count = set - srcIndex;	        if (count > 0) {	            System.arraycopy(array, srcIndex, result, destIndex, count);	            destIndex += count;	        }	        srcIndex = indices.nextClearBit(set);	    }	    count = srcLength - srcIndex;	    if (count > 0) {	        System.arraycopy(array, srcIndex, result, destIndex, count);	    }	    return result;	}
public static String deleteWhitespace(final String str) {	    if (isEmpty(str)) {	        return str;	    }	    final int sz = str.length();	    final char[] chs = new char[sz];	    int count = 0;	    for (int i = 0; i < sz; i++) {	        if (!Character.isWhitespace(str.charAt(i))) {	            chs[count++] = str.charAt(i);	        }	    }	    if (count == sz) {	        return str;	    }	    return new String(chs, 0, count);	}
@Override	public Date parse(final String source, final ParsePosition pos) {	    final int offset = pos.getIndex();	    final Matcher matcher = parsePattern.matcher(source.substring(offset));	    if (!matcher.lookingAt()) {	        return null;	    }	    final Calendar cal = Calendar.getInstance(timeZone, locale);	    cal.clear();	    for (int i = 0; i < strategies.length; ) {	        final Strategy strategy = strategies[i++];	        strategy.setCalendar(this, cal, matcher.group(i));	    }	    pos.setIndex(offset + matcher.end());	    return cal.getTime();	}
public static String join(final Iterable<?> iterable, final String separator) {	    if (iterable == null) {	        return null;	    }	    return join(iterable.iterator(), separator);	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public Format getFormatter() {	    return this.formatter;	}
public static <K, V> V createIfAbsent(final ConcurrentMap<K, V> map, final K key, final ConcurrentInitializer<V> init) throws ConcurrentException {	    if (map == null || init == null) {	        return null;	    }	    final V value = map.get(key);	    if (value == null) {	        return putIfAbsent(map, key, init.get());	    }	    return value;	}
public static Date addMonths(final Date date, final int amount) {	    return add(date, Calendar.MONTH, amount);	}
@Override	public String toString() {	    if (this.getObject() == null) {	        this.getStringBuffer().append(this.getStyle().getNullText());	    } else {	        style.appendEnd(this.getStringBuffer(), this.getObject());	    }	    return this.getStringBuffer().toString();	}
public int size() {	    return size;	}
public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] result = new boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        final Boolean b = array[i];	        result[i] = (b == null ? valueForNull : b.booleanValue());	    }	    return result;	}
@Override	public boolean equals(final Object obj) {	    if (obj instanceof StrBuilder) {	        return equals((StrBuilder) obj);	    }	    return false;	}
public static String repeat(final char ch, final int repeat) {	    final char[] buf = new char[repeat];	    for (int i = repeat - 1; i >= 0; i--) {	        buf[i] = ch;	    }	    return new String(buf);	}
public void reset() {	    this.isEquals = true;	}
public static float max(final float a, final float b) {	    if (Float.isNaN(a)) {	        return b;	    } else if (Float.isNaN(b)) {	        return a;	    } else {	        return Math.max(a, b);	    }	}
public static int hexDigitMsb0ToInt(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return 0x0;	        case '1':	            return 0x8;	        case '2':	            return 0x4;	        case '3':	            return 0xC;	        case '4':	            return 0x2;	        case '5':	            return 0xA;	        case '6':	            return 0x6;	        case '7':	            return 0xE;	        case '8':	            return 0x1;	        case '9':	            return 0x9;	        case 'a':	        case 'A':	            return 0x5;	        case 'b':	        case 'B':	            return 0xD;	        case 'c':	        case 'C':	            return 0x3;	        case 'd':	        case 'D':	            return 0xB;	        case 'e':	        case 'E':	            return 0x7;	        case 'f':	        case 'F':	            return 0xF;	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public static <E extends Enum<E>> E getEnum(final Class<E> enumClass, final String enumName) {	    if (enumName == null) {	        return null;	    }	    try {	        return Enum.valueOf(enumClass, enumName);	    } catch (final IllegalArgumentException ex) {	        return null;	    }	}
public static boolean contains(final CharSequence seq, final CharSequence searchSeq) {	    if (seq == null || searchSeq == null) {	        return false;	    }	    return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;	}
public static char binaryToHexDigit(final boolean[] src, final int srcPos) {	    if (src.length == 0) {	        throw new IllegalArgumentException("Cannot convert an empty array.");	    }	    if (src.length > srcPos + 3 && src[srcPos + 3]) {	        if (src.length > srcPos + 2 && src[srcPos + 2]) {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'f';	                } else {	                    return 'e';	                }	            } else {	                if (src[srcPos]) {	                    return 'd';	                } else {	                    return 'c';	                }	            }	        } else {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return 'b';	                } else {	                    return 'a';	                }	            } else {	                if (src[srcPos]) {	                    return '9';	                } else {	                    return '8';	                }	            }	        }	    } else {	        if (src.length > srcPos + 2 && src[srcPos + 2]) {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return '7';	                } else {	                    return '6';	                }	            } else {	                if (src[srcPos]) {	                    return '5';	                } else {	                    return '4';	                }	            }	        } else {	            if (src.length > srcPos + 1 && src[srcPos + 1]) {	                if (src[srcPos]) {	                    return '3';	                } else {	                    return '2';	                }	            } else {	                if (src[srcPos]) {	                    return '1';	                } else {	                    return '0';	                }	            }	        }	    }	}
public StrBuilder clear() {	    size = 0;	    return this;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
protected String getSizeEndText() {	    return sizeEndText;	}
public static String randomAlphanumeric(final int count) {	    return random(count, true, true);	}
public int size() {	    return size;	}
protected int validateRange(final int startIndex, int endIndex) {	    if (startIndex < 0) {	        throw new StringIndexOutOfBoundsException(startIndex);	    }	    if (endIndex > size) {	        endIndex = size;	    }	    if (startIndex > endIndex) {	        throw new StringIndexOutOfBoundsException("end < start");	    }	    return endIndex;	}
public StrBuilder ensureCapacity(final int capacity) {	    if (capacity > buffer.length) {	        final char[] old = buffer;	        buffer = new char[capacity * 2];	        System.arraycopy(old, 0, buffer, 0, size);	    }	    return this;	}
public static String getShortClassName(String className) {	    if (StringUtils.isEmpty(className)) {	        return StringUtils.EMPTY;	    }	    final StringBuilder arrayPrefix = new StringBuilder();	    if (className.startsWith("[")) {	        while (className.charAt(0) == '[') {	            className = className.substring(1);	            arrayPrefix.append("[]");	        }	        if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {	            className = className.substring(1, className.length() - 1);	        }	        if (reverseAbbreviationMap.containsKey(className)) {	            className = reverseAbbreviationMap.get(className);	        }	    }	    final int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);	    final int innerIdx = className.indexOf(INNER_CLASS_SEPARATOR_CHAR, lastDotIdx == -1 ? 0 : lastDotIdx + 1);	    String out = className.substring(lastDotIdx + 1);	    if (innerIdx != -1) {	        out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);	    }	    return out + arrayPrefix;	}
public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {	    if (comparison != 0) {	        return this;	    }	    if (lhs == rhs) {	        return this;	    }	    if (lhs == null) {	        comparison = -1;	        return this;	    }	    if (rhs == null) {	        comparison = +1;	        return this;	    }	    if (lhs.length != rhs.length) {	        comparison = (lhs.length < rhs.length) ? -1 : +1;	        return this;	    }	    for (int i = 0; i < lhs.length && comparison == 0; i++) {	        append(lhs[i], rhs[i]);	    }	    return this;	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
@Override	public CharSequence subSequence(final int startIndex, final int endIndex) {	    if (startIndex < 0) {	        throw new StringIndexOutOfBoundsException(startIndex);	    }	    if (endIndex > size) {	        throw new StringIndexOutOfBoundsException(endIndex);	    }	    if (startIndex > endIndex) {	        throw new StringIndexOutOfBoundsException(endIndex - startIndex);	    }	    return substring(startIndex, endIndex);	}
public static boolean toBoolean(final String str, final String trueString, final String falseString) {	    if (str == trueString) {	        return true;	    } else if (str == falseString) {	        return false;	    } else if (str != null) {	        if (str.equals(trueString)) {	            return true;	        } else if (str.equals(falseString)) {	            return false;	        }	    }	    throw new IllegalArgumentException("The String did not match either specified value");	}
public static UnicodeEscaper between(final int codepointLow, final int codepointHigh) {	    return new UnicodeEscaper(codepointLow, codepointHigh, true);	}
@Override	public String getSummaryObjectStartText() {	    return super.getSummaryObjectStartText();	}
protected String getContentEnd() {	    return contentEnd;	}
public static StrMatcher splitMatcher() {	    return SPLIT_MATCHER;	}
public int size() {	    return size;	}
public StrBuilder appendNewLine() {	    if (newLine == null) {	        append(SystemUtils.LINE_SEPARATOR);	        return this;	    }	    return append(newLine);	}
public static float max(final float a, final float b, final float c) {	    return Math.max(Math.max(a, b), c);	}
public int toComparison() {	    return comparison;	}
public synchronized void shutdown() {	    if (!shutdown) {	        if (ownExecutor) {	            getExecutorService().shutdownNow();	        }	        if (task != null) {	            task.cancel(false);	        }	        shutdown = true;	    }	}
@Override	public int length() {	    return size;	}
public static int lastIndexOfIgnoreCase(final CharSequence str, final CharSequence searchStr, int startPos) {	    if (str == null || searchStr == null) {	        return INDEX_NOT_FOUND;	    }	    if (startPos > str.length() - searchStr.length()) {	        startPos = str.length() - searchStr.length();	    }	    if (startPos < 0) {	        return INDEX_NOT_FOUND;	    }	    if (searchStr.length() == 0) {	        return startPos;	    }	    for (int i = startPos; i >= 0; i--) {	        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {	            return i;	        }	    }	    return INDEX_NOT_FOUND;	}
public static short[] removeElement(final short[] array, final short element) {	    final int index = indexOf(array, element);	    if (index == INDEX_NOT_FOUND) {	        return clone(array);	    }	    return remove(array, index);	}
public abstract R getRight();
protected void appendDetail(final StringBuffer buffer, final String fieldName, final boolean[] array) {	    buffer.append(arrayStart);	    for (int i = 0; i < array.length; i++) {	        if (i > 0) {	            buffer.append(arraySeparator);	        }	        appendDetail(buffer, fieldName, array[i]);	    }	    buffer.append(arrayEnd);	}
@Override	public int hashCode() {	    return toHashCode();	}
@Override	public Object parseObject(final String source, final ParsePosition pos) {	    return parser.parseObject(source, pos);	}
public static Date ceiling(final Object date, final int field) {	    if (date == null) {	        throw new IllegalArgumentException("The date must not be null");	    }	    if (date instanceof Date) {	        return ceiling((Date) date, field);	    } else if (date instanceof Calendar) {	        return ceiling((Calendar) date, field).getTime();	    } else {	        throw new ClassCastException("Could not find ceiling of for type: " + date.getClass());	    }	}
public static String uncapitalize(final String str) {	    int strLen;	    if (str == null || (strLen = str.length()) == 0) {	        return str;	    }	    char firstChar = str.charAt(0);	    if (Character.isLowerCase(firstChar)) {	        return str;	    }	    return new StringBuilder(strLen).append(Character.toLowerCase(firstChar)).append(str.substring(1)).toString();	}
public String getNewLineText() {	    return newLine;	}
public static String substringBetween(final String str, final String open, final String close) {	    if (str == null || open == null || close == null) {	        return null;	    }	    final int start = str.indexOf(open);	    if (start != INDEX_NOT_FOUND) {	        final int end = str.indexOf(close, start + open.length());	        if (end != INDEX_NOT_FOUND) {	            return str.substring(start + open.length(), end);	        }	    }	    return null;	}
public StrBuilder setCharAt(final int index, final char ch) {	    if (index < 0 || index >= length()) {	        throw new StringIndexOutOfBoundsException(index);	    }	    buffer[index] = ch;	    return this;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
@Override	public long skip(long n) {	    if (pos + n > StrBuilder.this.size()) {	        n = StrBuilder.this.size() - pos;	    }	    if (n < 0) {	        return 0;	    }	    pos += n;	    return n;	}
public int toComparison() {	    return comparison;	}
public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {	    if (array == null) {	        return null;	    } else if (array.length == 0) {	        return EMPTY_BOOLEAN_ARRAY;	    }	    final boolean[] result = new boolean[array.length];	    for (int i = 0; i < array.length; i++) {	        final Boolean b = array[i];	        result[i] = (b == null ? valueForNull : b.booleanValue());	    }	    return result;	}
public static boolean[] hexDigitToBinary(final char hexDigit) {	    switch(hexDigit) {	        case '0':	            return new boolean[] { false, false, false, false };	        case '1':	            return new boolean[] { true, false, false, false };	        case '2':	            return new boolean[] { false, true, false, false };	        case '3':	            return new boolean[] { true, true, false, false };	        case '4':	            return new boolean[] { false, false, true, false };	        case '5':	            return new boolean[] { true, false, true, false };	        case '6':	            return new boolean[] { false, true, true, false };	        case '7':	            return new boolean[] { true, true, true, false };	        case '8':	            return new boolean[] { false, false, false, true };	        case '9':	            return new boolean[] { true, false, false, true };	        case 'a':	        case 'A':	            return new boolean[] { false, true, false, true };	        case 'b':	        case 'B':	            return new boolean[] { true, true, false, true };	        case 'c':	        case 'C':	            return new boolean[] { false, false, true, true };	        case 'd':	        case 'D':	            return new boolean[] { true, false, true, true };	        case 'e':	        case 'E':	            return new boolean[] { false, true, true, true };	        case 'f':	        case 'F':	            return new boolean[] { true, true, true, true };	        default:	            throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");	    }	}
public boolean startsWith(final String str) {	    if (str == null) {	        return false;	    }	    final int len = str.length();	    if (len == 0) {	        return true;	    }	    if (len > size) {	        return false;	    }	    for (int i = 0; i < len; i++) {	        if (buffer[i] != str.charAt(i)) {	            return false;	        }	    }	    return true;	}
protected void setEquals(final boolean isEquals) {	    this.isEquals = isEquals;	}
private static int ordinalIndexOf(final CharSequence str, final CharSequence searchStr, final int ordinal, final boolean lastIndex) {	    if (str == null || searchStr == null || ordinal <= 0) {	        return INDEX_NOT_FOUND;	    }	    if (searchStr.length() == 0) {	        return lastIndex ? str.length() : 0;	    }	    int found = 0;	    int index = lastIndex ? str.length() : INDEX_NOT_FOUND;	    do {	        if (lastIndex) {	            index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);	        } else {	            index = CharSequenceUtils.indexOf(str, searchStr, index + 1);	        }	        if (index < 0) {	            return index;	        }	        found++;	    } while (found < ordinal);	    return index;	}
public static boolean isAscii(final char ch) {	    return ch < 128;	}
@Override	public int intValue() {	    return (int) value;	}
public static boolean isEmpty(final CharSequence cs) {	    return cs == null || cs.length() == 0;	}
public static char toChar(final String str, final char defaultValue) {	    if (StringUtils.isEmpty(str)) {	        return defaultValue;	    }	    return str.charAt(0);	}
public int size() {	    return size;	}
public long getNanoTime() {	    if (this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {	        return this.stopTime - this.startTime;	    } else if (this.runningState == STATE_UNSTARTED) {	        return 0;	    } else if (this.runningState == STATE_RUNNING) {	        return System.nanoTime() - this.startTime;	    }	    throw new RuntimeException("Illegal running state has occurred.");	}
@Override	public TimeZone getTimeZone() {	    return mTimeZone;	}
@Override	public int nextIndex() {	    return tokenPos;	}
public final synchronized void setLimit(final int limit) {	    this.limit = limit;	}
public int size() {	    return size;	}
static boolean containsTokenWithValue(final Token[] tokens, final Object value) {	    final int sz = tokens.length;	    for (int i = 0; i < sz; i++) {	        if (tokens[i].getValue() == value) {	            return true;	        }	    }	    return false;	}
protected String getContentStart() {	    return contentStart;	}
public StrBuilder appendAll(final Iterator<?> it) {	    if (it != null) {	        while (it.hasNext()) {	            append(it.next());	        }	    }	    return this;	}
static Object removeAll(final Object array, final BitSet indices) {	    final int srcLength = ArrayUtils.getLength(array);	    final int removals = indices.cardinality();	    final Object result = Array.newInstance(array.getClass().getComponentType(), srcLength - removals);	    int srcIndex = 0;	    int destIndex = 0;	    int count;	    int set;	    while ((set = indices.nextSetBit(srcIndex)) != -1) {	        count = set - srcIndex;	        if (count > 0) {	            System.arraycopy(array, srcIndex, result, destIndex, count);	            destIndex += count;	        }	        srcIndex = indices.nextClearBit(set);	    }	    count = srcLength - srcIndex;	    if (count > 0) {	        System.arraycopy(array, srcIndex, result, destIndex, count);	    }	    return result;	}
public void start() {	    if (this.runningState == STATE_STOPPED) {	        throw new IllegalStateException("Stopwatch must be reset before being restarted. ");	    }	    if (this.runningState != STATE_UNSTARTED) {	        throw new IllegalStateException("Stopwatch already started. ");	    }	    this.startTime = System.nanoTime();	    this.startTimeMillis = System.currentTimeMillis();	    this.runningState = STATE_RUNNING;	}
public int capacity() {	    return buffer.length;	}
public String getNullText() {	    return nullText;	}
public StrBuilder setNullText(String nullText) {	    if (nullText != null && nullText.isEmpty()) {	        nullText = null;	    }	    this.nullText = nullText;	    return this;	}
public StrBuilder appendNull() {	    if (nullText == null) {	        return this;	    }	    return append(nullText);	}
public char getStart() {	    return this.start;	}
public StrBuilder delete(final int startIndex, int endIndex) {	    endIndex = validateRange(startIndex, endIndex);	    final int len = endIndex - startIndex;	    if (len > 0) {	        deleteImpl(startIndex, endIndex, len);	    }	    return this;	}
public static int hashCode(final Annotation a) {	    int result = 0;	    final Class<? extends Annotation> type = a.annotationType();	    for (final Method m : type.getDeclaredMethods()) {	        try {	            final Object value = m.invoke(a);	            if (value == null) {	                throw new IllegalStateException(String.format("Annotation method %s returned null", m));	            }	            result += hashMember(m.getName(), value);	        } catch (final RuntimeException ex) {	            throw ex;	        } catch (final Exception ex) {	            throw new RuntimeException(ex);	        }	    }	    return result;	}
public static Formatter append(final CharSequence seq, final Formatter formatter, final int flags, final int width, final int precision, final char padChar, final CharSequence ellipsis) {	    Validate.isTrue(ellipsis == null || precision < 0 || ellipsis.length() <= precision, "Specified ellipsis '%1$s' exceeds precision of %2$s", ellipsis, Integer.valueOf(precision));	    final StringBuilder buf = new StringBuilder(seq);	    if (precision >= 0 && precision < seq.length()) {	        final CharSequence _ellipsis = ObjectUtils.defaultIfNull(ellipsis, StringUtils.EMPTY);	        buf.replace(precision - _ellipsis.length(), seq.length(), _ellipsis.toString());	    }	    final boolean leftJustify = (flags & LEFT_JUSTIFY) == LEFT_JUSTIFY;	    for (int i = buf.length(); i < width; i++) {	        buf.insert(leftJustify ? i : 0, padChar);	    }	    formatter.format(buf.toString());	    return formatter;	}
public int capacity() {	    return buffer.length;	}
public static String substring(final String str, int start, int end) {	    if (str == null) {	        return null;	    }	    if (end < 0) {	        end = str.length() + end;	    }	    if (start < 0) {	        start = str.length() + start;	    }	    if (end > str.length()) {	        end = str.length();	    }	    if (start > end) {	        return EMPTY;	    }	    if (start < 0) {	        start = 0;	    }	    if (end < 0) {	        end = 0;	    }	    return str.substring(start, end);	}
public StringBuilder toStringBuilder() {	    return new StringBuilder(size).append(buffer, 0, size);	}
@Override	public int length() {	    return size;	}
@Override	public void mark(final int readAheadLimit) {	    mark = pos;	}
protected boolean isUseFieldNames() {	    return useFieldNames;	}
protected String getContentEnd() {	    return contentEnd;	}
@Override	public int hashCode() {	    int result = hashCode;	    if (hashCode == 0) {	        result = 17;	        result = 37 * result + getClass().hashCode();	        result = 37 * result + minimum.hashCode();	        result = 37 * result + maximum.hashCode();	        hashCode = result;	    }	    return result;	}
@Override	public int length() {	    return size;	}
public StrBuilder insert(final int index, final double value) {	    return insert(index, String.valueOf(value));	}
public int capacity() {	    return buffer.length;	}
public void suspend() {	    if (this.runningState != STATE_RUNNING) {	        throw new IllegalStateException("Stopwatch must be running to suspend. ");	    }	    this.stopTime = System.nanoTime();	    this.runningState = STATE_SUSPENDED;	}
public static String[] substringsBetween(final String str, final String open, final String close) {	    if (str == null || isEmpty(open) || isEmpty(close)) {	        return null;	    }	    final int strLen = str.length();	    if (strLen == 0) {	        return ArrayUtils.EMPTY_STRING_ARRAY;	    }	    final int closeLen = close.length();	    final int openLen = open.length();	    final List<String> list = new ArrayList<String>();	    int pos = 0;	    while (pos < strLen - closeLen) {	        int start = str.indexOf(open, pos);	        if (start < 0) {	            break;	        }	        start += openLen;	        final int end = str.indexOf(close, start);	        if (end < 0) {	            break;	        }	        list.add(str.substring(start, end));	        pos = end + closeLen;	    }	    if (list.isEmpty()) {	        return null;	    }	    return list.toArray(new String[list.size()]);	}
public static final String escapeJson(final String input) {	    return ESCAPE_JSON.translate(input);	}
public static String replacePattern(final String source, final String regex, final String replacement) {	    return Pattern.compile(regex, Pattern.DOTALL).matcher(source).replaceAll(replacement);	}
protected boolean isArrayContentDetail() {	    return arrayContentDetail;	}
@Override	public String toString() {	    if (this.getObject() == null) {	        return this.getStyle().getNullText();	    }	    Class<?> clazz = this.getObject().getClass();	    this.appendFieldsIn(clazz);	    while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {	        clazz = clazz.getSuperclass();	        this.appendFieldsIn(clazz);	    }	    return super.toString();	}
public static int indexOfAnyBut(final CharSequence seq, final CharSequence searchChars) {	    if (isEmpty(seq) || isEmpty(searchChars)) {	        return INDEX_NOT_FOUND;	    }	    final int strLen = seq.length();	    for (int i = 0; i < strLen; i++) {	        final char ch = seq.charAt(i);	        final boolean chFound = CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0;	        if (i + 1 < strLen && Character.isHighSurrogate(ch)) {	            final char ch2 = seq.charAt(i + 1);	            if (chFound && CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0) {	                return i;	            }	        } else {	            if (!chFound) {	                return i;	            }	        }	    }	    return INDEX_NOT_FOUND;	}
@Override	public int length() {	    return size;	}
public static int toInt(final String str, final int defaultValue) {	    if (str == null) {	        return defaultValue;	    }	    try {	        return Integer.parseInt(str);	    } catch (final NumberFormatException nfe) {	        return defaultValue;	    }	}
public StrBuilder setLength(final int length) {	    if (length < 0) {	        throw new StringIndexOutOfBoundsException(length);	    }	    if (length < size) {	        size = length;	    } else if (length > size) {	        ensureCapacity(length);	        final int oldEnd = size;	        final int newEnd = length;	        size = length;	        for (int i = oldEnd; i < newEnd; i++) {	            buffer[i] = '\0';	        }	    }	    return this;	}
public StrBuilder appendln(final double value) {	    return append(value).appendNewLine();	}
public static void removeCommonFrames(final List<String> causeFrames, final List<String> wrapperFrames) {	    if (causeFrames == null || wrapperFrames == null) {	        throw new IllegalArgumentException("The List must not be null");	    }	    int causeFrameIndex = causeFrames.size() - 1;	    int wrapperFrameIndex = wrapperFrames.size() - 1;	    while (causeFrameIndex >= 0 && wrapperFrameIndex >= 0) {	        final String causeFrame = causeFrames.get(causeFrameIndex);	        final String wrapperFrame = wrapperFrames.get(wrapperFrameIndex);	        if (causeFrame.equals(wrapperFrame)) {	            causeFrames.remove(causeFrameIndex);	        }	        causeFrameIndex--;	        wrapperFrameIndex--;	    }	}
public static int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos) {	    if (seq == null || searchSeq == null) {	        return INDEX_NOT_FOUND;	    }	    return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);	}
public static float max(final float a, final float b, final float c) {	    return Math.max(Math.max(a, b), c);	}
public static float max(final float a, final float b) {	    if (Float.isNaN(a)) {	        return b;	    } else if (Float.isNaN(b)) {	        return a;	    } else {	        return Math.max(a, b);	    }	}
public boolean replaceIn(final StrBuilder source, final int offset, final int length) {	    if (source == null) {	        return false;	    }	    return substitute(source, offset, length);	}
static JavaVersion get(final String nom) {	    if ("0.9".equals(nom)) {	        return JAVA_0_9;	    } else if ("1.1".equals(nom)) {	        return JAVA_1_1;	    } else if ("1.2".equals(nom)) {	        return JAVA_1_2;	    } else if ("1.3".equals(nom)) {	        return JAVA_1_3;	    } else if ("1.4".equals(nom)) {	        return JAVA_1_4;	    } else if ("1.5".equals(nom)) {	        return JAVA_1_5;	    } else if ("1.6".equals(nom)) {	        return JAVA_1_6;	    } else if ("1.7".equals(nom)) {	        return JAVA_1_7;	    } else if ("1.8".equals(nom)) {	        return JAVA_1_8;	    } else {	        return null;	    }	}
public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {	    appendFieldStart(buffer, fieldName);	    if (array == null) {	        appendNullText(buffer, fieldName);	    } else if (isFullDetail(fullDetail)) {	        appendDetail(buffer, fieldName, array);	    } else {	        appendSummary(buffer, fieldName, array);	    }	    appendFieldEnd(buffer, fieldName);	}
public static <K, V> V createIfAbsentUnchecked(final ConcurrentMap<K, V> map, final K key, final ConcurrentInitializer<V> init) {	    try {	        return createIfAbsent(map, key, init);	    } catch (final ConcurrentException cex) {	        throw new ConcurrentRuntimeException(cex.getCause());	    }	}
protected void appendDetail(final StringBuffer buffer, final String fieldName, final boolean[] array) {	    buffer.append(arrayStart);	    for (int i = 0; i < array.length; i++) {	        if (i > 0) {	            buffer.append(arraySeparator);	        }	        appendDetail(buffer, fieldName, array[i]);	    }	    buffer.append(arrayEnd);	}
public StrBuilder ensureCapacity(final int capacity) {	    if (capacity > buffer.length) {	        final char[] old = buffer;	        buffer = new char[capacity * 2];	        System.arraycopy(old, 0, buffer, 0, size);	    }	    return this;	}
@Override	public int length() {	    return size;	}
public static boolean isAscii(final char ch) {	    return ch < 128;	}
public static String swapCase(final String str) {	    if (StringUtils.isEmpty(str)) {	        return str;	    }	    final char[] buffer = str.toCharArray();	    boolean whitespace = true;	    for (int i = 0; i < buffer.length; i++) {	        final char ch = buffer[i];	        if (Character.isUpperCase(ch)) {	            buffer[i] = Character.toLowerCase(ch);	            whitespace = false;	        } else if (Character.isTitleCase(ch)) {	            buffer[i] = Character.toLowerCase(ch);	            whitespace = false;	        } else if (Character.isLowerCase(ch)) {	            if (whitespace) {	                buffer[i] = Character.toTitleCase(ch);	                whitespace = false;	            } else {	                buffer[i] = Character.toUpperCase(ch);	            }	        } else {	            whitespace = Character.isWhitespace(ch);	        }	    }	    return new String(buffer);	}
@Override	public String build() {	    return toString();	}
protected ScheduledFuture<?> startTimer() {	    return getExecutorService().scheduleAtFixedRate(new Runnable() {		        @Override	        public void run() {	            endOfPeriod();	        }	    }, getPeriod(), getPeriod(), getUnit());	}
public static String[] splitPreserveAllTokens(final String str, final String separatorChars, final int max) {	    return splitWorker(str, separatorChars, max, true);	}
protected String getNullText() {	    return nullText;	}
static String[] getStackFrames(final String stackTrace) {	    final String linebreak = SystemUtils.LINE_SEPARATOR;	    final StringTokenizer frames = new StringTokenizer(stackTrace, linebreak);	    final List<String> list = new ArrayList<String>();	    while (frames.hasMoreTokens()) {	        list.add(frames.nextToken());	    }	    return list.toArray(new String[list.size()]);	}
public String getNewLineText() {	    return newLine;	}
public static List<Field> getAllFieldsList(Class<?> cls) {	    if (cls == null) {	        throw new IllegalArgumentException("The class must not be null");	    }	    List<Field> allFields = new ArrayList<Field>();	    Class<?> currentClass = cls;	    while (currentClass != null) {	        final Field[] declaredFields = currentClass.getDeclaredFields();	        for (Field field : declaredFields) {	            allFields.add(field);	        }	        currentClass = currentClass.getSuperclass();	    }	    return allFields;	}
public static boolean equals(final CharSequence cs1, final CharSequence cs2) {	    if (cs1 == cs2) {	        return true;	    }	    if (cs1 == null || cs2 == null) {	        return false;	    }	    if (cs1 instanceof String && cs2 instanceof String) {	        return cs1.equals(cs2);	    }	    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));	}
public static String abbreviate(final String str, int offset, final int maxWidth) {	    if (str == null) {	        return null;	    }	    if (maxWidth < 4) {	        throw new IllegalArgumentException("Minimum abbreviation width is 4");	    }	    if (str.length() <= maxWidth) {	        return str;	    }	    if (offset > str.length()) {	        offset = str.length();	    }	    if (str.length() - offset < maxWidth - 3) {	        offset = str.length() - (maxWidth - 3);	    }	    final String abrevMarker = "...";	    if (offset <= 4) {	        return str.substring(0, maxWidth - 3) + abrevMarker;	    }	    if (maxWidth < 7) {	        throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");	    }	    if (offset + maxWidth - 3 < str.length()) {	        return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);	    }	    return abrevMarker + str.substring(str.length() - (maxWidth - 3));	}
public static Date parseDate(final String str, final Locale locale, final String... parsePatterns) throws ParseException {	    return parseDateWithLeniency(str, locale, parsePatterns, true);	}
public static String toString(final Object array, final String stringIfNull) {	    if (array == null) {	        return stringIfNull;	    }	    return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();	}
@Override	public int hashCode() {	    return toHashCode();	}
protected String getSummaryObjectEndText() {	    return summaryObjectEndText;	}
@Override	public void set(final String obj) {	    throw new UnsupportedOperationException("set() is unsupported");	}
protected void appendDetail(final StringBuffer buffer, final String fieldName, final boolean[] array) {	    buffer.append(arrayStart);	    for (int i = 0; i < array.length; i++) {	        if (i > 0) {	            buffer.append(arraySeparator);	        }	        appendDetail(buffer, fieldName, array[i]);	    }	    buffer.append(arrayEnd);	}
