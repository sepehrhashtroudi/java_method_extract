public abstract int translate(CharSequence input, int index, Writer out) throws IOException;
public final String translate(final CharSequence input) { [EOL]     if (input == null) { [EOL]         return null; [EOL]     } [EOL]     try { [EOL]         final StringWriter writer = new StringWriter(input.length() * 2); [EOL]         translate(input, writer); [EOL]         return writer.toString(); [EOL]     } catch (final IOException ioe) { [EOL]         throw new RuntimeException(ioe); [EOL]     } [EOL] }
public final void translate(final CharSequence input, final Writer out) throws IOException { [EOL]     if (out == null) { [EOL]         throw new IllegalArgumentException("The Writer must not be null"); [EOL]     } [EOL]     if (input == null) { [EOL]         return; [EOL]     } [EOL]     int pos = 0; [EOL]     final int len = input.length(); [EOL]     while (pos < len) { [EOL]         final int consumed = translate(input, pos, out); [EOL]         if (consumed == 0) { [EOL]             final char[] c = Character.toChars(Character.codePointAt(input, pos)); [EOL]             out.write(c); [EOL]             pos += c.length; [EOL]             continue; [EOL]         } [EOL]         for (int pt = 0; pt < consumed; pt++) { [EOL]             pos += Character.charCount(Character.codePointAt(input, pt)); [EOL]         } [EOL]     } [EOL] }
public final CharSequenceTranslator with(final CharSequenceTranslator... translators) { [EOL]     final CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1]; [EOL]     newArray[0] = this; [EOL]     System.arraycopy(translators, 0, newArray, 1, translators.length); [EOL]     return new AggregateTranslator(newArray); [EOL] }
public static String hex(final int codepoint) { [EOL]     return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH); [EOL] }
