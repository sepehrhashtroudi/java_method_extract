public static <T> EventListenerSupport<T> create(final Class<T> listenerInterface) { [EOL]     return new EventListenerSupport<T>(listenerInterface); [EOL] }
public L fire() { [EOL]     return proxy; [EOL] }
public void addListener(final L listener) { [EOL]     Validate.notNull(listener, "Listener object cannot be null."); [EOL]     listeners.add(listener); [EOL] }
int getListenerCount() { [EOL]     return listeners.size(); [EOL] }
public void removeListener(final L listener) { [EOL]     Validate.notNull(listener, "Listener object cannot be null."); [EOL]     listeners.remove(listener); [EOL] }
public L[] getListeners() { [EOL]     return listeners.toArray(prototypeArray); [EOL] }
private void writeObject(final ObjectOutputStream objectOutputStream) throws IOException { [EOL]     final ArrayList<L> serializableListeners = new ArrayList<L>(); [EOL]     ObjectOutputStream testObjectOutputStream = new ObjectOutputStream(new ByteArrayOutputStream()); [EOL]     for (final L listener : listeners) { [EOL]         try { [EOL]             testObjectOutputStream.writeObject(listener); [EOL]             serializableListeners.add(listener); [EOL]         } catch (final IOException exception) { [EOL]             testObjectOutputStream = new ObjectOutputStream(new ByteArrayOutputStream()); [EOL]         } [EOL]     } [EOL]     objectOutputStream.writeObject(serializableListeners.toArray(prototypeArray)); [EOL] }
private void readObject(final ObjectInputStream objectInputStream) throws IOException, ClassNotFoundException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final L[] listeners = (L[]) objectInputStream.readObject(); [EOL]     this.listeners = new CopyOnWriteArrayList<L>(listeners); [EOL]     @SuppressWarnings("unchecked") [EOL]     final Class<L> listenerInterface = (Class<L>) listeners.getClass().getComponentType(); [EOL]     initializeTransientFields(listenerInterface, Thread.currentThread().getContextClassLoader()); [EOL] }
private void initializeTransientFields(final Class<L> listenerInterface, final ClassLoader classLoader) { [EOL]     @SuppressWarnings("unchecked") [EOL]     final L[] array = (L[]) Array.newInstance(listenerInterface, 0); [EOL]     this.prototypeArray = array; [EOL]     createProxy(listenerInterface, classLoader); [EOL] }
private void createProxy(final Class<L> listenerInterface, final ClassLoader classLoader) { [EOL]     proxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader, new Class[] { listenerInterface }, createInvocationHandler())); [EOL] }
protected InvocationHandler createInvocationHandler() { [EOL]     return new ProxyInvocationHandler(); [EOL] }
@Override [EOL] public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable { [EOL]     for (final L listener : listeners) { [EOL]         method.invoke(listener, args); [EOL]     } [EOL]     return null; [EOL] }
