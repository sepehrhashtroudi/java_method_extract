/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:21:03 GMT 2021
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BackgroundInitializer_ESTest extends BackgroundInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn("", "p!,").when(callable0).call();
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0);
      callableBackgroundInitializer0.getTaskCount();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.get();
      assertTrue(callableBackgroundInitializer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0);
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.get();
      callableBackgroundInitializer0.getTaskCount();
      callableBackgroundInitializer0.getActiveExecutor();
      ExecutorService executorService0 = callableBackgroundInitializer0.getActiveExecutor();
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Object>(callable1, executorService0);
      callableBackgroundInitializer1.isStarted();
      Callable<Callable<Delayed>> callable2 = (Callable<Callable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Callable<Delayed>> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Callable<Delayed>>(callable2);
      ExecutorService executorService1 = callableBackgroundInitializer2.getExternalExecutor();
      assertNull(executorService1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      Callable<Callable<Object>> callable0 = (Callable<Callable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      CallableBackgroundInitializer<Callable<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Object>>(callable0);
      callableBackgroundInitializer0.initialize();
      String string0 = "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer";
      multiBackgroundInitializer0.addInitializer("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", callableBackgroundInitializer0);
      Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Integer>(callable1);
      callableBackgroundInitializer1.start();
      callableBackgroundInitializer0.getTaskCount();
      Callable<Delayed> callable2 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0);
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Delayed>(callable2, scheduledThreadPoolExecutor0);
      callableBackgroundInitializer2.getTaskCount();
      multiBackgroundInitializer0.start();
      callableBackgroundInitializer2.start();
      scheduledThreadPoolExecutor0.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer2.setExternalExecutor(scheduledThreadPoolExecutor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set ExecutorService after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Callable<Callable<Object>> callable0 = (Callable<Callable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Callable<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Object>>(callable0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1346, threadPoolExecutor_DiscardPolicy0);
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0);
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.getTaskCount();
      callableBackgroundInitializer0.getFuture();
      callableBackgroundInitializer0.getTaskCount();
      Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Integer>(callable1);
      ExecutorService executorService0 = callableBackgroundInitializer1.getExternalExecutor();
      assertNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      String string0 = "K-taBr<wO1<WT";
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      int int0 = 440;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(440, threadPoolExecutor_CallerRunsPolicy0);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(440, 440, 0L, timeUnit0, blockingQueue0, threadFactory0);
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0, threadPoolExecutor0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("K-taBr<wO1<WT");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "K-taBr<wO1<WT");
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      MockThread mockThread3 = new MockThread(mockThread2, "K-taBr<wO1<WT");
      MockThread mockThread4 = new MockThread(threadGroup0, mockThread3, "", 0L);
      scheduledThreadPoolExecutor0.execute(mockThread4);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.start();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.concurrent.FutureTask cannot be cast to java.util.concurrent.RunnableScheduledFuture
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(415, threadFactory0);
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0, scheduledThreadPoolExecutor0);
      ExecutorService executorService0 = callableBackgroundInitializer0.getExternalExecutor();
      assertSame(executorService0, scheduledThreadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      ExecutorService executorService0 = callableBackgroundInitializer0.getExternalExecutor();
      assertNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Callable<ForkJoinTask<Object>> callable0 = (Callable<ForkJoinTask<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      ExecutorService executorService0 = null;
      CallableBackgroundInitializer<ForkJoinTask<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<ForkJoinTask<Object>>(callable0, (ExecutorService) null);
      callableBackgroundInitializer0.setExternalExecutor((ExecutorService) null);
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.getTaskCount();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.setExternalExecutor((ExecutorService) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set ExecutorService after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask.getPool();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0, (ExecutorService) null);
      callableBackgroundInitializer0.start();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.setExternalExecutor((ExecutorService) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set ExecutorService after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer((ExecutorService) null);
      multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer0.getTaskCount();
      multiBackgroundInitializer0.getTaskCount();
      multiBackgroundInitializer0.initialize();
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      callableBackgroundInitializer0.start();
      multiBackgroundInitializer0.setExternalExecutor((ExecutorService) null);
      multiBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.isStarted();
      multiBackgroundInitializer0.getTaskCount();
      Callable<String> callable1 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable1).call();
      CallableBackgroundInitializer<String> callableBackgroundInitializer1 = new CallableBackgroundInitializer<String>(callable1);
      callableBackgroundInitializer1.start();
      callableBackgroundInitializer1.get();
      callableBackgroundInitializer1.initialize();
      assertTrue(callableBackgroundInitializer1.isStarted());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      boolean boolean0 = callableBackgroundInitializer0.isStarted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      multiBackgroundInitializer0.getTaskCount();
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0);
      callableBackgroundInitializer0.initialize();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1);
      LinkedBlockingQueue<Callable<Object>> linkedBlockingQueue0 = new LinkedBlockingQueue<Callable<Object>>(1);
      callableBackgroundInitializer0.getTaskCount();
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      linkedBlockingQueue0.add(callable1);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      forkJoinPool0.invokeAll((Collection<? extends Callable<Object>>) linkedBlockingQueue0, (-1L), timeUnit0);
      callableBackgroundInitializer0.setExternalExecutor(forkJoinPool0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Callable<Callable<Object>> callable0 = (Callable<Callable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Callable<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Object>>(callable0);
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.getActiveExecutor();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0, scheduledThreadPoolExecutor0);
      callableBackgroundInitializer0.setExternalExecutor(scheduledThreadPoolExecutor0);
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.start();
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Object>(callable1);
      callableBackgroundInitializer1.getTaskCount();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer1.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      scheduledThreadPoolExecutor0.getExecuteExistingDelayedTasksAfterShutdownPolicy();
      scheduledThreadPoolExecutor0.setRemoveOnCancelPolicy(false);
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(scheduledThreadPoolExecutor0);
      multiBackgroundInitializer0.setExternalExecutor(scheduledThreadPoolExecutor0);
      multiBackgroundInitializer0.initialize();
      Callable<Callable<Object>> callable0 = (Callable<Callable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Callable<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Object>>(callable0);
      callableBackgroundInitializer0.getTaskCount();
      multiBackgroundInitializer0.addInitializer(",v#MATL||Dn$=", callableBackgroundInitializer0);
      callableBackgroundInitializer0.setExternalExecutor(scheduledThreadPoolExecutor0);
      multiBackgroundInitializer0.addInitializer(",v#MATL||Dn$=", callableBackgroundInitializer0);
      Callable<Delayed> callable1 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Delayed>(callable1);
      callableBackgroundInitializer1.start();
      callableBackgroundInitializer1.getFuture();
      callableBackgroundInitializer1.getFuture();
      callableBackgroundInitializer1.getExternalExecutor();
      multiBackgroundInitializer0.getTaskCount();
      Callable<Integer> callable2 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Integer>(callable2);
      callableBackgroundInitializer2.getTaskCount();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer3 = null;
      try {
        callableBackgroundInitializer3 = new CallableBackgroundInitializer<Object>((Callable<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.CallableBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0);
      callableBackgroundInitializer0.getTaskCount();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.get();
      assertTrue(callableBackgroundInitializer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-5538), 0, (-5538), timeUnit0, priorityBlockingQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }
}
