/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:41:17 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.IllegalFormatConversionException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.Range;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(3);
      Range<Integer> range0 = Range.between(integer0, integer1);
      Range<Integer> range1 = Range.is(integer0);
      Range<Integer> range2 = range0.intersectionWith(range1);
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.is(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(47, 0, (-545)).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) range0, comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("D_B:~XehYpWpOC:q]X_", "D_B:~XehYpWpOC:q]X_", "D_B:~XehYpWpOC:q]X_").when(comparator1).toString();
      doReturn(0, 1039, (-545), (-2033)).when(comparator1).compare(any() , any());
      Range<Object> range2 = Range.between((Object) range1, (Object) range0, comparator1);
      Range<Object> range3 = range2.intersectionWith(range1);
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertNotSame(range3, range2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range<String> range0 = Range.between("", ", element2=");
      Comparator<Range<String>> comparator0 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      doReturn((-139), (-139), 0, (-139), (-1674)).when(comparator0).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range1 = Range.between(range0, range0, comparator0);
      Range<Range<String>> range2 = range1.intersectionWith(range1);
      Comparator<Range<String>> comparator1 = range2.getComparator();
      Range<Range<String>> range3 = Range.is(range0, comparator1);
      // Undeclared exception!
      try { 
        range3.intersectionWith(range2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range [[.., element2=]..[.., element2=]]
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-10), (-1035)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("%4D8,", comparator0);
      Range<String> range1 = Range.is("%4D8,");
      boolean boolean0 = range0.isBeforeRange(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1564), (-241)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("j(P0Sj", "", comparator0);
      Range<String> range1 = Range.between("", "", (Comparator<String>) null);
      boolean boolean0 = range0.isAfterRange(range1);
      assertTrue(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("", comparator0);
      Range<String> range1 = Range.is(", element2=");
      boolean boolean0 = range0.containsRange(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range<String> range0 = Range.is("Elements in a range must not be null: element1=");
      boolean boolean0 = range0.isEndedBy("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Range<Integer> range0 = Range.is(integer0);
      range0.getComparator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(47, 0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) range0, comparator0);
      Object object0 = range1.getMaximum();
      boolean boolean0 = range1.isStartedBy(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      Range<Integer> range0 = Range.between(integer1, integer0);
      Range<Integer> range1 = Range.is(integer0);
      Range<Integer> range2 = range0.intersectionWith(range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1451)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("!R3q", comparator0);
      String string0 = range0.toString("(x 0oq-IW,yyw#h*Sl");
      assertEquals("(x 0oq-IW,yyw#h*Sl", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1451)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("!R3q", comparator0);
      String string0 = range0.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3988), 2617).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("%4D8,", comparator0);
      boolean boolean0 = range0.isBeforeRange(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("bXp[o%De<Cq", comparator0);
      // Undeclared exception!
      try { 
        range0.toString("bXp[o%De<Cq");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'D'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Range<Integer> range0 = Range.between(integer0, integer0);
      // Undeclared exception!
      try { 
        range0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3296).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("!R3q", comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3296).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is((Object) range0, comparator1);
      Range<Object> range2 = Range.between((Object) "3P~}zBq", (Object) "", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range1.isOverlappedBy(range2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(2584);
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.isAfter("Element is null");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.is((Object) null, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(17);
      Range<Integer> range0 = Range.between(integer0, integer0);
      // Undeclared exception!
      try { 
        Range.is((Object) range0, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.is((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(226);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) "[..]", (Object) integer0, comparator0);
      Range<Object> range1 = Range.is((Object) integer0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.intersectionWith(range1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Object> range0 = Range.is((Object) integer0, (Comparator<Object>) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.elementCompareTo(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-2468));
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.contains("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(395);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "", comparator0);
      // Undeclared exception!
      try { 
        Range.between((Object) integer0, (Object) range0, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1451)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("!R3q", comparator0);
      String string0 = range0.toString();
      assertEquals("[!R3q..!R3q]", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "", comparator0);
      Integer integer0 = new Integer((-1));
      Range<Integer> range1 = Range.between(integer0, integer0);
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range2 = Range.is(range0, comparator1);
      Object object0 = range2.getMinimum();
      boolean boolean0 = range1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("", comparator0);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-4453));
      Range<Integer> range0 = Range.is(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) integer0, comparator0);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range<String> range0 = Range.between("j>YC4.dSF9\"+@3eMr@>", "j>YC4.dSF9\"+@3eMr@>", (Comparator<String>) null);
      Range<String> range1 = Range.between("Owi7}v+X<cZ\")j", "Owi7}v+X<cZ\")j", (Comparator<String>) null);
      boolean boolean0 = range0.isOverlappedBy(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("", comparator0);
      Range<String> range1 = Range.is("Elements in a range must not be null: element1=");
      boolean boolean0 = range0.isOverlappedBy(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1451)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("!R3q", comparator0);
      Range<String> range1 = Range.between("!R3q", "");
      boolean boolean0 = range0.isOverlappedBy(range1);
      assertTrue(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(3);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.isBefore(integer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3296, (-3213)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("!R3q", comparator0);
      boolean boolean0 = range0.isAfter("!R3q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("Xj=7cm$m", "oO", comparator0);
      boolean boolean0 = range0.contains("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1564), (-241)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("j(P0Sj", "", comparator0);
      boolean boolean0 = range0.contains("j(P0Sj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range<String> range0 = Range.between("", ", element2=");
      boolean boolean0 = range0.contains("k.v4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("Xj=7cm$m", "oO", comparator0);
      range0.hashCode();
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between(object0, object0, comparator0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyString() , anyString());
      Range<String> range1 = Range.between("$VALUES", "$VALUES", comparator1);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator2).compare(any() , any());
      Range<Object> range2 = Range.between((Object) range0, (Object) range1, comparator2);
      Range<Object> range3 = range0.intersectionWith(range2);
      Range<Integer> range4 = Range.is(integer0);
      boolean boolean0 = range3.equals(range4);
      assertFalse(boolean0);
      assertFalse(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(4004).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator0);
      boolean boolean0 = range1.isBeforeRange((Range<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(4004).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator0);
      boolean boolean0 = range1.isOverlappedBy((Range<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer((-929));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-929)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, comparator0);
      boolean boolean0 = range0.isAfterRange((Range<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range<String> range0 = Range.between("", "}$p.medQ&,.:Ku");
      boolean boolean0 = range0.isAfterRange(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range<String> range0 = Range.is("pKzJ'CmBAFa}&8mMy");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(955, 955, (-1614), (-20)).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between((Object) "8BSsazZjZ<nSFi28~ ", (Object) range0, comparator0);
      boolean boolean0 = range1.containsRange(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer((-43));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      boolean boolean0 = range0.containsRange((Range<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer((-143));
      Range<Integer> range0 = Range.is(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between((Object) range0, (Object) range0, comparator0);
      int int0 = range1.elementCompareTo(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer((-143));
      Range<Integer> range0 = Range.is(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between((Object) range0, (Object) range0, comparator0);
      // Undeclared exception!
      try { 
        range1.elementCompareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Element is null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range<String> range0 = Range.is("pKzJ'CmBAFa}&8mMy");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(955, 955, 955).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between((Object) "^RBl5F79];!", (Object) range0, comparator0);
      int int0 = range1.elementCompareTo("pKzJ'CmBAFa}&8mMy");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer((-1202));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2566)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, comparator0);
      boolean boolean0 = range0.isBefore((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range<String> range0 = Range.is("pKzJ'CmBAFa}&8mMy");
      boolean boolean0 = range0.isBefore("pKzJ'CmBAFa}&8mMy");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) "", comparator0);
      boolean boolean0 = range0.isEndedBy("Elements in a range must not be null: element1=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, comparator0);
      boolean boolean0 = range0.isEndedBy((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range<String> range0 = Range.is("pKzJ'CmBAFa}&8mMy");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(955, 955).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between((Object) "8BSsazZjZ<nSFi28~ ", (Object) range0, comparator0);
      boolean boolean0 = range1.isEndedBy("pKzJ'CmBAFa}&8mMy");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer((-43));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2081), (-1)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      boolean boolean0 = range0.isStartedBy(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.isStartedBy((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2862, (-466)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("", comparator0);
      int int0 = range0.elementCompareTo("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3296).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("!R3q", comparator0);
      boolean boolean0 = range0.isAfter((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.isAfter("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer((-929));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("|H").when(comparator0).toString();
      doReturn(12, 611, (-929), 611, 0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      Comparator<Integer> comparator1 = range0.getComparator();
      Range<Integer> range1 = Range.between(integer0, integer0, comparator1);
      boolean boolean0 = range0.isOverlappedBy(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("", comparator0);
      boolean boolean0 = range0.contains((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(4004, 2862, 4004).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator0);
      boolean boolean0 = range1.containsRange(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.isNaturalOrdering();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) "", comparator0);
      boolean boolean0 = range0.isNaturalOrdering();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer((-1202));
      Range<Integer> range0 = Range.between(integer0, integer0);
      Comparator<Integer> comparator0 = range0.getComparator();
      // Undeclared exception!
      try { 
        Range.between(integer0, (Integer) null, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=-1202, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        Range.between((Integer) null, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=1
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range<String> range0 = Range.between("", "");
      // Undeclared exception!
      try { 
        range0.toString("$lYq*6A5%av<PLnRV$");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
}
