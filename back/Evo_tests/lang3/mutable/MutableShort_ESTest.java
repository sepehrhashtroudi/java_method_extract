/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 04:44:18 GMT 2021
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableShort_ESTest extends MutableShort_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      MutableShort mutableShort1 = new MutableShort((short)1);
      boolean boolean0 = mutableShort1.equals(mutableShort0);
      assertFalse(boolean0);
      assertFalse(mutableShort0.equals((Object)mutableShort1));
      assertEquals((short)1, (short)mutableShort1.toShort());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short) (-1));
      Short short0 = mutableShort0.toShort();
      assertEquals("-1", mutableShort0.toString());
      
      mutableShort0.subtract((Number) short0);
      assertEquals((short)0, mutableShort0.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      mutableShort0.decrement();
      mutableShort0.add((Number) mutableShort0);
      assertEquals((-2), mutableShort0.intValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(1564.23111);
      MutableShort mutableShort0 = new MutableShort(double0);
      Short short0 = mutableShort0.toShort();
      assertEquals((short)1564, (short)short0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      mutableShort0.increment();
      short short0 = mutableShort0.shortValue();
      assertEquals(1.0, mutableShort0.doubleValue(), 0.01);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      mutableShort0.decrement();
      short short0 = mutableShort0.shortValue();
      assertEquals((-1), mutableShort0.intValue());
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.setValue((short)2050);
      long long0 = mutableShort0.longValue();
      assertEquals(2050L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      mutableShort0.decrement();
      long long0 = mutableShort0.longValue();
      assertEquals((short) (-1), (short)mutableShort0.toShort());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      mutableShort0.increment();
      int int0 = mutableShort0.intValue();
      assertEquals(1.0, mutableShort0.doubleValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short) (-1));
      int int0 = mutableShort0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Float float0 = new Float(1068.79F);
      MutableShort mutableShort0 = new MutableShort(float0);
      Short short0 = mutableShort0.getValue();
      assertEquals((short)1068, (short)short0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(0.0);
      MutableShort mutableShort0 = new MutableShort(double0);
      mutableShort0.add((short) (-445));
      mutableShort0.getValue();
      assertEquals((short) (-445), (short)mutableShort0.toShort());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.subtract((short)1);
      mutableShort0.getValue();
      assertEquals((byte) (-1), mutableShort0.byteValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      mutableShort0.increment();
      float float0 = mutableShort0.floatValue();
      assertEquals(1.0, mutableShort0.doubleValue(), 0.01);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.add((short) (-2801));
      float float0 = mutableShort0.floatValue();
      assertEquals((-2801L), mutableShort0.longValue());
      assertEquals((-2801.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)3614);
      double double0 = mutableShort0.doubleValue();
      assertEquals(3614.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      mutableShort0.decrement();
      double double0 = mutableShort0.doubleValue();
      assertEquals((-1L), mutableShort0.longValue());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      // Undeclared exception!
      try { 
        mutableShort0.subtract((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short) (-3428));
      // Undeclared exception!
      try { 
        mutableShort0.setValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)1);
      // Undeclared exception!
      try { 
        mutableShort0.compareTo((MutableShort) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      // Undeclared exception!
      try { 
        mutableShort0.add((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableShort mutableShort0 = null;
      try {
        mutableShort0 = new MutableShort((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      short short0 = mutableShort0.shortValue();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      MutableShort mutableShort1 = new MutableShort("0");
      mutableShort0.subtract((short) (-2572));
      int int0 = mutableShort0.compareTo(mutableShort1);
      assertFalse(mutableShort1.equals((Object)mutableShort0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      MutableShort mutableShort1 = new MutableShort("0");
      mutableShort0.subtract((short) (-2572));
      int int0 = mutableShort1.compareTo(mutableShort0);
      assertFalse(mutableShort1.equals((Object)mutableShort0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      int int0 = mutableShort0.compareTo(mutableShort0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      MutableShort mutableShort1 = new MutableShort("0");
      mutableShort0.subtract((short) (-2572));
      boolean boolean0 = mutableShort1.equals(mutableShort0);
      assertEquals(2572.0F, mutableShort0.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      boolean boolean0 = mutableShort0.equals(mutableShort0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableShort mutableShort0 = new MutableShort(long0);
      boolean boolean0 = mutableShort0.equals("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      float float0 = mutableShort0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      Short short0 = mutableShort0.getValue();
      mutableShort0.add((Number) short0);
      assertEquals((short)0, mutableShort0.shortValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.subtract((Number) mutableShort0);
      assertEquals(0L, mutableShort0.longValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      int int0 = mutableShort0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      Short short0 = mutableShort0.getValue();
      mutableShort0.setValue((Number) short0);
      assertEquals((short)0, (short)mutableShort0.toShort());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      long long0 = mutableShort0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      Short short0 = mutableShort0.toShort();
      assertEquals((short)0, (short)short0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableShort mutableShort0 = new MutableShort(long0);
      String string0 = mutableShort0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)3293);
      mutableShort0.hashCode();
      assertEquals((short)3293, (short)mutableShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      double double0 = mutableShort0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableShort mutableShort0 = null;
      try {
        mutableShort0 = new MutableShort((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);
      }
  }
}
