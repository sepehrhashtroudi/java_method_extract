/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 03:58:42 GMT 2021
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompareToBuilder_ESTest extends CompareToBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[7];
      compareToBuilder0.append(doubleArray0, doubleArray1);
      boolean[] booleanArray0 = new boolean[8];
      compareToBuilder0.append(booleanArray0, booleanArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-1L), 0L);
      double[] doubleArray0 = new double[0];
      compareToBuilder1.append(doubleArray0, doubleArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append(0L, (-317L));
      compareToBuilder0.append((byte[]) null, (byte[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, (-317L));
      char[] charArray0 = new char[2];
      compareToBuilder1.append(charArray0, charArray0);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)862;
      short[] shortArray1 = new short[6];
      compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('d', '`');
      long[] longArray0 = new long[2];
      compareToBuilder1.append(longArray0, longArray0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) compareToBuilder0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append(objectArray0, objectArray1, comparator0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      char[] charArray1 = new char[6];
      compareToBuilder0.append(charArray0, charArray1);
      Object[] objectArray0 = new Object[2];
      compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('a', '7');
      compareToBuilder1.append(true, true);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(4246.6, 0.0);
      compareToBuilder1.append(474.6547F, 474.6547F);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[6];
      char[] charArray1 = new char[6];
      charArray1[0] = 'g';
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray1);
      compareToBuilder1.append((byte)2, (byte)2);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((-1L), 0L);
      compareToBuilder0.append(0L, (long) 0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(3474);
      int int0 = compareToBuilder1.toComparison();
      assertEquals(3474, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = new Object[3];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append(objectArray0, objectArray1, comparator0);
      int int0 = compareToBuilder0.toComparison();
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 878;
      String[] stringArray0 = new String[14];
      int int0 = CompareToBuilder.reflectionCompare((Object) intArray0[0], (Object) intArray0[2], stringArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[8] = 244;
      String[] stringArray0 = new String[1];
      int int0 = CompareToBuilder.reflectionCompare((Object) intArray0[1], (Object) intArray0[8], stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = new CompareToBuilder();
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((byte[]) null, (byte[]) null);
      compareToBuilder2.append((-304.058F), 1.6F);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[3];
      int int0 = CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) compareToBuilder2, false, (Class<?>) class0, stringArray0);
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Integer integer0 = new Integer(18);
      Integer integer1 = new Integer(0);
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[3] = 1550;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare((Object) intArray0[3], (Object) intArray0[2], (Collection<String>) linkedList0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(6);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, (Collection<String>) linkedList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append(2074L, 2765L);
      compareToBuilder0.build();
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper(36);
      compareToBuilder0.build();
      assertEquals(36, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[7];
      compareToBuilder0.append(doubleArray0, doubleArray1);
      compareToBuilder0.appendSuper(0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Object[] objectArray0 = new Object[7];
      Object[] objectArray1 = new Object[4];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray1);
      int[] intArray0 = new int[6];
      compareToBuilder1.append(intArray0, intArray0);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[7];
      compareToBuilder0.append(doubleArray0, doubleArray1);
      Object[] objectArray0 = new Object[2];
      compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) null, (Object) null);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, (-317L));
      Integer integer0 = new Integer(998);
      compareToBuilder1.append((Object) integer0, (Object) integer0);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0.0F, 0.0F);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append(0.0F, (-2477.896F));
      short[] shortArray0 = new short[8];
      compareToBuilder0.append(shortArray0, shortArray0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append(0.0, 2621.8501657804);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, (Object) "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) compareToBuilder0, object0, stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare(object0, (Object) null, (Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) integer0, (Object) "Unexpected IllegalAccessException", (Collection<String>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) compareToBuilder0, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) comparator0;
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) compareToBuilder0;
      // Undeclared exception!
      try { 
        compareToBuilder0.append(objectArray0, objectArray1, (Comparator<?>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.util.Comparator$MockitoMock$374700374 cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[8];
      objectArray0[5] = (Object) "6 chXN+E|,Q`m16a";
      // Undeclared exception!
      try { 
        compareToBuilder0.append(objectArray0[5], (Object) compareToBuilder0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      char[] charArray0 = new char[8];
      char[] charArray1 = new char[0];
      compareToBuilder0.append(charArray0, charArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[2];
      char[] charArray1 = new char[6];
      compareToBuilder0.append(charArray0, charArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[8];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0, (Comparator<?>) null);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((short) (-2030), (short)0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        compareToBuilder0.append((Object) "", (Object) integer0, (Comparator<?>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) compareToBuilder0, (Object) compareToBuilder0, (Comparator<?>) comparator0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "", object0, true, (Class<?>) class0, stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, (Object) compareToBuilder0, false, (Class<?>) class0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      String[] stringArray0 = new String[0];
      int int0 = CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) compareToBuilder0, stringArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int int0 = compareToBuilder0.toComparison();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[5];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = new boolean[9];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      compareToBuilder0.append('P', 'j');
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = new boolean[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      boolean[] booleanArray0 = new boolean[6];
      compareToBuilder0.append(booleanArray0, (boolean[]) null);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = new boolean[1];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append(1033.69209286358, 899.94451403881);
      boolean[] booleanArray0 = new boolean[0];
      compareToBuilder0.append(booleanArray0, booleanArray0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[8];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-900L);
      float[] floatArray1 = new float[5];
      compareToBuilder0.append(floatArray0, floatArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[1];
      compareToBuilder0.append(floatArray0, floatArray1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[5];
      float[] floatArray1 = new float[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      float[] floatArray0 = new float[2];
      compareToBuilder0.append(floatArray0, (float[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((float[]) null, floatArray0);
      compareToBuilder1.append(0.0, 2621.8501657804);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[3];
      compareToBuilder0.append(floatArray0, floatArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      double[] doubleArray0 = new double[4];
      compareToBuilder0.append(doubleArray0, (double[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[6];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[8];
      compareToBuilder0.append(byteArray0, byteArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      byte[] byteArray0 = new byte[8];
      compareToBuilder0.append(byteArray0, (byte[]) null);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[9];
      compareToBuilder0.append((byte[]) null, byteArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[6];
      compareToBuilder0.append(byteArray0, byteArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((-463.38F), (-1.0F));
      byte[] byteArray0 = new byte[9];
      compareToBuilder0.append(byteArray0, byteArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      char[] charArray1 = new char[6];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray1);
      float[] floatArray0 = new float[0];
      compareToBuilder1.append(floatArray0, floatArray0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "_", (Object) "9#[P-v!4:Zm");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[6];
      char[] charArray1 = new char[6];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[9];
      compareToBuilder0.append((char[]) null, charArray0);
      compareToBuilder0.append((float[]) null, (float[]) null);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object) null, object0, comparator0);
      char[] charArray0 = new char[9];
      compareToBuilder0.append(charArray0, charArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[8];
      compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      short[] shortArray0 = new short[13];
      short[] shortArray1 = new short[8];
      compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      short[] shortArray0 = new short[7];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, (short[]) null);
      compareToBuilder1.append((int) (short) (-76), (int) (byte) (-76));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[6];
      compareToBuilder0.append((short[]) null, shortArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[4];
      Object[] objectArray1 = new Object[0];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray1, objectArray0, comparator0);
      short[] shortArray0 = new short[2];
      compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[9];
      compareToBuilder0.append(intArray0, intArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      int[] intArray0 = new int[9];
      compareToBuilder0.append(intArray0, (int[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[9];
      compareToBuilder0.append((int[]) null, intArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray1);
      double[] doubleArray0 = new double[0];
      compareToBuilder1.append(doubleArray0, doubleArray0);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-463.38F), (-1.0F));
      int[] intArray0 = new int[3];
      compareToBuilder1.append(intArray0, intArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[9];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[7];
      compareToBuilder0.append(longArray0, longArray1);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      long[] longArray0 = new long[6];
      compareToBuilder0.append(longArray0, (long[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[11];
      compareToBuilder0.append((long[]) null, longArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[1];
      compareToBuilder0.append(longArray0, longArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[3];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = new Object[2];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray1, comparator0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      Object[] objectArray0 = new Object[6];
      Object[] objectArray1 = new Object[3];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append(objectArray0, objectArray1, comparator0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Object[] objectArray0 = new Object[8];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, (Object[]) null, (Comparator<?>) null);
      compareToBuilder1.append((short)0, (short)0);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[4];
      compareToBuilder0.append((Object[]) null, objectArray0, (Comparator<?>) null);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[3];
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[7];
      compareToBuilder0.append((double[]) null, doubleArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object[]) stringArray0, (Object[]) stringArray0, (Comparator<?>) comparator0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append(true, false);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append(false, true);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(true, true);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[7];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((double[]) null, doubleArray0);
      compareToBuilder1.append((float) 0, (float) 2427);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-463.38F), (-1.0F));
      long[] longArray0 = new long[9];
      compareToBuilder1.append((long[]) null, longArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append('S', 'K');
      compareToBuilder0.append((-846.131904242), (double) (-1038));
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-2524.258622), (-2524.258622));
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)123, (byte)123);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append((byte)50, (byte)0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((byte) (-1), (byte)43);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('%', '%');
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append('?', 'h');
      compareToBuilder0.append(false, true);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append((short) (byte)89, (short)1);
      compareToBuilder0.append('2', '2');
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[9];
      short[] shortArray1 = new short[9];
      shortArray1[0] = (short)64;
      compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short) (-1028), (short) (-1028));
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append(1359, 43);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append(0, 336);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[4];
      Object[] objectArray1 = new Object[0];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append(objectArray1, objectArray0, comparator0);
      compareToBuilder0.append((int) (short)36, (-656));
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(1972, 1972);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append(0L, (-317L));
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object) "1&n", object0, (Comparator<?>) comparator0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, 0L);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object) compareToBuilder0, (Object) null, (Comparator<?>) comparator0);
      compareToBuilder0.append((-2103L), (-2103L));
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(2074L, 2765L);
      compareToBuilder1.append((short)0, (short)0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) "!Z;sl 2pEf u", object0, (Comparator<?>) comparator0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) compareToBuilder0;
      Object[] objectArray1 = new Object[2];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append(objectArray0, objectArray1, comparator0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[4];
      Object[] objectArray1 = new Object[0];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray1, objectArray0, comparator0);
      compareToBuilder1.append(objectArray0[0], objectArray0[2]);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append('S', 'K');
      compareToBuilder0.appendSuper(8);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper(89);
      compareToBuilder0.append((byte)28, (byte)28);
      assertEquals(89, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = new Integer((-1073));
      Integer integer1 = Integer.getInteger((String) null, (-1073));
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[6];
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, false, (Class<?>) class0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(1798);
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) compareToBuilder0, object0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, (Object) "Unexpected IllegalAccessException", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle", (Object) "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      int int0 = CompareToBuilder.reflectionCompare(object0, (Object) compareToBuilder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) compareToBuilder0, (Collection<String>) linkedList0);
      assertEquals(0, int0);
      assertEquals(0, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Integer integer0 = compareToBuilder0.build();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) integer0, (Object) null, false, (Class<?>) class0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int int0 = CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) compareToBuilder0, false);
      assertEquals(0, int0);
      assertEquals(0, (int)compareToBuilder0.build());
  }
}
