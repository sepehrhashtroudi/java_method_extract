/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:36:26 GMT 2021
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.apache.commons.lang3.tuple.Triple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Triple_ESTest extends Triple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutableTriple<String, Integer, String> immutableTriple0 = new ImmutableTriple<String, Integer, String>("S)Mf3MOw$KIu ", integer0, "S)Mf3MOw$KIu ");
      MutableTriple<Integer, Triple<String, Integer, String>, String> mutableTriple0 = MutableTriple.of(integer0, (Triple<String, Integer, String>) immutableTriple0, "n-0>k");
      String string0 = mutableTriple0.toString("n-0>k");
      assertEquals("n-0>k", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableTriple<Object, ImmutableTriple<Object, String, Object>, Object> mutableTriple0 = new MutableTriple<Object, ImmutableTriple<Object, String, Object>, Object>();
      String string0 = mutableTriple0.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableTriple<Integer, String, MutableTriple<Object, String, Object>> mutableTriple0 = new MutableTriple<Integer, String, MutableTriple<Object, String, Object>>();
      MutableTriple<Object, String, Object> mutableTriple1 = mutableTriple0.getRight();
      assertNull(mutableTriple1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableTriple<String, Integer, String> mutableTriple0 = new MutableTriple<String, Integer, String>();
      MutableTriple<String, String, Integer> mutableTriple1 = MutableTriple.of("pg", (String) null, (Integer) null);
      ImmutableTriple<String, MutableTriple<String, String, Integer>, MutableTriple<String, Integer, String>> immutableTriple0 = ImmutableTriple.of("pg", mutableTriple1, mutableTriple0);
      Object object0 = immutableTriple0.getMiddle();
      ImmutableTriple<Integer, Integer, Object> immutableTriple1 = new ImmutableTriple<Integer, Integer, Object>((Integer) null, (Integer) null, object0);
      Object object1 = immutableTriple1.getRight();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableTriple<Object, Object, Integer> mutableTriple0 = new MutableTriple<Object, Object, Integer>();
      Object object0 = mutableTriple0.getMiddle();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableTriple<Integer, Integer, Integer> mutableTriple0 = MutableTriple.of(integer0, integer0, integer0);
      Integer integer1 = mutableTriple0.getMiddle();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableTriple<Integer, String, MutableTriple<Object, String, Object>> mutableTriple0 = new MutableTriple<Integer, String, MutableTriple<Object, String, Object>>();
      Integer integer0 = mutableTriple0.getLeft();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(36);
      ImmutableTriple<Object, Integer, String> immutableTriple0 = ImmutableTriple.of((Object) "", integer0, (String) null);
      Object object0 = immutableTriple0.getLeft();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(2382);
      MutableTriple<Integer, Integer, String> mutableTriple0 = new MutableTriple<Integer, Integer, String>(integer0, integer0, "");
      Integer integer1 = new Integer(41);
      ImmutableTriple<Integer, Integer, String> immutableTriple0 = ImmutableTriple.of(integer1, integer1, "");
      int int0 = mutableTriple0.compareTo((Triple<Integer, Integer, String>) immutableTriple0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableTriple<Integer, MutableTriple<Object, Object, Object>, Integer> mutableTriple0 = new MutableTriple<Integer, MutableTriple<Object, Object, Object>, Integer>();
      Integer integer0 = new Integer(0);
      MutableTriple<Object, Object, Object> mutableTriple1 = new MutableTriple<Object, Object, Object>();
      MutableTriple<Integer, MutableTriple<Object, Object, Object>, Integer> mutableTriple2 = new MutableTriple<Integer, MutableTriple<Object, Object, Object>, Integer>(integer0, mutableTriple1, integer0);
      int int0 = mutableTriple0.compareTo((Triple<Integer, MutableTriple<Object, Object, Object>, Integer>) mutableTriple2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableTriple<ImmutableTriple<String, Object, Object>, MutableTriple<Object, String, String>, Integer> mutableTriple0 = new MutableTriple<ImmutableTriple<String, Object, Object>, MutableTriple<Object, String, String>, Integer>();
      // Undeclared exception!
      try { 
        mutableTriple0.toString("%O>u\"v%r");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'O'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableTriple<Integer, String, MutableTriple<String, Object, Object>> mutableTriple0 = new MutableTriple<Integer, String, MutableTriple<String, Object, Object>>();
      // Undeclared exception!
      try { 
        mutableTriple0.compareTo((Triple<Integer, String, MutableTriple<String, Object, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.Triple", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableTriple<String, String, Object> mutableTriple0 = MutableTriple.of("Zb)8`7!s", "4h?e+N|", (Object) "Zb)8`7!s");
      MutableTriple<Object, String, String> mutableTriple1 = new MutableTriple<Object, String, String>();
      MutableTriple<Triple<Integer, Object, Object>, MutableTriple<String, String, Object>, MutableTriple<Object, String, String>> mutableTriple2 = new MutableTriple<Triple<Integer, Object, Object>, MutableTriple<String, String, Object>, MutableTriple<Object, String, String>>((Triple<Integer, Object, Object>) null, mutableTriple0, mutableTriple1);
      Integer integer0 = new Integer(1);
      ImmutableTriple<Integer, Object, String> immutableTriple0 = new ImmutableTriple<Integer, Object, String>(integer0, mutableTriple2, "(Zb)8`7!s,4h?e+N|,Zb)8`7!s)");
      ImmutableTriple<Integer, Object, String> immutableTriple1 = ImmutableTriple.of(integer0, (Object) "Zb)8`7!s", "Zb)8`7!s");
      // Undeclared exception!
      try { 
        immutableTriple0.compareTo((Triple<Integer, Object, String>) immutableTriple1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.commons.lang3.tuple.Triple
         //
         verifyException("org.apache.commons.lang3.tuple.Triple", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableTriple<Object, String, Integer> mutableTriple0 = new MutableTriple<Object, String, Integer>();
      mutableTriple0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableTriple<String, Integer, String> mutableTriple0 = new MutableTriple<String, Integer, String>();
      mutableTriple0.setLeft("wo?ME");
      MutableTriple<Object, Object, Object> mutableTriple1 = new MutableTriple<Object, Object, Object>();
      Integer integer0 = new Integer((-3184));
      ImmutableTriple<Integer, Object, String> immutableTriple0 = ImmutableTriple.of(integer0, (Object) null, "wo?ME");
      ImmutableTriple<Object, ImmutableTriple<Integer, Object, String>, Triple<Object, Object, Object>> immutableTriple1 = new ImmutableTriple<Object, ImmutableTriple<Integer, Object, String>, Triple<Object, Object, Object>>("wo?ME", immutableTriple0, mutableTriple1);
      boolean boolean0 = immutableTriple1.equals(mutableTriple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableTriple<MutableTriple<String, Object, Integer>, MutableTriple<Object, String, Object>, Integer> mutableTriple0 = new MutableTriple<MutableTriple<String, Object, Integer>, MutableTriple<Object, String, Object>, Integer>();
      Integer integer0 = new Integer((-2019));
      MutableTriple<String, Integer, Integer> mutableTriple1 = new MutableTriple<String, Integer, Integer>("kM2PVc$XP_wirk", integer0, integer0);
      boolean boolean0 = mutableTriple1.equals(mutableTriple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-2912));
      ImmutableTriple<String, Integer, String> immutableTriple0 = new ImmutableTriple<String, Integer, String>((String) null, integer0, (String) null);
      MutableTriple<ImmutableTriple<Integer, String, Object>, Integer, Object> mutableTriple0 = MutableTriple.of((ImmutableTriple<Integer, String, Object>) null, integer0, (Object) "null/empty items");
      boolean boolean0 = immutableTriple0.equals(mutableTriple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(40);
      Triple<String, Integer, Object> triple0 = Triple.of("org.apache.commons.lang3.exception.CloneFailedException", integer0, (Object) integer0);
      boolean boolean0 = triple0.equals(triple0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(40);
      Triple<String, Integer, Object> triple0 = Triple.of("org.apache.commons.lang3.exception.CloneFailedException", integer0, (Object) integer0);
      ImmutableTriple<MutableTriple<String, Object, Object>, String, Object> immutableTriple0 = ImmutableTriple.of((MutableTriple<String, Object, Object>) null, "org.apache.commons.lang3.exception.CloneFailedException", (Object) triple0);
      MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>("org.apache.commons.lang3.exception.CloneFailedException", immutableTriple0, "org.apache.commons.lang3.builder.CompareToBuilder");
      MutableTriple<String, Integer, Triple<Object, Object, String>> mutableTriple1 = MutableTriple.of("org.apache.commons.lang3.builder.CompareToBuilder", integer0, (Triple<Object, Object, String>) mutableTriple0);
      boolean boolean0 = mutableTriple1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableTriple<Integer, Integer, String> mutableTriple0 = new MutableTriple<Integer, Integer, String>();
      Triple<String, MutableTriple<Integer, Integer, String>, Object> triple0 = Triple.of("arhC", mutableTriple0, (Object) integer0);
      // Undeclared exception!
      try { 
        triple0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableTriple<Integer, String, MutableTriple<String, Object, Object>> mutableTriple0 = new MutableTriple<Integer, String, MutableTriple<String, Object, Object>>();
      String string0 = mutableTriple0.toString();
      assertEquals("(null,null,null)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-484));
      ImmutableTriple<Integer, String, Integer> immutableTriple0 = ImmutableTriple.of(integer0, "", integer0);
      int int0 = immutableTriple0.compareTo((Triple<Integer, String, Integer>) immutableTriple0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(13);
      Triple<String, Integer, Object> triple0 = Triple.of("QwGq}1 >~q@'9rc", integer0, (Object) integer0);
      ImmutableTriple<Integer, Triple<String, Integer, Object>, Integer> immutableTriple0 = new ImmutableTriple<Integer, Triple<String, Integer, Object>, Integer>(integer0, triple0, integer0);
      immutableTriple0.hashCode();
  }
}
