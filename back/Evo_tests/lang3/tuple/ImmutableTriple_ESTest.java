/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:32:11 GMT 2021
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImmutableTriple_ESTest extends ImmutableTriple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-2004));
      ImmutableTriple<Integer, Integer, String> immutableTriple0 = new ImmutableTriple<Integer, Integer, String>(integer0, integer0, "y_");
      String string0 = immutableTriple0.getRight();
      assertEquals("y_", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ImmutableTriple<String, String, Object> immutableTriple0 = ImmutableTriple.of((String) null, (String) null, (Object) "org.apache.commons.lang3.tuple.ImmutableTriple");
      String string0 = immutableTriple0.getMiddle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ImmutableTriple<Object, Object, String> immutableTriple0 = ImmutableTriple.of((Object) null, (Object) null, "");
      Object object0 = immutableTriple0.getLeft();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-921));
      ImmutableTriple<Object, String, Integer> immutableTriple0 = ImmutableTriple.of((Object) "`Zp1@==f/", "", integer0);
      Object object0 = immutableTriple0.getLeft();
      assertEquals("`Zp1@==f/", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ImmutableTriple<Object, Integer, Object> immutableTriple0 = ImmutableTriple.of((Object) null, (Integer) null, (Object) null);
      Object object0 = immutableTriple0.getRight();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ImmutableTriple<Object, String, String> immutableTriple0 = ImmutableTriple.of((Object) null, "c(j,I&N$orhDD/xljLT", "c(j,I&N$orhDD/xljLT");
      String string0 = immutableTriple0.getMiddle();
      assertEquals("c(j,I&N$orhDD/xljLT", string0);
  }
}
